-   Index
-   May 2019



CVTSI2SD — CONVERT DOUBLEWORD INTEGER TO SCALAR DOUBLE-PRECISION FLOATING-POINT VALUE


  Opcode/Instruction                                        Op / En   64/32 bit Mode Support   CPUID Feature Flag   Description
  --------------------------------------------------------- --------- ------------------------ -------------------- ----------------------------------------------------------------------------------------------------------
  F2 0F 2A /r CVTSI2SD xmm1, r32/m32                        A         V/V                      SSE2                 Convert one signed doubleword integer from r32/m32 to one double-precision floating-point value in xmm1.
  F2 REX.W 0F 2A /r CVTSI2SD xmm1, r/m64                    A         V/N.E.                   SSE2                 Convert one signed quadword integer from r/m64 to one double-precision floating-point value in xmm1.
  VEX.LIG.F2.0F.W0 2A /r VCVTSI2SD xmm1, xmm2, r/m32        B         V/V                      AVX                  Convert one signed doubleword integer from r/m32 to one double-precision floating-point value in xmm1.
  VEX.LIG.F2.0F.W1 2A /r VCVTSI2SD xmm1, xmm2, r/m64        B         V/N.E.¹                  AVX                  Convert one signed quadword integer from r/m64 to one double-precision floating-point value in xmm1.
  EVEX.LIG.F2.0F.W0 2A /r VCVTSI2SD xmm1, xmm2, r/m32       C         V/V                      AVX512F              Convert one signed doubleword integer from r/m32 to one double-precision floating-point value in xmm1.
  EVEX.LIG.F2.0F.W1 2A /r VCVTSI2SD xmm1, xmm2, r/m64{er}   C         V/N.E.¹                  AVX512F              Convert one signed quadword integer from r/m64 to one double-precision floating-point value in xmm1.

  1. VEX.W1/EVEX.W1 in non-64 bit is ignored; the instructions behaves
  as if the W0 version is used.


Instruction Operand Encoding ¶

  ------- --------------- --------------- --------------- --------------- -----------
  Op/En   Tuple Type      Operand 1       Operand 2       Operand 3       Operand 4
  A       NA              ModRM:reg (w)   ModRM:r/m (r)   NA              NA
  B       NA              ModRM:reg (w)   VEX.vvvv        ModRM:r/m (r)   NA
  C       Tuple1 Scalar   ModRM:reg (w)   EVEX.vvvv       ModRM:r/m (r)   NA
  ------- --------------- --------------- --------------- --------------- -----------


Description ¶

Converts a signed doubleword integer (or signed quadword integer if
operand size is 64 bits) in the “convert-from” source operand to a
double-precision floating-point value in the destination operand. The
result is stored in the low quadword of the destination operand, and the
high quadword left unchanged. When conversion is inexact, the value
returned is rounded according to the rounding control bits in the MXCSR
register.

The second source operand can be a general-purpose register or a
32/64-bit memory location. The first source and destination operands are
XMM registers.

128-bit Legacy SSE version: Use of the REX.W prefix promotes the
instruction to 64-bit operands. The “convert-from” source operand (the
second operand) is a general-purpose register or memory location. The
destination is an XMM register Bits (MAXVL-1:64) of the corresponding
destination register remain unchanged.

VEX.128 and EVEX encoded versions: The “convert-from” source operand
(the third operand) can be a general-purpose register or a memory
location. The first source and destination operands are XMM registers.
Bits (127:64) of the XMM register destination are copied from the
corresponding bits in the first source operand. Bits (MAXVL-1:128) of
the destination register are zeroed.

EVEX.W0 version: attempt to encode this instruction with EVEX embedded
rounding is ignored.

VEX.W1 and EVEX.W1 versions: promotes the instruction to use 64-bit
input value in 64-bit mode.

Software should ensure VCVTSI2SD is encoded with VEX.L=0. Encoding
VCVTSI2SD with VEX.L=1 may encounter unpredictable behavior across
different processor generations.


Operation ¶

VCVTSI2SD (EVEX encoded version) ¶

    IF (SRC2 *is register*) AND (EVEX.b = 1)
        THEN
            SET_RM(EVEX.RC);
        ELSE
            SET_RM(MXCSR.RM);
    FI;
    IF 64-Bit Mode And OperandSize = 64
    THEN
        DEST[63:0] ← Convert_Integer_To_Double_Precision_Floating_Point(SRC2[63:0]);
    ELSE
        DEST[63:0] ← Convert_Integer_To_Double_Precision_Floating_Point(SRC2[31:0]);
    FI;
    DEST[127:64] ← SRC1[127:64]
    DEST[MAXVL-1:128] ← 0

VCVTSI2SD (VEX.128 encoded version) ¶

    IF 64-Bit Mode And OperandSize = 64
    THEN
        DEST[63:0] ←Convert_Integer_To_Double_Precision_Floating_Point(SRC2[63:0]);
    ELSE
        DEST[63:0] ←Convert_Integer_To_Double_Precision_Floating_Point(SRC2[31:0]);
    FI;
    DEST[127:64] ←SRC1[127:64]
    DEST[MAXVL-1:128] ←0

CVTSI2SD ¶

    IF 64-Bit Mode And OperandSize = 64
    THEN
        DEST[63:0] ←Convert_Integer_To_Double_Precision_Floating_Point(SRC[63:0]);
    ELSE
        DEST[63:0] ←Convert_Integer_To_Double_Precision_Floating_Point(SRC[31:0]);
    FI;
    DEST[MAXVL-1:64] (Unmodified)


Intel C/C++ Compiler Intrinsic Equivalent ¶

    VCVTSI2SD __m128d _mm_cvti32_sd(__m128d s, int a);

    VCVTSI2SD __m128d _mm_cvti64_sd(__m128d s, __int64 a);

    VCVTSI2SD __m128d _mm_cvt_roundi64_sd(__m128d s, __int64 a, int r);

    CVTSI2SD __m128d _mm_cvtsi64_sd(__m128d s, __int64 a);

    CVTSI2SD __m128d_mm_cvtsi32_sd(__m128d a, int b)


SIMD Floating-Point Exceptions ¶

Precision


Other Exceptions ¶

VEX-encoded instructions, see Exceptions Type 3 if W1, else Type 5.

EVEX-encoded instructions, see Exceptions Type E3NF if W1, else Type
E10NF.

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
