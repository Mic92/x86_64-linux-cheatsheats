-   Index
-   May 2019



VPCMPB/VPCMPUB — COMPARE PACKED BYTE VALUES INTO MASK


  Opcode/Instruction                                                    Op/En   64/32 bit Mode Support   CPUID Feature Flag   Description
  --------------------------------------------------------------------- ------- ------------------------ -------------------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  EVEX.128.66.0F3A.W0 3F /r ib VPCMPB k1 {k2}, xmm2, xmm3/m128, imm8    A       V/V                      AVX512VL AVX512BW    Compare packed signed byte values in xmm3/m128 and xmm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.
  EVEX.256.66.0F3A.W0 3F /r ib VPCMPB k1 {k2}, ymm2, ymm3/m256, imm8    A       V/V                      AVX512VL AVX512BW    Compare packed signed byte values in ymm3/m256 and ymm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.
  EVEX.512.66.0F3A.W0 3F /r ib VPCMPB k1 {k2}, zmm2, zmm3/m512, imm8    A       V/V                      AVX512BW             Compare packed signed byte values in zmm3/m512 and zmm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.
  EVEX.128.66.0F3A.W0 3E /r ib VPCMPUB k1 {k2}, xmm2, xmm3/m128, imm8   A       V/V                      AVX512VL AVX512BW    Compare packed unsigned byte values in xmm3/m128 and xmm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.
  EVEX.256.66.0F3A.W0 3E /r ib VPCMPUB k1 {k2}, ymm2, ymm3/m256, imm8   A       V/V                      AVX512VL AVX512BW    Compare packed unsigned byte values in ymm3/m256 and ymm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.
  EVEX.512.66.0F3A.W0 3E /r ib VPCMPUB k1 {k2}, zmm2, zmm3/m512, imm8   A       V/V                      AVX512BW             Compare packed unsigned byte values in zmm3/m512 and zmm2 using bits 2:0 of imm8 as a comparison predicate with writemask k2 and leave the result in mask register k1.


Instruction Operand Encoding ¶

  ------- ------------ --------------- ----------- --------------- -----------
  Op/En   Tuple Type   Operand 1       Operand 2   Operand 3       Operand 4
  A       Full Mem     ModRM:reg (w)   vvvv (r)    ModRM:r/m (r)   NA
  ------- ------------ --------------- ----------- --------------- -----------

Description ¶

Performs a SIMD compare of the packed byte values in the second source
operand and the first source operand and returns the results of the
comparison to the mask destination operand. The comparison predicate
operand (immediate byte) specifies the type of comparison performed on
each pair of packed values in the two source operands. The result of
each comparison is a single mask bit result of 1 (comparison true) or 0
(comparison false).

VPCMPB performs a comparison between pairs of signed byte values.

VPCMPUB performs a comparison between pairs of unsigned byte values.

The first source operand (second operand) is a ZMM/YMM/XMM register. The
second source operand can be a ZMM/YMM/XMM register or a 512/256/128-bit
memory location. The destination operand (first operand) is a mask
register k1. Up to 64/32/16 comparisons are performed with results
written to the destination operand under the writemask k2.

The comparison predicate operand is an 8-bit immediate: bits 2:0 define
the type of comparison to be performed. Bits 3 through 7 of the
immediate are reserved. Compiler can implement the pseudo-op mnemonic
listed in Table 5-17.

  Pseudo-Op                       PCMPM Implementation
  ------------------------------- ------------------------------
  VPCMPEQ* _reg1, reg2, reg3_     VPCMP* _reg1, reg2, reg3, 0_
  VPCMPLT* _reg1, reg2, reg3_     VPCMP*_reg1, reg2, reg3, 1_
  VPCMPLE* _reg1, reg2, reg3_     VPCMP* _reg1, reg2, reg3, 2_
  VPCMPNEQ* _reg1, reg2, reg3_    VPCMP* _reg1, reg2, reg3, 4_
  VPPCMPNLT* _reg1, reg2, reg3_   VPCMP* _reg1, reg2, reg3, 5_
  VPCMPNLE* _reg1, reg2, reg3_    VPCMP* _reg1, reg2, reg3, 6_

Table 5-17. Pseudo-Op and VPCMP* Implementation

Operation ¶

    CASE (COMPARISON PREDICATE) OF
        0: OP←EQ;
        1: OP←LT;
        2: OP←LE;
        3: OP←FALSE;
        4: OP←NEQ;
        5: OP←NLT;
        6: OP←NLE;
        7: OP←TRUE;
    ESAC;

VPCMPB (EVEX encoded versions) ¶

    (KL, VL) = (16, 128), (32, 256), (64, 512)
    FOR j←0 TO KL-1
        i←j * 8
        IF k2[j] OR *no writemask*
            THEN
                CMP←SRC1[i+7:i] OP SRC2[i+7:i];
                IF CMP = TRUE
                    THEN DEST[j]←1;
                    ELSE DEST[j]←0; FI;
            ELSE DEST[j] = 0
                        ; zeroing-masking onlyFI;
        FI;
    ENDFOR
    DEST[MAX_KL-1:KL] ← 0

VPCMPUB (EVEX encoded versions) ¶

    (KL, VL) = (16, 128), (32, 256), (64, 512)
    FOR j←0 TO KL-1
        i←j * 8
        IF k2[j] OR *no writemask*
            THEN
                CMP←SRC1[i+7:i] OP SRC2[i+7:i];
                IF CMP = TRUE
                    THEN DEST[j]←1;
                    ELSE DEST[j]←0; FI;
            ELSE DEST[j] = 0
                        ; zeroing-masking onlyFI;
        FI;
    ENDFOR
    DEST[MAX_KL-1:KL] ← 0

Intel C/C++ Compiler Intrinsic Equivalent ¶

    VPCMPB __mmask64 _mm512_cmp_epi8_mask( __m512i a, __m512i b, int cmp);

    VPCMPB __mmask64 _mm512_mask_cmp_epi8_mask( __mmask64 m, __m512i a, __m512i b, int cmp);

    VPCMPB __mmask32 _mm256_cmp_epi8_mask( __m256i a, __m256i b, int cmp);

    VPCMPB __mmask32 _mm256_mask_cmp_epi8_mask( __mmask32 m, __m256i a, __m256i b, int cmp);

    VPCMPB __mmask16 _mm_cmp_epi8_mask( __m128i a, __m128i b, int cmp);

    VPCMPB __mmask16 _mm_mask_cmp_epi8_mask( __mmask16 m, __m128i a, __m128i b, int cmp);

    VPCMPB __mmask64 _mm512_cmp[eq|ge|gt|le|lt|neq]_epi8_mask( __m512i a, __m512i b);

    VPCMPB __mmask64 _mm512_mask_cmp[eq|ge|gt|le|lt|neq]_epi8_mask( __mmask64 m, __m512i a, __m512i b);

    VPCMPB __mmask32 _mm256_cmp[eq|ge|gt|le|lt|neq]_epi8_mask( __m256i a, __m256i b);

    VPCMPB __mmask32 _mm256_mask_cmp[eq|ge|gt|le|lt|neq]_epi8_mask( __mmask32 m, __m256i a, __m256i b);

    VPCMPB __mmask16 _mm_cmp[eq|ge|gt|le|lt|neq]_epi8_mask( __m128i a, __m128i b);

    VPCMPB __mmask16 _mm_mask_cmp[eq|ge|gt|le|lt|neq]_epi8_mask( __mmask16 m, __m128i a, __m128i b);

    VPCMPUB __mmask64 _mm512_cmp_epu8_mask( __m512i a, __m512i b, int cmp);

    VPCMPUB __mmask64 _mm512_mask_cmp_epu8_mask( __mmask64 m, __m512i a, __m512i b, int cmp);

    VPCMPUB __mmask32 _mm256_cmp_epu8_mask( __m256i a, __m256i b, int cmp);

    VPCMPUB __mmask32 _mm256_mask_cmp_epu8_mask( __mmask32 m, __m256i a, __m256i b, int cmp);

    VPCMPUB __mmask16 _mm_cmp_epu8_mask( __m128i a, __m128i b, int cmp);

    VPCMPUB __mmask16 _mm_mask_cmp_epu8_mask( __mmask16 m, __m128i a, __m128i b, int cmp);

    VPCMPUB __mmask64 _mm512_cmp[eq|ge|gt|le|lt|neq]_epu8_mask( __m512i a, __m512i b, int cmp);

    VPCMPUB __mmask64 _mm512_mask_cmp[eq|ge|gt|le|lt|neq]_epu8_mask( __mmask64 m, __m512i a, __m512i b, int cmp);

    VPCMPUB __mmask32 _mm256_cmp[eq|ge|gt|le|lt|neq]_epu8_mask( __m256i a, __m256i b, int cmp);

    VPCMPUB __mmask32 _mm256_mask_cmp[eq|ge|gt|le|lt|neq]_epu8_mask( __mmask32 m, __m256i a, __m256i b, int cmp);

    VPCMPUB __mmask16 _mm_cmp[eq|ge|gt|le|lt|neq]_epu8_mask( __m128i a, __m128i b, int cmp);

    VPCMPUB __mmask16 _mm_mask_cmp[eq|ge|gt|le|lt|neq]_epu8_mask( __mmask16 m, __m128i a, __m128i b, int cmp);

SIMD Floating-Point Exceptions ¶

None

Other Exceptions ¶

EVEX-encoded instruction, see Exceptions Type E4.nb.

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
