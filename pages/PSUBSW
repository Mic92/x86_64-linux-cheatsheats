-   Index
-   December 2017



PSUBSB/PSUBSW — SUBTRACT PACKED SIGNED INTEGERS WITH SIGNED SATURATION


  Opcode/Instruction                                                   Op/En   64/32 bit Mode Support   CPUID Feature Flag   Description
  -------------------------------------------------------------------- ------- ------------------------ -------------------- -------------------------------------------------------------------------------------------------------------------------------------------------------
  NP 0F E8 /_r_¹ PSUBSB _mm, mm/m64_                                   A       V/V                      MMX                  Subtract signed packed bytes in _mm/m64_ from signed packed bytes in _mm_ and saturate results.
  66 0F E8 /_r_ PSUBSB _xmm1_, _xmm2/m128_                             A       V/V                      SSE2                 Subtract packed signed byte integers in _xmm2/m128_ from packed signed byte integers in _xmm1_ and saturate results.
  NP 0F E9 /_r_¹ PSUBSW _mm, mm/m64_                                   A       V/V                      MMX                  Subtract signed packed words in _mm/m64_ from signed packed words in _mm_ and saturate results.
  66 0F E9 /_r_ PSUBSW _xmm1_, _xmm2/m128_                             A       V/V                      SSE2                 Subtract packed signed word integers in _xmm2/m128_ from packed signed word integers in _xmm1_ and saturate results.
  VEX.NDS.128.66.0F.WIG E8 /r VPSUBSB _xmm1, xmm2, xmm3/m128_          B       V/V                      AVX                  Subtract packed signed byte integers in _xmm3/m128_ from packed signed byte integers in _xmm2_ and saturate results.
  VEX.NDS.128.66.0F.WIG E9 /r VPSUBSW _xmm1, xmm2, xmm3/m128_          B       V/V                      AVX                  Subtract packed signed word integers in _xmm3/m128_ from packed signed word integers in _xmm2_ and saturate results.
  VEX.NDS.256.66.0F.WIG E8 /r VPSUBSB _ymm1, ymm2, ymm3/m256_          B       V/V                      AVX2                 Subtract packed signed byte integers in _ymm3/m256_ from packed signed byte integers in _ymm2_ and saturate results.
  VEX.NDS.256.66.0F.WIG E9 /r VPSUBSW _ymm1, ymm2, ymm3/m256_          B       V/V                      AVX2                 Subtract packed signed word integers in _ymm3/m256_ from packed signed word integers in _ymm2_ and saturate results.
  EVEX.NDS.128.66.0F.WIG E8 /r VPSUBSB xmm1 {k1}{z}, xmm2, xmm3/m128   C       V/V                      AVX512VL AVX512BW    Subtract packed signed byte integers in xmm3/m128 from packed signed byte integers in xmm2 and saturate results and store in xmm1 using writemask k1.
  EVEX.NDS.256.66.0F.WIG E8 /r VPSUBSB ymm1 {k1}{z}, ymm2, ymm3/m256   C       V/V                      AVX512VL AVX512BW    Subtract packed signed byte integers in ymm3/m256 from packed signed byte integers in ymm2 and saturate results and store in ymm1 using writemask k1.
  EVEX.NDS.512.66.0F.WIG E8 /r VPSUBSB zmm1 {k1}{z}, zmm2, zmm3/m512   C       V/V                      AVX512BW             Subtract packed signed byte integers in zmm3/m512 from packed signed byte integers in zmm2 and saturate results and store in zmm1 using writemask k1.
  EVEX.NDS.128.66.0F.WIG E9 /r VPSUBSW xmm1 {k1}{z}, xmm2, xmm3/m128   C       V/V                      AVX512VL AVX512BW    Subtract packed signed word integers in xmm3/m128 from packed signed word integers in xmm2 and saturate results and store in xmm1 using writemask k1.
  EVEX.NDS.256.66.0F.WIG E9 /r VPSUBSW ymm1 {k1}{z}, ymm2, ymm3/m256   C       V/V                      AVX512VL AVX512BW    Subtract packed signed word integers in ymm3/m256 from packed signed word integers in ymm2 and saturate results and store in ymm1 using writemask k1.

  -------------------------------------------------------------------- --- ----- ---------- -------------------------------------------------------------------------------------------------------------------------------------------------------
  EVEX.NDS.512.66.0F.WIG E9 /r VPSUBSW zmm1 {k1}{z}, zmm2, zmm3/m512   C   V/V   AVX512BW   Subtract packed signed word integers in zmm3/m512 from packed signed word integers in zmm2 and saturate results and store in zmm1 using writemask k1.
  -------------------------------------------------------------------- --- ----- ---------- -------------------------------------------------------------------------------------------------------------------------------------------------------

  1. See note in Section 2.4, “AVX and SSE Instruction Exception
  Specification” in the _Intel® 64 and IA-32 Architectures Software
  Developer’s Manual, Volume 2A_ and Section 22.25.3, “Exception
  Conditions of Legacy SIMD Instructions Operating on MMX Registers” in
  the _Intel® 64 and IA-32 Architectures Software Developer’s Manual,
  Volume 3A_.


Instruction Operand Encoding¶

  ------- ------------ ------------------ --------------- --------------- -----------
  Op/En   Tuple Type   Operand 1          Operand 2       Operand 3       Operand 4
  A       NA           ModRM:reg (r, w)   ModRM:r/m (r)   NA              NA
  B       NA           ModRM:reg (w)      VEX.vvvv (r)    ModRM:r/m (r)   NA
  C       Full Mem     ModRM:reg (w)      EVEX.vvvv (r)   ModRM:r/m (r)   NA
  ------- ------------ ------------------ --------------- --------------- -----------


Description¶

Performs a SIMD subtract of the packed signed integers of the source
operand (second operand) from the packed signed integers of the
destination operand (first operand), and stores the packed integer
results in the destination operand. See Figure 9-4 in the _Intel® 64 and
IA-32 Architectures Software Developer’s Manual, Volume 1_, for an
illustration of a SIMD operation. Overflow is handled with signed
saturation, as described in the following paragraphs.

The (V)PSUBSB instruction subtracts packed signed byte integers. When an
individual byte result is beyond the range of a signed byte integer
(that is, greater than 7FH or less than 80H), the saturated value of 7FH
or 80H, respectively, is written to the destination operand.

The (V)PSUBSW instruction subtracts packed signed word integers. When an
individual word result is beyond the range of a signed word integer
(that is, greater than 7FFFH or less than 8000H), the saturated value of
7FFFH or 8000H, respectively, is written to the destination operand.

In 64-bit mode and not encoded with VEX/EVEX, using a REX prefix in the
form of REX.R permits this instruction to access additional registers
(XMM8-XMM15).

Legacy SSE version 64-bit operand: The destination operand must be an
MMX technology register and the source operand can be either an MMX
technology register or a 64-bit memory location.

128-bit Legacy SSE version: The second source operand is an XMM register
or a 128-bit memory location. The first source operand and destination
operands are XMM registers. Bits (MAXVL-1:128) of the corresponding YMM
destination register remain unchanged.

VEX.128 encoded version: The second source operand is an XMM register or
a 128-bit memory location. The first source operand and destination
operands are XMM registers. Bits (MAXVL-1:128) of the destination YMM
register are zeroed.

VEX.256 encoded versions: The second source operand is an YMM register
or an 256-bit memory location. The first source operand and destination
operands are YMM registers. Bits (MAXVL-1:256) of the corresponding ZMM
register are zeroed.

EVEX encoded version: The second source operand is an ZMM/YMM/XMM
register or an 512/256/128-bit memory location. The first source operand
and destination operands are ZMM/YMM/XMM registers. The destination is
conditionally updated with writemask k1.


Operation¶

PSUBSB (with 64-bit operands)¶

    DEST[7:0] ← SaturateToSignedByte (DEST[7:0] − SRC (7:0]);
    (* Repeat subtract operation for 2nd through 7th bytes *)
    DEST[63:56] ← SaturateToSignedByte (DEST[63:56] − SRC[63:56] );

PSUBSW (with 64-bit operands)¶

    DEST[15:0] ← SaturateToSignedWord (DEST[15:0] − SRC[15:0] );
    (* Repeat subtract operation for 2nd and 7th words *)
    DEST[63:48] ← SaturateToSignedWord (DEST[63:48] − SRC[63:48] );

VPSUBSB (EVEX encoded versions)¶

    (KL, VL) = (16, 128), (32, 256), (64, 512)
    FOR j←0 TO KL-1
        i←j * 8;
        IF k1[j] OR *no writemask*
            THEN DEST[i+7:i]←SaturateToSignedByte (SRC1[i+7:i] - SRC2[i+7:i])
            ELSE
                IF *merging-masking* ; merging-masking
                    THEN *DEST[i+7:i] remains unchanged*
                    ELSE *zeroing-masking*
                            ; zeroing-masking
                        DEST[i+7:i] ← 0;
                FI
        FI;
    ENDFOR;
    DEST[MAXVL-1:VL] ← 0

VPSUBSW (EVEX encoded versions)¶

    (KL, VL) = (8, 128), (16, 256), (32, 512)
    FOR j←0 TO KL-1
        i←j * 16
        IF k1[j] OR *no writemask*
            THEN DEST[i+15:i]←SaturateToSignedWord (SRC1[i+15:i] - SRC2[i+15:i])
            ELSE
                IF *merging-masking* ; merging-masking
                    THEN *DEST[i+15:i] remains unchanged*
                    ELSE *zeroing-masking*
                            ; zeroing-masking
                        DEST[i+15:i] ← 0;
                FI
        FI;
    ENDFOR;
    DEST[MAXVL-1:VL] ← 0;

VPSUBSB (VEX.256 encoded version)¶

    DEST[7:0]←SaturateToSignedByte (SRC1[7:0] - SRC2[7:0]);
    (* Repeat subtract operation for 2nd through 31th bytes *)
    DEST[255:248]←SaturateToSignedByte (SRC1[255:248] - SRC2[255:248]);
    DEST[MAXVL-1:256] ←0;

VPSUBSB (VEX.128 encoded version)¶

    DEST[7:0]←SaturateToSignedByte (SRC1[7:0] - SRC2[7:0]);
    (* Repeat subtract operation for 2nd through 14th bytes *)
    DEST[127:120]←SaturateToSignedByte (SRC1[127:120] - SRC2[127:120]);
    DEST[MAXVL-1:128] ← 0;

PSUBSB (128-bit Legacy SSE Version)¶

    DEST[7:0]←SaturateToSignedByte (DEST[7:0] - SRC[7:0]);
    (* Repeat subtract operation for 2nd through 14th bytes *)
    DEST[127:120]←SaturateToSignedByte (DEST[127:120] - SRC[127:120]);
    DEST[MAXVL-1:128] (Unmodified);

VPSUBSW (VEX.256 encoded version)¶

    DEST[15:0]←SaturateToSignedWord (SRC1[15:0] - SRC2[15:0]);
    (* Repeat subtract operation for 2nd through 15th words *)
    DEST[255:240]←SaturateToSignedWord (SRC1[255:240] - SRC2[255:240]);
    DEST[MAXVL-1:256] ← 0;

VPSUBSW (VEX.128 encoded version)¶

    DEST[15:0]←SaturateToSignedWord (SRC1[15:0] - SRC2[15:0]);
    (* Repeat subtract operation for 2nd through 7th words *)
    DEST[127:112]←SaturateToSignedWord (SRC1[127:112] - SRC2[127:112]);
    DEST[MAXVL-1:128] ← 0;

PSUBSW (128-bit Legacy SSE Version)¶

    DEST[15:0]←SaturateToSignedWord (DEST[15:0] - SRC[15:0]);
    (* Repeat subtract operation for 2nd through 7th words *)
    DEST[127:112]←SaturateToSignedWord (DEST[127:112] - SRC[127:112]);
    DEST[MAXVL-1:128] (Unmodified);


Intel C/C++ Compiler Intrinsic Equivalents¶

    VPSUBSB __m512i _mm512_subs_epi8(__m512i a, __m512i b);

    VPSUBSB __m512i _mm512_mask_subs_epi8(__m512i s, __mmask64 k, __m512i a, __m512i b);

    VPSUBSB __m512i _mm512_maskz_subs_epi8( __mmask64 k, __m512i a, __m512i b);

    VPSUBSB __m256i _mm256_mask_subs_epi8(__m256i s, __mmask32 k, __m256i a, __m256i b);

    VPSUBSB __m256i _mm256_maskz_subs_epi8( __mmask32 k, __m256i a, __m256i b);

    VPSUBSB __m128i _mm_mask_subs_epi8(__m128i s, __mmask16 k, __m128i a, __m128i b);

    VPSUBSB __m128i _mm_maskz_subs_epi8( __mmask16 k, __m128i a, __m128i b);

    VPSUBSW __m512i _mm512_subs_epi16(__m512i a, __m512i b);

    VPSUBSW __m512i _mm512_mask_subs_epi16(__m512i s, __mmask32 k, __m512i a, __m512i b);

    VPSUBSW __m512i _mm512_maskz_subs_epi16( __mmask32 k, __m512i a, __m512i b);

    VPSUBSW __m256i _mm256_mask_subs_epi16(__m256i s, __mmask16 k, __m256i a, __m256i b);

    VPSUBSW __m256i _mm256_maskz_subs_epi16( __mmask16 k, __m256i a, __m256i b);

    VPSUBSW __m128i _mm_mask_subs_epi16(__m128i s, __mmask8 k, __m128i a, __m128i b);

    VPSUBSW __m128i _mm_maskz_subs_epi16( __mmask8 k, __m128i a, __m128i b);

    PSUBSB:__m64 _mm_subs_pi8(__m64 m1, __m64 m2)

    (V)PSUBSB:__m128i _mm_subs_epi8(__m128i m1, __m128i m2)

    VPSUBSB:__m256i _mm256_subs_epi8(__m256i m1, __m256i m2)

    PSUBSW:__m64 _mm_subs_pi16(__m64 m1, __m64 m2)

    (V)PSUBSW:__m128i _mm_subs_epi16(__m128i m1, __m128i m2)

    VPSUBSW:__m256i _mm256_subs_epi16(__m256i m1, __m256i m2)


Flags Affected¶

None.


Numeric Exceptions¶

None.


Other Exceptions¶

Non-EVEX-encoded instruction, see Exceptions Type 4.

EVEX-encoded instruction, see Exceptions Type E4.nb.

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
