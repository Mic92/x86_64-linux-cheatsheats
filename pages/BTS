-   Index
-   December 2017



BTS — BIT TEST AND SET


  Opcode                  Instruction         Op/En   64-bit Mode   Compat/Leg Mode   Description
  ----------------------- ------------------- ------- ------------- ----------------- ----------------------------------------
  0F AB /r                BTS _r/m16, r16_    MR      Valid         Valid             Store selected bit in CF flag and set.
  0F AB /r                BTS _r/m32, r32_    MR      Valid         Valid             Store selected bit in CF flag and set.
  REX.W + 0F AB /r        BTS _r/m64, r64_    MR      Valid         N.E.              Store selected bit in CF flag and set.
  0F BA /5 _ib_           BTS _r/m16, imm8_   MI      Valid         Valid             Store selected bit in CF flag and set.
  0F BA /5 _ib_           BTS _r/m32, imm8_   MI      Valid         Valid             Store selected bit in CF flag and set.
  REX.W + 0F BA /5 _ib_   BTS _r/m64, imm8_   MI      Valid         N.E.              Store selected bit in CF flag and set.


Instruction Operand Encoding¶

  ------- ------------------ --------------- ----------- -----------
  Op/En   Operand 1          Operand 2       Operand 3   Operand 4
  MR      ModRM:r/m (r, w)   ModRM:reg (r)   NA          NA
  MI      ModRM:r/m (r, w)   imm8            NA          NA
  ------- ------------------ --------------- ----------- -----------


Description¶

Selects the bit in a bit string (specified with the first operand,
called the bit base) at the bit-position designated by the bit offset
operand (second operand), stores the value of the bit in the CF flag,
and sets the selected bit in the bit string to 1. The bit base operand
can be a register or a memory location; the bit offset operand can be a
register or an immediate value:

-   If the bit base operand specifies a register, the instruction takes
    the modulo 16, 32, or 64 of the bit offset operand (modulo size
    depends on the mode and register size; 64-bit operands are available
    only in 64-bit mode). This allows any bit position to be selected.
-   If the bit base operand specifies a memory location, the operand
    represents the address of the byte in memory that contains the bit
    base (bit 0 of the specified byte) of the bit string. The range of
    the bit position that can be referenced by the offset operand
    depends on the operand size.

See also: BIT(BITBASE, BITOFFSET) on page 3-12.

Some assemblers support immediate bit offsets larger than 31 by using
the immediate bit offset field in combination with the displacement
field of the memory operand. See “BT—Bit Test” in this chapter for more
information on this addressing mechanism.

This instruction can be used with a LOCK prefix to allow the instruction
to be executed atomically.

In 64-bit mode, the instruction’s default operation size is 32 bits.
Using a REX prefix in the form of REX.R permits access to additional
registers (R8-R15). Using a REX prefix in the form of REX.W promotes
operation to 64 bits. See the summary chart at the beginning of this
section for encoding data and limits.


Operation¶

    CF ← Bit(BitBase, BitOffset);
    Bit(BitBase, BitOffset) ← 1;


Flags Affected¶

The CF flag contains the value of the selected bit before it is set. The
ZF flag is unaffected. The OF, SF, AF, and PF flags are undefined.


Protected Mode Exceptions¶

#GP(0)

If the destination operand points to a non-writable segment.

If a memory operand effective address is outside the CS, DS, ES, FS, or
GS segment limit.

If the DS, ES, FS, or GS register contains a NULL segment selector.

#SS(0)

If a memory operand effective address is outside the SS segment limit.

#PF(fault-code)

If a page fault occurs.

#AC(0)

If alignment checking is enabled and an unaligned memory reference is
made while the current privilege level is 3.

#UD

If the LOCK prefix is used but the destination is not a memory operand.


Real-Address Mode Exceptions¶

  ----- -------------------------------------------------------------------------------------------
  #GP   If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
  #SS   If a memory operand effective address is outside the SS segment limit.
  #UD   If the LOCK prefix is used but the destination is not a memory operand.
  ----- -------------------------------------------------------------------------------------------


Virtual-8086 Mode Exceptions¶

  ----------------- -------------------------------------------------------------------------------------------
  #GP               If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
  #SS               If a memory operand effective address is outside the SS segment limit.
  #PF(fault-code)   If a page fault occurs.
  #AC(0)            If alignment checking is enabled and an unaligned memory reference is made.
  #UD               If the LOCK prefix is used but the destination is not a memory operand.
  ----------------- -------------------------------------------------------------------------------------------


Compatibility Mode Exceptions¶

Same exceptions as in protected mode.


64-Bit Mode Exceptions¶

  ----------------- --------------------------------------------------------------------------------------------------------------------
  #SS(0)            If a memory address referencing the SS segment is in a non-canonical form.
  #GP(0)            If the memory address is in a non-canonical form.
  #PF(fault-code)   If a page fault occurs.
  #AC(0)            If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
  #UD               If the LOCK prefix is used but the destination is not a memory operand.
  ----------------- --------------------------------------------------------------------------------------------------------------------

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
