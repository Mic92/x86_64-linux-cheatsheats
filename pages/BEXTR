-   Index
-   May 2019



BEXTR — BIT FIELD EXTRACT


  Opcode/Instruction                             Op/En   64/32 -bit Mode   CPUID Feature Flag   Description
  ---------------------------------------------- ------- ----------------- -------------------- ------------------------------------------------------------------------------------
  VEX.LZ.0F38.W0 F7 /r BEXTR r32a, r/m32, r32b   RMV     V/V               BMI1                 Contiguous bitwise extract from r/m32 using r32b as control; store result in r32a.
  VEX.LZ.0F38.W1 F7 /r BEXTR r64a, r/m64, r64b   RMV     V/N.E.            BMI1                 Contiguous bitwise extract from r/m64 using r64b as control; store result in r64a


Instruction Operand Encoding ¶

  ------- --------------- --------------- -------------- -----------
  Op/En   Operand 1       Operand 2       Operand 3      Operand 4
  RMV     ModRM:reg (w)   ModRM:r/m (r)   VEX.vvvv (r)   NA
  ------- --------------- --------------- -------------- -----------


Description ¶

Extracts contiguous bits from the first source operand (the second
operand) using an index value and length value specified in the second
source operand (the third operand). Bit 7:0 of the second source operand
specifies the starting bit position of bit extraction. A START value
exceeding the operand size will not extract any bits from the second
source operand. Bit 15:8 of the second source operand specifies the
maximum number of bits (LENGTH) beginning at the START position to
extract. Only bit positions up to (OperandSize -1) of the first source
operand are extracted. The extracted bits are written to the destination
register, starting from the least significant bit. All higher order bits
in the destination operand (starting at bit position LENGTH) are zeroed.
The destination register is cleared if no bits are extracted.

This instruction is not supported in real mode and virtual-8086 mode.
The operand size is always 32 bits if not in 64-bit mode. In 64-bit mode
operand size 64 requires VEX.W1. VEX.W1 is ignored in non-64-bit modes.
An attempt to execute this instruction with VEX.L not equal to 0 will
cause #UD.


Operation ¶

    START ← SRC2[7:0];
    LEN ← SRC2[15:8];
    TEMP ← ZERO_EXTEND_TO_512 (SRC1 );
    DEST ← ZERO_EXTEND(TEMP[START+LEN -1: START]);
    ZF ← (DEST = 0);


Flags Affected ¶

ZF is updated based on the result. AF, SF, and PF are undefined. All
other flags are cleared.


Intel C/C++ Compiler Intrinsic Equivalent ¶

    BEXTR: unsigned __int32 _bextr_u32(unsigned __int32 src, unsigned __int32 start. unsigned __int32 len);

    BEXTR: unsigned __int64 _bextr_u64(unsigned __int64 src, unsigned __int32 start. unsigned __int32 len);


SIMD Floating-Point Exceptions ¶

None


Other Exceptions ¶

See Exceptions Type 13; additionally

  ----- ---------------
  #UD   If VEX.W = 1.
  ----- ---------------

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
