-   Index
-   December 2017



VFNMSUB132SS/VFNMSUB213SS/VFNMSUB231SS — FUSED NEGATIVE MULTIPLY-SUBTRACT OF SCALAR SINGLE-PRECISION FLOATING-POINT VALUES


  Opcode/Instruction                                                            Op / En   64/32 bit Mode Support   CPUID Feature Flag   Description
  ----------------------------------------------------------------------------- --------- ------------------------ -------------------- ----------------------------------------------------------------------------------------------------------------------------------------------------------
  VEX.DDS.LIG.66.0F38.W0 9F /r VFNMSUB132SS xmm1, xmm2, xmm3/m32                A         V/V                      FMA                  Multiply scalar single-precision floating-point value from xmm1 and xmm3/m32, negate the multiplication result and subtract xmm2 and put result in xmm1.
  VEX.DDS.LIG.66.0F38.W0 AF /r VFNMSUB213SS xmm1, xmm2, xmm3/m32                A         V/V                      FMA                  Multiply scalar single-precision floating-point value from xmm1 and xmm2, negate the multiplication result and subtract xmm3/m32 and put result in xmm1.
  VEX.DDS.LIG.66.0F38.W0 BF /r VFNMSUB231SS xmm1, xmm2, xmm3/m32                A         V/V                      FMA                  Multiply scalar single-precision floating-point value from xmm2 and xmm3/m32, negate the multiplication result and subtract xmm1 and put result in xmm1.
  EVEX.DDS.LIG.66.0F38.W0 9F /r VFNMSUB132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}   B         V/V                      AVX512F              Multiply scalar single-precision floating-point value from xmm1 and xmm3/m32, negate the multiplication result and subtract xmm2 and put result in xmm1.
  EVEX.DDS.LIG.66.0F38.W0 AF /r VFNMSUB213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}   B         V/V                      AVX512F              Multiply scalar single-precision floating-point value from xmm1 and xmm2, negate the multiplication result and subtract xmm3/m32 and put result in xmm1.
  EVEX.DDS.LIG.66.0F38.W0 BF /r VFNMSUB231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}   B         V/V                      AVX512F              Multiply scalar single-precision floating-point value from xmm2 and xmm3/m32, negate the multiplication result and subtract xmm1 and put result in xmm1.


Instruction Operand Encoding¶

  ------- --------------- ------------------ --------------- --------------- -----------
  Op/En   Tuple Type      Operand 1          Operand 2       Operand 3       Operand 4
  A       NA              ModRM:reg (r, w)   VEX.vvvv (r)    ModRM:r/m (r)   NA
  B       Tuple1 Scalar   ModRM:reg (r, w)   EVEX.vvvv (r)   ModRM:r/m (r)   NA
  ------- --------------- ------------------ --------------- --------------- -----------

Description¶

VFNMSUB132SS: Multiplies the low packed single-precision floating-point
value from the first source operand to the low packed single-precision
floating-point value in the third source operand. From negated infinite
precision intermediate result, the low single-precision floating-point
value in the second source operand, performs rounding and stores the
resulting packed single-precision floating-point value to the
destination operand (first source operand).

VFNMSUB213SS: Multiplies the low packed single-precision floating-point
value from the second source operand to the low packed single-precision
floating-point value in the first source operand. From negated infinite
precision intermediate result, the low single-precision floating-point
value in the third source operand, performs rounding and stores the
resulting packed single-precision floating-point value to the
destination operand (first source operand).

VFNMSUB231SS: Multiplies the low packed single-precision floating-point
value from the second source to the low packed single-precision
floating-point value in the third source operand. From negated infinite
precision intermediate result, the low single-precision floating-point
value in the first source operand, performs rounding and stores the
resulting packed single-precision floating-point value to the
destination operand (first source operand).

VEX.128 and EVEX encoded version: The destination operand (also first
source operand) is encoded in reg_field. The second source operand is
encoded in VEX.vvvv/EVEX.vvvv. The third source operand is encoded in
rm_field. Bits 127:32 of the destination are unchanged. Bits MAXVL-1:128
of the destination register are zeroed.

EVEX encoded version: The low doubleword element of the destination is
updated according to the writemask.

Compiler tools may optionally support a complementary mnemonic for each
instruction mnemonic listed in the opcode/instruction column of the
summary table. The behavior of the complementary mnemonic in situations
involving NANs are governed by the definition of the instruction
mnemonic defined in the opcode/instruction column.

Operation¶

    In the operations below, “*” and “-” symbols represent multiplication and subtraction with infinite precision inputs and outputs (no
    rounding).

VFNMSUB132SS DEST, SRC2, SRC3 (EVEX encoded version)¶

    IF (EVEX.b = 1) and SRC3 *is a register*
        THEN
            SET_RM(EVEX.RC);
        ELSE
            SET_RM(MXCSR.RM);
    FI;
    IF k1[0] or *no writemask*
        THEN DEST[31:0]←RoundFPControl(-(DEST[31:0]*SRC3[31:0]) - SRC2[31:0])
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[31:0] remains unchanged*
                ELSE ; zeroing-masking
                    THEN DEST[31:0]←0
            FI;
    FI;
    DEST[127:32] ← DEST[127:32]
    DEST[MAXVL-1:128] ← 0

VFNMSUB213SS DEST, SRC2, SRC3 (EVEX encoded version)¶

    IF (EVEX.b = 1) and SRC3 *is a register*
        THEN
            SET_RM(EVEX.RC);
        ELSE
            SET_RM(MXCSR.RM);
    FI;
    IF k1[0] or *no writemask*
        THEN DEST[31:0]←RoundFPControl(-(SRC2[31:0]*DEST[31:0]) - SRC3[31:0])
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[31:0] remains unchanged*
                ELSE ; zeroing-masking
                    THEN DEST[31:0]←0
            FI;
    FI;
    DEST[127:32] ← DEST[127:32]
    DEST[MAXVL-1:128] ← 0

VFNMSUB231SS DEST, SRC2, SRC3 (EVEX encoded version)¶

    IF (EVEX.b = 1) and SRC3 *is a register*
        THEN
            SET_RM(EVEX.RC);
        ELSE
            SET_RM(MXCSR.RM);
    FI;
    IF k1[0] or *no writemask*
        THEN DEST[31:0]←RoundFPControl(-(SRC2[31:0]*SRC3[63:0]) - DEST[31:0])
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[31:0] remains unchanged*
                ELSE ; zeroing-masking
                    THEN DEST[31:0]←0
            FI;
    FI;
    DEST[127:32] ← DEST[127:32]
    DEST[MAXVL-1:128] ← 0

VFNMSUB132SS DEST, SRC2, SRC3 (VEX encoded version)¶

    DEST[31:0]←RoundFPControl_MXCSR(- (DEST[31:0]*SRC3[31:0]) - SRC2[31:0])
    DEST[127:32] ←DEST[127:32]
    DEST[MAXVL-1:128] ←0

VFNMSUB213SS DEST, SRC2, SRC3 (VEX encoded version)¶

    DEST[31:0]←RoundFPControl_MXCSR(- (SRC2[31:0]*DEST[31:0]) - SRC3[31:0])
    DEST[127:32] ←DEST[127:32]
    DEST[MAXVL-1:128] ←0

VFNMSUB231SS DEST, SRC2, SRC3 (VEX encoded version)¶

    DEST[31:0]←RoundFPControl_MXCSR(- (SRC2[31:0]*SRC3[31:0]) - DEST[31:0])
    DEST[127:32] ←DEST[127:32]
    DEST[MAXVL-1:128] ←0

Intel C/C++ Compiler Intrinsic Equivalent¶

    VFNMSUBxxxSS __m128 _mm_fnmsub_round_ss(__m128 a, __m128 b, __m128 c, int r);

    VFNMSUBxxxSS __m128 _mm_mask_fnmsub_ss(__m128 a, __mmask8 k, __m128 b, __m128 c);

    VFNMSUBxxxSS __m128 _mm_maskz_fnmsub_ss(__mmask8 k, __m128 a, __m128 b, __m128 c);

    VFNMSUBxxxSS __m128 _mm_mask3_fnmsub_ss(__m128 a, __m128 b, __m128 c, __mmask8 k);

    VFNMSUBxxxSS __m128 _mm_mask_fnmsub_round_ss(__m128 a, __mmask8 k, __m128 b, __m128 c, int r);

    VFNMSUBxxxSS __m128 _mm_maskz_fnmsub_round_ss(__mmask8 k, __m128 a, __m128 b, __m128 c, int r);

    VFNMSUBxxxSS __m128 _mm_mask3_fnmsub_round_ss(__m128 a, __m128 b, __m128 c, __mmask8 k, int r);

    VFNMSUBxxxSS __m128 _mm_fnmsub_ss (__m128 a, __m128 b, __m128 c);

SIMD Floating-Point Exceptions¶

Overflow, Underflow, Invalid, Precision, Denormal

Other Exceptions¶

VEX-encoded instructions, see Exceptions Type 3.

EVEX-encoded instructions, see Exceptions Type E3.

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
