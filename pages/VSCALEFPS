-   Index
-   May 2019

VSCALEFPS — Scale Packed Float32 Values With Float32 Values

  Opcode/Instruction                                                              Op/En   64/32 bit Mode Support   CPUID Feature Flag   Description
  ------------------------------------------------------------------------------- ------- ------------------------ -------------------- -----------------------------------------------------------------------------------------------------------------------------------------
  EVEX.128.66.0F38.W0 2C /r VSCALEFPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst       A       V/V                      AVX512VL AVX512F     Scale the packed single-precision floating-point values in xmm2 using values from xmm3/m128/m32bcst. Under writemask k1.
  EVEX.256.66.0F38.W0 2C /r VSCALEFPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst       A       V/V                      AVX512VL AVX512F     Scale the packed single-precision values in ymm2 using floating point values from ymm3/m256/m32bcst. Under writemask k1.
  EVEX.512.66.0F38.W0 2C /r VSCALEFPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst{er}   A       V/V                      AVX512F              Scale the packed single-precision floating-point values in zmm2 using floating-point values from zmm3/m512/m32bcst. Under writemask k1.

Instruction Operand Encoding ¶

  ------- ------------ --------------- --------------- --------------- -----------
  Op/En   Tuple Type   Operand 1       Operand 2       Operand 3       Operand 4
  A       Full         ModRM:reg (w)   EVEX.vvvv (r)   ModRM:r/m (r)   NA
  ------- ------------ --------------- --------------- --------------- -----------

Description ¶

Performs a floating-point scale of the packed single-precision
floating-point values in the first source operand by multiplying it by 2
power of the float32 values in second source operand.

The equation of this operation is given by:

zmm1 := zmm2*2^(floor(zmm3)).

Floor(zmm3) means maximum integer value ≤ zmm3.

If the result cannot be represented in single precision, then the proper
overflow response (for positive scaling operand), or the proper
underflow response (for negative scaling operand) is issued. The
overflow and underflow responses are dependent on the rounding mode (for
IEEE-compliant rounding), as well as on other settings in MXCSR
(exception mask bits, FTZ bit), and on the SAE bit.

EVEX.512 encoded version: The first source operand is a ZMM register.
The second source operand is a ZMM register, a 512-bit memory location
or a 512-bit vector broadcasted from a 32-bit memory location. The
destination operand is a ZMM register conditionally updated with
writemask k1.

EVEX.256 encoded version: The first source operand is a YMM register.
The second source operand is a YMM register, a 256-bit memory location,
or a 256-bit vector broadcasted from a 32-bit memory location. The
destination operand is a YMM register, conditionally updated using
writemask k1.

EVEX.128 encoded version: The first source operand is an XMM register.
The second source operand is a XMM register, a 128-bit memory location,
or a 128-bit vector broadcasted from a 32-bit memory location. The
destination operand is a XMM register, conditionally updated using
writemask k1.

Handling of special-case input values are listed in Table 5-30 and Table
5-32.

  Special Case       Returned value                                Faults
  ------------------ --------------------------------------------- -----------
  |result| < 2⁻¹⁴⁹   ±0 or ±Min-Denormal (Src1 sign)               Underflow
  |result| ≥ 2¹²⁸    ±INF (Src1 sign) or ±Max-normal (Src1 sign)   Overflow

Table 5-32. Additional VSCALEFPS/SS Special Cases

Operation ¶

    SCALE(SRC1, SRC2)
    { ; Check for denormal operands
    TMP_SRC2 ← SRC2
    TMP_SRC1 ← SRC1
    IF (SRC2 is denormal AND MXCSR.DAZ) THEN TMP_SRC2=0
    IF (SRC1 is denormal AND MXCSR.DAZ) THEN TMP_SRC1=0
    /* SRC2 is a 32 bits floating-point value */
    DEST[31:0]←TMP_SRC1[31:0] * POW(2, Floor(TMP_SRC2[31:0]))
    }

VSCALEFPS (EVEX encoded versions) ¶

    (KL, VL) = (4, 128), (8, 256), (16, 512)
    IF (VL = 512) AND (EVEX.b = 1) AND (SRC2 *is register*)
        THEN
            SET_RM(EVEX.RC);
        ELSE
            SET_RM(MXCSR.RM);
    FI;
    FOR j←0 TO KL-1
        i←j * 32
        IF k1[j] OR *no writemask* THEN
                IF (EVEX.b = 1) AND (SRC2 *is memory*)
                    THEN DEST[i+31:i]←SCALE(SRC1[i+31:i], SRC2[31:0]);
                    ELSE DEST[i+31:i]←SCALE(SRC1[i+31:i], SRC2[i+31:i]);
                FI;
            ELSE
                IF *merging-masking* ; merging-masking
                    THEN *DEST[i+31:i] remains unchanged*
                    ELSE ; zeroing-masking
                        DEST[i+31:i] ← 0
                FI
        FI;
    ENDFOR
    DEST[MAXVL-1:VL] ← 0;

Intel C/C++ Compiler Intrinsic Equivalent ¶

    VSCALEFPS __m512 _mm512_scalef_round_ps(__m512 a, __m512 b, int rounding);

    VSCALEFPS __m512 _mm512_mask_scalef_round_ps(__m512 s, __mmask16 k, __m512 a, __m512 b, int rounding);

    VSCALEFPS __m512 _mm512_maskz_scalef_round_ps(__mmask16 k, __m512 a, __m512 b, int rounding);

    VSCALEFPS __m512 _mm512_scalef_ps(__m512 a, __m512 b);

    VSCALEFPS __m512 _mm512_mask_scalef_ps(__m512 s, __mmask16 k, __m512 a, __m512 b);

    VSCALEFPS __m512 _mm512_maskz_scalef_ps(__mmask16 k, __m512 a, __m512 b);

    VSCALEFPS __m256 _mm256_scalef_ps(__m256 a, __m256 b);

    VSCALEFPS __m256 _mm256_mask_scalef_ps(__m256 s, __mmask8 k, __m256 a, __m256 b);

    VSCALEFPS __m256 _mm256_maskz_scalef_ps(__mmask8 k, __m256 a, __m256 b);

    VSCALEFPS __m128 _mm_scalef_ps(__m128 a, __m128 b);

    VSCALEFPS __m128 _mm_mask_scalef_ps(__m128 s, __mmask8 k, __m128 a, __m128 b);

    VSCALEFPS __m128 _mm_maskz_scalef_ps(__mmask8 k, __m128 a, __m128 b);

SIMD Floating-Point Exceptions ¶

Overflow, Underflow, Invalid, Precision, Denormal (for Src1).

Denormal is not reported for Src2.

Other Exceptions ¶

See Exceptions Type E2.

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
