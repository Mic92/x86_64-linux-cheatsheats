-   Index
-   December 2017



XCHG — EXCHANGE REGISTER/MEMORY WITH REGISTER


  Opcode            Instruction         Op/En   64-Bit Mode   Compat/Leg Mode   Description
  ----------------- ------------------- ------- ------------- ----------------- ------------------------------------------------------
  90+_rw_           XCHG AX, _r16_      O       Valid         Valid             Exchange _r16_ with AX.
  90+_rw_           XCHG _r16_, AX      O       Valid         Valid             Exchange AX with _r16._
  90+_rd_           XCHG EAX, _r32_     O       Valid         Valid             Exchange _r32_ with EAX.
  REX.W + 90+_rd_   XCHG RAX, _r64_     O       Valid         N.E.              Exchange _r64_ with RAX.
  90+_rd_           XCHG _r32_, EAX     O       Valid         Valid             Exchange EAX with _r32._
  REX.W + 90+_rd_   XCHG _r64_, RAX     O       Valid         N.E.              Exchange RAX with _r64._
  86 /_r_           XCHG _r/m8, r8_     MR      Valid         Valid             Exchange _r8_ (byte register) with byte from _r/m8._
  REX + 86 /_r_     XCHG _r/m8*, r8*_   MR      Valid         N.E.              Exchange _r8_ (byte register) with byte from _r/m8._
  86 /_r_           XCHG _r8, r/m8_     RM      Valid         Valid             Exchange byte from _r/m8_ with _r8_ (byte register).
  REX + 86 /_r_     XCHG _r8*, r/m8*_   RM      Valid         N.E.              Exchange byte from _r/m8_ with _r8_ (byte register).
  87 /_r_           XCHG _r/m16, r16_   MR      Valid         Valid             Exchange _r16_ with word from _r/m16._
  87 /_r_           XCHG _r16, r/m16_   RM      Valid         Valid             Exchange word from _r/m16_ with _r16._
  87 /_r_           XCHG _r/m32, r32_   MR      Valid         Valid             Exchange _r32_ with doubleword from _r/m32._
  REX.W + 87 /_r_   XCHG _r/m64, r64_   MR      Valid         N.E.              Exchange _r64_ with quadword from _r/m64._
  87 /_r_           XCHG _r32, r/m32_   RM      Valid         Valid             Exchange doubleword from _r/m32_ with _r32._
  REX.W + 87 /_r_   XCHG _r64, r/m64_   RM      Valid         N.E.              Exchange quadword from _r/m64_ with _r64._

  *
  In64-bitmode,r/m8cannotbeencodedtoaccessthefollowingbyteregistersifaREXprefixisused:AH,BH,CH,DH.


Instruction Operand Encoding¶

  ------- -------------------- -------------------- ----------- -----------
  Op/En   Operand 1            Operand 2            Operand 3   Operand 4
  O       AX/EAX/RAX (r, w)    opcode + rd (r, w)   NA          NA
  O       opcode + rd (r, w)   AX/EAX/RAX (r, w)    NA          NA
  MR      ModRM:r/m (r, w)     ModRM:reg (r)        NA          NA
  RM      ModRM:reg (w)        ModRM:r/m (r)        NA          NA
  ------- -------------------- -------------------- ----------- -----------


Description¶

Exchanges the contents of the destination (first) and source (second)
operands. The operands can be two general-purpose registers or a
register and a memory location. If a memory operand is referenced, the
processor’s locking protocol is automatically implemented for the
duration of the exchange operation, regardless of the presence or
absence of the LOCK prefix or of the value of the IOPL. (See the LOCK
prefix description in this chapter for more information on the locking
protocol.)

This instruction is useful for implementing semaphores or similar data
structures for process synchronization. (See “Bus Locking” in Chapter 8
of the _Intel® 64 and IA-32 Architectures Software Developer’s Manual,
Volume 3A_, for more information on bus locking.)

The XCHG instruction can also be used instead of the BSWAP instruction
for 16-bit operands.

In 64-bit mode, the instruction’s default operation size is 32 bits.
Using a REX prefix in the form of REX.R permits access to additional
registers (R8-R15). Using a REX prefix in the form of REX.W promotes
operation to 64 bits. See the summary chart at the beginning of this
section for encoding data and limits.

  XCHG (E)AX, (E)AX (encoded instruction byte is 90H) is an alias for
  NOP regardless of data size prefixes, including REX.W.


Operation¶

    TEMP ← DEST;
    DEST ← SRC;
    SRC ← TEMP;


Flags Affected¶

None.


Protected Mode Exceptions¶

#GP(0)

If either operand is in a non-writable segment.

If a memory operand effective address is outside the CS, DS, ES, FS, or
GS segment limit.

If the DS, ES, FS, or GS register contains a NULL segment selector.

#SS(0)

If a memory operand effective address is outside the SS segment limit.

#PF(fault-code)

If a page fault occurs.

#AC(0)

If alignment checking is enabled and an unaligned memory reference is
made while the current privilege level is 3.

#UD

If the LOCK prefix is used but the destination is not a memory operand.


Real-Address Mode Exceptions¶

  ----- -------------------------------------------------------------------------------------------
  #GP   If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
  #SS   If a memory operand effective address is outside the SS segment limit.
  #UD   If the LOCK prefix is used but the destination is not a memory operand.
  ----- -------------------------------------------------------------------------------------------


Virtual-8086 Mode Exceptions¶

  ----------------- -------------------------------------------------------------------------------------------
  #GP(0)            If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
  #SS(0)            If a memory operand effective address is outside the SS segment limit.
  #PF(fault-code)   If a page fault occurs.
  #AC(0)            If alignment checking is enabled and an unaligned memory reference is made.
  #UD               If the LOCK prefix is used but the destination is not a memory operand.
  ----------------- -------------------------------------------------------------------------------------------


Compatibility Mode Exceptions¶

Same exceptions as in protected mode.


64-Bit Mode Exceptions¶

  ----------------- --------------------------------------------------------------------------------------------------------------------
  #SS(0)            If a memory address referencing the SS segment is in a non-canonical form.
  #GP(0)            If the memory address is in a non-canonical form.
  #PF(fault-code)   If a page fault occurs.
  #AC(0)            If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
  #UD               If the LOCK prefix is used but the destination is not a memory operand.
  ----------------- --------------------------------------------------------------------------------------------------------------------

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
