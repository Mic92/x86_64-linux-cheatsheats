-   Index
-   December 2017



CPUID — CPU IDENTIFICATION


  Opcode   Instruction   Op/En   64-Bit Mode   Compat/Leg Mode   Description
  -------- ------------- ------- ------------- ----------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------
  0F A2    CPUID         ZO      Valid         Valid             Returns processor identification and feature information to the EAX, EBX, ECX, and EDX registers, as determined by input entered in EAX (in some cases, ECX as well).


Instruction Operand Encoding¶

  ------- ----------- ----------- ----------- -----------
  Op/En   Operand 1   Operand 2   Operand 3   Operand 4
  ZO      NA          NA          NA          NA
  ------- ----------- ----------- ----------- -----------


Description¶

The ID flag (bit 21) in the EFLAGS register indicates support for the
CPUID instruction. If a software procedure can set and clear this flag,
the processor executing the procedure supports the CPUID instruction.
This instruction operates the same in non-64-bit modes and 64-bit mode.

CPUID returns processor identification and feature information in the
EAX, EBX, ECX, and EDX registers.¹ The instruction’s output is dependent
on the contents of the EAX register upon execution (in some cases, ECX
as well). For example, the following pseudocode loads EAX with 00H and
causes CPUID to return a Maximum Return Value and the Vendor
Identification String in the appropriate registers:

  1. On Intel 64 processors, CPUID clears the high 32 bits of the
  RAX/RBX/RCX/RDX registers in all modes.

MOV EAX, 00H

CPUID

Table 3-8 shows information returned, depending on the initial value
loaded into the EAX register.

Two types of information are returned: basic and extended function
information. If a value entered for CPUID.EAX is higher than the maximum
input value for basic or extended function for that processor then the
data for the highest basic information leaf is returned. For example,
using the Intel Core i7 processor, the following is true:

CPUID.EAX = 05H (* Returns MONITOR/MWAIT leaf. *)

CPUID.EAX = 0AH (* Returns Architectural Performance Monitoring leaf. *)

CPUID.EAX = 0BH (* Returns Extended Topology Enumeration leaf. *)

CPUID.EAX = 0CH (* INVALID: Returns the same information as CPUID.EAX =
0BH. *)

CPUID.EAX = 80000008H (* Returns linear/physical address size data. *)

CPUID.EAX = 8000000AH (* INVALID: Returns same information as CPUID.EAX
= 0BH. *)

If a value entered for CPUID.EAX is less than or equal to the maximum
input value and the leaf is not supported on that processor then 0 is
returned in all the registers.

When CPUID returns the highest basic leaf information as a result of an
invalid input EAX value, any dependence on input ECX value in the basic
leaf is honored.

CPUID can be executed at any privilege level to serialize instruction
execution. Serializing instruction execution guarantees that any
modifications to flags, registers, and memory for previous instructions
are completed before the next instruction is fetched and executed.

SEE ALSO:

“Serializing Instructions” in Chapter 8, “Multiple-Processor
Management,” in the _Intel® 64 and IA-32 Architectures Software
Developer’s Manual, Volume 3A_.

“Caching Translation Information” in Chapter 4, “Paging,” in the _Intel®
64 and IA-32 Architectures Software Developer’s Manual, Volume 3A_.

Initial EAX Value

Information Provided about the Processor

_Basic CPUID Information_

0H

EAX Maximum Input Value for Basic CPUID Information. EBX “Genu” ECX
“ntel” EDX “ineI”

01H

EAX Version Information: Type, Family, Model, and Stepping ID (see
Figure 3-6). EBX Bits 07 - 00: Brand Index. Bits 15 - 08: CLFLUSH line
size (Value ∗ 8 = cache line size in bytes; used also by CLFLUSHOPT).
Bits 23 - 16: Maximum number of addressable IDs for logical processors
in this physical package*. Bits 31 - 24: Initial APIC ID. ECX Feature
Information (see Figure 3-7 and Table 3-10). EDX Feature Information
(see Figure 3-8 and Table 3-11). NOTES: *
Thenearestpower-of-2integerthatisnotsmallerthanEBX[23:16]isthenumberofuniqueinitialAPIC
IDs reserved for addressing different logical processors in a physical
package. This field is only valid if CPUID.1.EDX.HTT[bit 28]= 1.

02H

EAX Cache and TLB Information (see Table 3-12). EBX Cache and TLB
Information. ECX Cache and TLB Information. EDX Cache and TLB
Information.

03H

EAX Reserved. EBX Reserved. ECX Bits 00 - 31 of 96 bit processor serial
number. (Available in Pentium III processor only; otherwise, the value
in this register is reserved.) EDX Bits 32 - 63 of 96 bit processor
serial number. (Available in Pentium III processor only; otherwise, the
value in this register is reserved.) NOTES: Processor serial number
(PSN) is not supported in the Pentium 4 processor or later. On all
models, use the PSN flag (returned using CPUID) to check for PSN support
before accessing the feature.

CPUID leaves above 2 and below 80000000H are visible only when
IA32_MISC_ENABLE[bit 22] has its default value of 0.

_Deterministic Cache Parameters Leaf_

04H

NOTES: Leaf 04H output depends on the initial value in ECX.* See also:
“INPUT EAX = 04H: Returns Deterministic Cache Parameters for Each Level”
on page 217. EAX Bits 04 - 00: Cache Type Field. 0 = Null - No more
caches. 1 = Data Cache. 2 = Instruction Cache. 3 = Unified Cache. 4-31 =
Reserved.

Bits 07 - 05: Cache Level (starts at 1). Bit 08: Self Initializing cache
level (does not need SW initialization). Bit 09: Fully Associative
cache. Bits 13 - 10: Reserved. Bits 25 - 14: Maximum number of
addressable IDs for logical processors sharing this cache**, ***. Bits
31 - 26: Maximum number of addressable IDs for processor cores in the
physical package**, ****, *****. EBX Bits 11 - 00: L = System Coherency
Line Size**. Bits 21 - 12: P = Physical Line partitions**. Bits 31 - 22:
W = Ways of associativity**. ECX Bits 31-00: S = Number of Sets**. EDX
Bit 00: Write-Back Invalidate/Invalidate. 0 = WBINVD/INVD from threads
sharing this cache acts upon lower level caches for threads sharing this
cache. 1 = WBINVD/INVD is not guaranteed to act upon lower level caches
of non-originating threads sharing this cache. Bit 01: Cache
Inclusiveness. 0 = Cache is not inclusive of lower cache levels. 1 =
Cache is inclusive of lower cache levels. Bit 02: Complex Cache
Indexing. 0 = Direct mapped cache. 1 = A complex function is used to
index the cache, potentially using all address bits. Bits 31 - 03:
Reserved = 0. NOTES: * If ECX contains an invalid sub leaf index,
EAX/EBX/ECX/EDX return 0. Sub-leaf index n+1 is invalid if sub-leaf n
returns EAX[4:0] as 0. ** Add one to the return value to get the result.
***The nearest power-of-2 integer that is not smaller than (1 +
EAX[25:14]) is the number of unique initial APIC IDs reserved for
addressing different logical processors sharing this cache. **** The
nearest power-of-2 integer that is not smaller than (1 + EAX[31:26]) is
the number of unique Core_IDs reserved for addressing different
processor cores in a physical package. Core ID is a subset of bits of
the initial APIC ID. ***** The returned value is constant for valid
initial values in ECX. Valid ECX values start from 0.

_MONITOR/MWAIT Leaf_

05H

EAX Bits 15 - 00: Smallest monitor-line size in bytes (default is
processor's monitor granularity). Bits 31 - 16: Reserved = 0. EBX Bits
15 - 00: Largest monitor-line size in bytes (default is processor's
monitor granularity). Bits 31 - 16: Reserved = 0. ECX Bit 00:
Enumeration of Monitor-Mwait extensions (beyond EAX and EBX registers)
supported. Bit 01: Supports treating interrupts as break-event for
MWAIT, even when interrupts disabled. Bits 31 - 02: Reserved.

Table 3-8. Information Returned by CPUID Instruction

INITIAL EAX VALUE

INFORMATION PROVIDED ABOUT THE PROCESSOR

EDX Bits 03 - 00: Number of C0* sub C-states supported using MWAIT. Bits
07 - 04: Number of C1* sub C-states supported using MWAIT. Bits 11 - 08:
Number of C2* sub C-states supported using MWAIT. Bits 15 - 12: Number
of C3* sub C-states supported using MWAIT. Bits 19 - 16: Number of C4*
sub C-states supported using MWAIT. Bits 23 - 20: Number of C5* sub
C-states supported using MWAIT. Bits 27 - 24: Number of C6* sub C-states
supported using MWAIT. Bits 31 - 28: Number of C7* sub C-states
supported using MWAIT. NOTE: *
ThedefinitionofC0throughC7statesforMWAITextensionareprocessor-specificC-states,notACPIC-states.

_Thermal and Power Management Leaf_

06H

EAX Bit 00: Digital temperature sensor is supported if set. Bit 01:
Intel Turbo Boost Technology available (see description of
IA32_MISC_ENABLE[38]). Bit 02: ARAT. APIC-Timer-always-running feature
is supported if set. Bit 03: Reserved. Bit 04: PLN. Power limit
notification controls are supported if set. Bit 05: ECMD. Clock
modulation duty cycle extension is supported if set. Bit 06: PTM.
Package thermal management is supported if set. Bit 07: HWP. HWP base
registers (IA32_PM_ENABLE[bit 0], IA32_HWP_CAPABILITIES,
IA32_HWP_REQUEST, IA32_HWP_STATUS) are supported if set. Bit 08:
HWP_Notification. IA32_HWP_INTERRUPT MSR is supported if set. Bit 09:
HWP_Activity_Window. IA32_HWP_REQUEST[bits 41:32] is supported if set.
Bit 10: HWP_Energy_Performance_Preference. IA32_HWP_REQUEST[bits 31:24]
is supported if set. Bit 11: HWP_Package_Level_Request.
IA32_HWP_REQUEST_PKG MSR is supported if set. Bit 12: Reserved. Bit 13:
HDC. HDC base registers IA32_PKG_HDC_CTL, IA32_PM_CTL1,
IA32_THREAD_STALL MSRs are supported if set. Bit 14: Intel® Turbo Boost
Max Technology 3.0 available. Bits 31 - 15: Reserved. EBX Bits 03 - 00:
Number of Interrupt Thresholds in Digital Thermal Sensor. Bits 31 - 04:
Reserved. ECX Bit 00: Hardware Coordination Feedback Capability
(Presence of IA32_MPERF and IA32_APERF). The capability to provide a
measure of delivered processor performance (since last reset of the
counters), as a percentage of the expected processor performance when
running at the TSC frequency. Bits 02 - 01: Reserved = 0. Bit 03: The
processor supports performance-energy bias preference if
CPUID.06H:ECX.SETBH[bit 3] is set and it also implies the presence of a
new architectural MSR called IA32_ENERGY_PERF_BIAS (1B0H). Bits 31 - 04:
Reserved = 0. EDX Reserved = 0.

Table 3-8. Information Returned by CPUID Instruction (Contd.)

Initial EAX Value

Information Provided about the Processor

_Structured Extended Feature Flags Enumeration Leaf (Output depends on
ECX input value)_

07H

Sub-leaf 0 (Input ECX = 0). * EAX Bits 31 - 00: Reports the maximum
input value for supported leaf 7 sub-leaves. EBX Bit 00: FSGSBASE.
Supports RDFSBASE/RDGSBASE/WRFSBASE/WRGSBASE if 1. Bit 01:
IA32_TSC_ADJUST MSR is supported if 1. Bit 02: SGX. Supports Intel®
Software Guard Extensions (Intel® SGX Extensions) if 1. Bit 03: BMI1.
Bit 04: HLE. Bit 05: AVX2. Bit 06: FDP_EXCPTN_ONLY. x87 FPU Data Pointer
updated only on x87 exceptions if 1. Bit 07: SMEP. Supports
Supervisor-Mode Execution Prevention if 1. Bit 08: BMI2. Bit 09:
Supports Enhanced REP MOVSB/STOSB if 1. Bit 10: INVPCID. If 1, supports
INVPCID instruction for system software that manages process-context
identifiers. Bit 11: RTM. Bit 12: RDT-M. Supports Intel® Resource
Director Technology (Intel® RDT) Monitoring capability if 1. Bit 13:
Deprecates FPU CS and FPU DS values if 1. Bit 14: MPX. Supports Intel®
Memory Protection Extensions if 1. Bit 15: RDT-A. Supports Intel®
Resource Director Technology (Intel® RDT) Allocation capability if 1.
Bit 16: AVX512F. Bit 17: AVX512DQ. Bit 18: RDSEED. Bit 19: ADX. Bit 20:
SMAP. Supports Supervisor-Mode Access Prevention (and the CLAC/STAC
instructions) if 1. Bit 21: AVX512_IFMA. Bit 22: Reserved. Bit 23:
CLFLUSHOPT. Bit 24: CLWB. Bit 25: Intel Processor Trace. Bit 26:
AVX512PF. (Intel® Xeon PhiTM only.) Bit 27: AVX512ER. (Intel® Xeon PhiTM
only.) Bit 28: AVX512CD. Bit 29: SHA. supports Intel® Secure Hash
Algorithm Extensions (Intel® SHA Extensions) if 1. Bit 30: AVX512BW. Bit
31: AVX512VL. ECX Bit 00: PREFETCHWT1. (Intel® Xeon PhiTM only.) Bit 01:
AVX512_VBMI. Bit 02: UMIP. Supports user-mode instruction prevention if
1. Bit 03: PKU. Supports protection keys for user-mode pages if 1. Bit
04: OSPKE. If 1, OS has set CR4.PKE to enable protection keys (and the
RDPKRU/WRPKRU instructions). Bits 16 - 5: Reserved. Bits 21 - 17: The
value of MAWAU used by the BNDLDX and BNDSTX instructions in 64-bit
mode. Bit 22: RDPID. Supports Read Processor ID if 1. Bits 29 - 23:
Reserved. Bit 30: SGX_LC. Supports SGX Launch Configuration if 1. Bit
31: Reserved.

Table 3-8. Information Returned by CPUID Instruction (Contd.)

Initial EAX Value

Information Provided about the Processor

EDX Reserved. NOTE: * If ECX contains an invalid sub-leaf index,
EAX/EBX/ECX/EDX return 0. Sub-leaf index n is invalid if n exceeds the
value that sub-leaf 0 returns in EAX.

_Direct Cache Access Information Leaf_

09H

EAX Value of bits [31:0] of IA32_PLATFORM_DCA_CAP MSR (address 1F8H).
EBX Reserved. ECX Reserved. EDX Reserved.

_Architectural Performance Monitoring Leaf_

0AH

EAX Bits 07 - 00: Version ID of architectural performance monitoring.
Bits 15 - 08: Number of general-purpose performance monitoring counter
per logical processor. Bits 23 - 16: Bit width of general-purpose,
performance monitoring counter. Bits 31 - 24: Length of EBX bit vector
to enumerate architectural performance monitoring events. EBX Bit 00:
Core cycle event not available if 1. Bit 01: Instruction retired event
not available if 1. Bit 02: Reference cycles event not available if 1.
Bit 03: Last-level cache reference event not available if 1. Bit 04:
Last-level cache misses event not available if 1. Bit 05: Branch
instruction retired event not available if 1. Bit 06: Branch mispredict
retired event not available if 1. Bits 31 - 07: Reserved = 0. ECX
Reserved = 0. EDX Bits 04 - 00: Number of fixed-function performance
counters (if Version ID > 1). Bits 12 - 05: Bit width of fixed-function
performance counters (if Version ID > 1). Bits 14 - 13: Reserved = 0.
Bit 15: AnyThread deprecation. Bits 31 - 16: Reserved = 0.

_Extended Topology Enumeration Leaf_

0BH

NOTES: Most of Leaf 0BH output depends on the initial value in ECX. The
EDX output of leaf 0BH is always valid and does not vary with input
value in ECX. Output value in ECX[7:0] always equals input value in
ECX[7:0]. Sub-leaf index 0 enumerates SMT level. Each subsequent higher
sub-leaf index enumerates a higher-level topological entity in
hierarchical order. For sub-leaves that return an invalid level-type of
0 in ECX[15:8]; EAX and EBX will return 0. If an input value n in ECX
returns the invalid level-type of 0 in ECX[15:8], other input values
with ECX > n also return 0 in ECX[15:8]. EAX Bits 04 - 00: Number of
bits to shift right on x2APIC ID to get a unique topology ID of the next
level type*. All logical processors with the same next level ID share
current level. Bits 31 - 05: Reserved. EBX Bits 15 - 00: Number of
logical processors at this level type. The number reflects configuration
as shipped by Intel**. Bits 31- 16: Reserved.

Table 3-8. Information Returned by CPUID Instruction (Contd.)

Initial EAX Value

Information Provided about the Processor

ECX Bits 07 - 00: Level number. Same value in ECX input. Bits 15 - 08:
Level type***. Bits 31 - 16: Reserved. EDX Bits 31- 00: x2APIC ID the
current logical processor. NOTES: * Software should use this field
(EAX[4:0]) to enumerate processor topology of the system. ** Software
must not use EBX[15:0] to enumerate processor topology of the system.
This value in this field (EBX[15:0]) is only intended for
display/diagnostic purposes. The actual number of logical processors
available to BIOS/OS/Applications may be different from the value of
EBX[15:0], depending on software and platform hardware configurations.
*** The value of the “level type” field is not related to level numbers
in any way, higher “level type” values do not mean higher levels. Level
type field has the following encoding: 0: Invalid. 1: SMT. 2: Core.
3-255: Reserved.

_Processor Extended State Enumeration Main Leaf (EAX = 0DH, ECX = 0)_

0DH

NOTES: Leaf 0DH main leaf (ECX = 0). EAX Bits 31 - 00: Reports the
supported bits of the lower 32 bits of XCR0. XCR0[n] can be set to 1
only if EAX[n] is 1. Bit 00: x87 state. Bit 01: SSE state. Bit 02: AVX
state. Bits 04 - 03: MPX state. Bits 07 - 05: AVX-512 state. Bit 08:
Used for IA32_XSS. Bit 09: PKRU state. Bits 31 - 10: Reserved. EBX Bits
31 - 00: Maximum size (bytes, from the beginning of the XSAVE/XRSTOR
save area) required by enabled features in XCR0. May be different than
ECX if some features at the end of the XSAVE save area are not enabled.
ECX Bit 31 - 00: Maximum size (bytes, from the beginning of the
XSAVE/XRSTOR save area) of the XSAVE/XRSTOR save area required by all
supported features in the processor, i.e., all the valid bit fields in
XCR0. EDX Bit 31 - 00: Reports the supported bits of the upper 32 bits
of XCR0. XCR0[n+32] can be set to 1 only if EDX[n] is 1. Bits 31 - 00:
Reserved.

_Processor Extended State Enumeration Sub-leaf (EAX = 0DH, ECX = 1)_

0DH

EAX Bit 00: XSAVEOPT is available. Bit 01: Supports XSAVEC and the
compacted form of XRSTOR if set. Bit 02: Supports XGETBV with ECX = 1 if
set. Bit 03: Supports XSAVES/XRSTORS and IA32_XSS if set. Bits 31 - 04:
Reserved. EBX Bits 31 - 00: The size in bytes of the XSAVE area
containing all states enabled by XCRO | IA32_XSS.

Table 3-8. Information Returned by CPUID Instruction (Contd.)

Initial EAX Value

Information Provided about the Processor

ECX Bits 31 - 00: Reports the supported bits of the lower 32 bits of the
IA32_XSS MSR. IA32_XSS[n] can be set to 1 only if ECX[n] is 1. Bits 07 -
00: Used for XCR0. Bit 08: PT state. Bit 09: Used for XCR0. Bits 31 -
10: Reserved. EDX Bits 31 - 00: Reports the supported bits of the upper
32 bits of the IA32_XSS MSR. IA32_XSS[n+32] can be set to 1 only if
EDX[n] is 1. Bits 31 - 00: Reserved.

_Processor Extended State Enumeration Sub-leaves (EAX = 0DH, ECX = n, n
> 1)_

0DH

NOTES: Leaf 0DH output depends on the initial value in ECX. Each
sub-leaf index (starting at position 2) is supported if it corresponds
to a supported bit in either the XCR0 register or the IA32_XSS MSR. * If
ECX contains an invalid sub-leaf index, EAX/EBX/ECX/EDX return 0.
Sub-leaf n (0 ≤ n ≤ 31) is invalid if sub-leaf 0 returns 0 in EAX[n] and
sub-leaf 1 returns 0 in ECX[n]. Sub-leaf n (32 ≤ n ≤ 63) is invalid if
sub-leaf 0 returns 0 in EDX[n-32] and sub-leaf 1 returns 0 in EDX[n-32].
EAX Bits 31 - 0: The size in bytes (from the offset specified in EBX) of
the save area for an extended state feature associated with a valid
sub-leaf index, _n_. EBX Bits 31 - 0: The offset in bytes of this
extended state component’s save area from the beginning of the
XSAVE/XRSTOR area. This field reports 0 if the sub-leaf index, n, does
not map to a valid bit in the XCR0 register*. ECX Bit 00 is set if the
bit n (corresponding to the sub-leaf index) is supported in the IA32_XSS
MSR; it is clear if bit n is instead supported in XCR0. Bit 01 is set
if, when the compacted format of an XSAVE area is used, this extended
state component located on the next 64-byte boundary following the
preceding state component (otherwise, it is located immediately
following the preceding state component). Bits 31 - 02 are reserved.
This field reports 0 if the sub-leaf index, n, is invalid*. EDX This
field reports 0 if the sub-leaf index, _n_, is invalid*; otherwise it is
reserved.

_Intel Resource Director Technology (Intel RDT) Monitoring Enumeration
Sub-leaf (EAX = 0FH, ECX = 0)_

0FH

NOTES: Leaf 0FH output depends on the initial value in ECX. Sub-leaf
index 0 reports valid resource type starting at bit position 1 of EDX.
EAX Reserved. EBX Bits 31 - 00: Maximum range (zero-based) of RMID
within this physical processor of all types. ECX Reserved. EDX Bit 00:
Reserved. Bit 01: Supports L3 Cache Intel RDT Monitoring if 1. Bits 31 -
02: Reserved.

_L3 Cache Intel RDT Monitoring Capability Enumeration Sub-leaf (EAX =
0FH, ECX = 1)_

0FH

NOTES: Leaf 0FH output depends on the initial value in ECX. EAX
Reserved. EBX Bits 31 - 00: Conversion factor from reported IA32_QM_CTR
value to occupancy metric (bytes).

Table 3-8. Information Returned by CPUID Instruction (Contd.)

Initial EAX Value

Information Provided about the Processor

ECX Maximum range (zero-based) of RMID of this resource type. EDX Bit
00: Supports L3 occupancy monitoring if 1. Bit 01: Supports L3 Total
Bandwidth monitoring if 1. Bit 02: Supports L3 Local Bandwidth
monitoring if 1. Bits 31 - 03: Reserved.

_Intel Resource Director Technology (Intel RDT) Allocation Enumeration
Sub-leaf (EAX = 10H, ECX = 0)_

10H

NOTES: Leaf 10H output depends on the initial value in ECX. Sub-leaf
index 0 reports valid resource identification (ResID) starting at bit
position 1 of EBX. EAX Reserved. EBX Bit 00: Reserved. Bit 01: Supports
L3 Cache Allocation Technology if 1. Bit 02: Supports L2 Cache
Allocation Technology if 1. Bit 03: Supports Memory Bandwidth Allocation
if 1. Bits 31 - 04: Reserved. ECX Reserved. EDX Reserved.

_L3 Cache Allocation Technology Enumeration Sub-leaf (EAX = 10H, ECX =
ResID =1)_

10H

NOTES: Leaf 10H output depends on the initial value in ECX. EAX Bits 04
- 00: Length of the capacity bit mask for the corresponding ResID using
minus-one notation. Bits 31 - 05: Reserved. EBX Bits 31 - 00:
Bit-granular map of isolation/contention of allocation units. ECX Bits
01- 00: Reserved. Bit 02: Code and Data Prioritization Technology
supported if 1. Bits 31 - 03: Reserved. EDX Bits 15 - 00: Highest COS
number supported for this ResID. Bits 31 - 16: Reserved.

_L2 Cache Allocation Technology Enumeration Sub-leaf (EAX = 10H, ECX =
ResID =2)_

10H

NOTES: Leaf 10H output depends on the initial value in ECX. EAX Bits 04
- 00: Length of the capacity bit mask for the corresponding ResID using
minus-one notation. Bits 31 - 05: Reserved. EBX Bits 31 - 00:
Bit-granular map of isolation/contention of allocation units. ECX Bits
31 - 00: Reserved. EDX Bits 15 - 00: Highest COS number supported for
this ResID. Bits 31 - 16: Reserved.

_Memory Bandwidth Allocation Enumeration Sub-leaf (EAX = 10H, ECX =
ResID =3)_

10H

NOTES: Leaf 10H output depends on the initial value in ECX. EAX Bits 11
- 00: Reports the maximum MBA throttling value supported for the
corresponding ResID using minus-one notation. Bits 31 - 12: Reserved.

Table 3-8. Information Returned by CPUID Instruction (Contd.)

Initial EAX Value

Information Provided about the Processor

EBX Bits 31 - 00: Reserved. ECX Bits 01 - 00: Reserved. Bit 02: Reports
whether the response of the delay values is linear. Bits 31 - 03:
Reserved. EDX Bits 15 - 00: Highest COS number supported for this ResID.
Bits 31 - 16: Reserved.

_Intel SGX Capability Enumeration Leaf, sub-leaf 0 (EAX = 12H, ECX = 0)_

12H

NOTES: Leaf 12H sub-leaf 0 (ECX = 0) is supported if CPUID.(EAX=07H,
ECX=0H):EBX[SGX] = 1. EAX Bit 00: SGX1. If 1, Indicates Intel SGX
supports the collection of SGX1 leaf functions. Bit 01: SGX2. If 1,
Indicates Intel SGX supports the collection of SGX2 leaf functions. Bits
04 - 02: Reserved. Bit 05: If 1, indicates Intel SGX supports ENCLV
instruction leaves EINCVIRTCHILD, EDECVIRTCHILD, and ESETCONTEXT. Bit
06: If 1, indicates Intel SGX supports ENCLS instruction leaves ETRACKC,
ERDINFO, ELDBC, and ELDUC. Bits 31 - 02: Reserved. EBX Bits 31 - 00:
MISCSELECT. Bit vector of supported extended SGX features. ECX Bits 31 -
00: Reserved. EDX Bits 07 - 00: MaxEnclaveSize_Not64. The maximum
supported enclave size in non-64-bit mode is 2^(EDX[7:0]). Bits 15 - 08:
MaxEnclaveSize_64. The maximum supported enclave size in 64-bit mode is
2^(EDX[15:8]). Bits 31 - 16: Reserved.

_Intel SGX Attributes Enumeration Leaf, sub-leaf 1 (EAX = 12H, ECX = 1)_

12H

NOTES: Leaf 12H sub-leaf 1 (ECX = 1) is supported if CPUID.(EAX=07H,
ECX=0H):EBX[SGX] = 1. EAX Bit 31 - 00: Reports the valid bits of
SECS.ATTRIBUTES[31:0] that software can set with ECREATE. EBX Bit 31 -
00: Reports the valid bits of SECS.ATTRIBUTES[63:32] that software can
set with ECREATE. ECX Bit 31 - 00: Reports the valid bits of
SECS.ATTRIBUTES[95:64] that software can set with ECREATE. EDX Bit 31 -
00: Reports the valid bits of SECS.ATTRIBUTES[127:96] that software can
set with ECREATE.

_Intel SGX EPC Enumeration Leaf, sub-leaves (EAX = 12H, ECX = 2 or
higher)_

12H

NOTES: Leaf 12H sub-leaf 2 or higher (ECX >= 2) is supported if
CPUID.(EAX=07H, ECX=0H):EBX[SGX] = 1. For sub-leaves (ECX = 2 or
higher), definition of EDX,ECX,EBX,EAX[31:4] depends on the sub-leaf
type listed below. EAX Bit 03 - 00: Sub-leaf Type 0000b: Indicates this
sub-leaf is invalid. 0001b: This sub-leaf enumerates an EPC section.
EBX:EAX and EDX:ECX provide information on the Enclave Page Cache (EPC)
section. All other type encodings are reserved. Type 0000b. This
sub-leaf is invalid. EDX:ECX:EBX:EAX return 0.

Table 3-8. Information Returned by CPUID Instruction (Contd.)

Initial EAX Value

Information Provided about the Processor

Type 0001b. This sub-leaf enumerates an EPC sections with EDX:ECX,
EBX:EAX defined as follows. EAX[11:04]: Reserved (enumerate 0).
EAX[31:12]: Bits 31:12 of the physical address of the base of the EPC
section. EBX[19:00]: Bits 51:32 of the physical address of the base of
the EPC section. EBX[31:20]: Reserved. ECX[03:00]: EPC section property
encoding defined as follows: If EAX[3:0] 0000b, then all bits of the
EDX:ECX pair are enumerated as 0. If EAX[3:0] 0001b, then this section
has confidentiality and integrity protection. All other encodings are
reserved. ECX[11:04]: Reserved (enumerate 0). ECX[31:12]: Bits 31:12 of
the size of the corresponding EPC section within the Processor Reserved
Memory. EDX[19:00]: Bits 51:32 of the size of the corresponding EPC
section within the Processor Reserved Memory. EDX[31:20]: Reserved.

_Intel Processor Trace Enumeration Main Leaf (EAX = 14H, ECX = 0)_

14H

NOTES: Leaf 14H main leaf (ECX = 0). EAX Bits 31 - 00: Reports the
maximum sub-leaf supported in leaf 14H. EBX Bit 00: If 1, indicates that
IA32_RTIT_CTL.CR3Filter can be set to 1, and that IA32_RTIT_CR3_MATCH
MSR can be accessed. Bit 01: If 1, indicates support of Configurable PSB
and Cycle-Accurate Mode. Bit 02: If 1, indicates support of IP
Filtering, TraceStop filtering, and preservation of Intel PT MSRs across
warm reset. Bit 03: If 1, indicates support of MTC timing packet and
suppression of COFI-based packets. Bit 04: If 1, indicates support of
PTWRITE. Writes can set IA32_RTIT_CTL[12] (PTWEn) and IA32_RTIT_CTL[5]
(FUPonPTW), and PTWRITE can generate packets. Bit 05: If 1, indicates
support of Power Event Trace. Writes can set IA32_RTIT_CTL[4]
(PwrEvtEn), enabling Power Event Trace packet generation. Bit 31 - 06:
Reserved. ECX Bit 00: If 1, Tracing can be enabled with
IA32_RTIT_CTL.ToPA = 1, hence utilizing the ToPA output scheme;
IA32_RTIT_OUTPUT_BASE and IA32_RTIT_OUTPUT_MASK_PTRS MSRs can be
accessed. Bit 01: If 1, ToPA tables can hold any number of output
entries, up to the maximum allowed by the MaskOrTableOffset field of
IA32_RTIT_OUTPUT_MASK_PTRS. Bit 02: If 1, indicates support of
Single-Range Output scheme. Bit 03: If 1, indicates support of output to
Trace Transport subsystem. Bit 30 - 04: Reserved. Bit 31: If 1,
generated packets which contain IP payloads have LIP values, which
include the CS base component. EDX Bits 31 - 00: Reserved.

_Intel Processor Trace Enumeration Sub-leaf (EAX = 14H, ECX = 1)_

14H

EAX Bits 02 - 00: Number of configurable Address Ranges for filtering.
Bits 15 - 03: Reserved. Bits 31 - 16: Bitmap of supported MTC period
encodings. EBX Bits 15 - 00: Bitmap of supported Cycle Threshold value
encodings. Bit 31 - 16: Bitmap of supported Configurable PSB frequency
encodings. ECX Bits 31 - 00: Reserved.

Table 3-8. Information Returned by CPUID Instruction (Contd.)

Initial EAX Value

Information Provided about the Processor

EDX Bits 31 - 00: Reserved.

_Time Stamp Counter and Nominal Core Crystal Clock Information Leaf_

15H

NOTES: If EBX[31:0] is 0, the TSC/”core crystal clock” ratio is not
enumerated. EBX[31:0]/EAX[31:0] indicates the ratio of the TSC frequency
and the core crystal clock frequency. If ECX is 0, the nominal core
crystal clock frequency is not enumerated. “TSC frequency” = “core
crystal clock frequency” * EBX/EAX. The core crystal clock may differ
from the reference clock, bus clock, or core clock frequencies. EAX Bits
31 - 00: An unsigned integer which is the denominator of the TSC/”core
crystal clock” ratio. EBX Bits 31 - 00: An unsigned integer which is the
numerator of the TSC/”core crystal clock” ratio. ECX Bits 31 - 00: An
unsigned integer which is the nominal frequency of the core crystal
clock in Hz. EDX Bits 31 - 00: Reserved = 0.

_Processor Frequency Information Leaf_

16H

EAX Bits 15 - 00: Processor Base Frequency (in MHz). Bits 31 - 16:
Reserved =0. EBX Bits 15 - 00: Maximum Frequency (in MHz). Bits 31 - 16:
Reserved = 0. ECX Bits 15 - 00: Bus (Reference) Frequency (in MHz). Bits
31 - 16: Reserved = 0. EDX Reserved. NOTES: * Data is returned from this
interface in accordance with the processor's specification and does not
reflect actual values. Suitable use of this data includes the display of
processor information in like manner to the processor brand string and
for determining the appropriate range to use when displaying processor
information e.g. frequency history graphs. The returned information
should not be used for any other purpose as the returned information
does not accurately correlate to information / counters returned by
other processor interfaces. While a processor may support the Processor
Frequency Information leaf, fields that return a value of zero are not
supported.

_System-On-Chip Vendor Attribute Enumeration Main Leaf (EAX = 17H, ECX =
0)_

17H

NOTES: Leaf 17H main leaf (ECX = 0). Leaf 17H output depends on the
initial value in ECX. Leaf 17H sub-leaves 1 through 3 reports SOC Vendor
Brand String. Leaf 17H is valid if MaxSOCID_Index >= 3. Leaf 17H
sub-leaves 4 and above are reserved. EAX Bits 31 - 00: MaxSOCID_Index.
Reports the maximum input value of supported sub-leaf in leaf 17H. EBX
Bits 15 - 00: SOC Vendor ID. Bit 16: IsVendorScheme. If 1, the SOC
Vendor ID field is assigned via an industry standard enumeration scheme.
Otherwise, the SOC Vendor ID field is assigned by Intel. Bits 31 - 17:
Reserved = 0. ECX Bits 31 - 00: Project ID. A unique number an SOC
vendor assigns to its SOC projects. EDX Bits 31 - 00: Stepping ID. A
unique number within an SOC project that an SOC vendor assigns.

Table 3-8. Information Returned by CPUID Instruction (Contd.)

Initial EAX Value

Information Provided about the Processor

_System-On-Chip Vendor Attribute Enumeration Sub-leaf (EAX = 17H, ECX =
1..3)_

17H

EAX Bit 31 - 00: SOC Vendor Brand String. UTF-8 encoded string. EBX Bit
31 - 00: SOC Vendor Brand String. UTF-8 encoded string. ECX Bit 31 - 00:
SOC Vendor Brand String. UTF-8 encoded string. EDX Bit 31 - 00: SOC
Vendor Brand String. UTF-8 encoded string. NOTES: Leaf 17H output
depends on the initial value in ECX. SOC Vendor Brand String is a UTF-8
encoded string padded with trailing bytes of 00H. The complete SOC
Vendor Brand String is constructed by concatenating in ascending order
of EAX:EBX:ECX:EDX and from the sub-leaf 1 fragment towards sub-leaf 3.

_System-On-Chip Vendor Attribute Enumeration Sub-leaves (EAX = 17H, ECX
> MaxSOCID_Index)_

17H

NOTES: Leaf 17H output depends on the initial value in ECX. EAX Bits 31
- 00: Reserved = 0. EBX Bits 31 - 00: Reserved = 0. ECX Bits 31 - 00:
Reserved = 0. EDX Bits 31 - 00: Reserved = 0.

_Deterministic Address Translation Parameters Main Leaf (EAX = 18H, ECX
= 0)_

18H

NOTES: Each sub-leaf enumerates a different address translation
structure. If ECX contains an invalid sub-leaf index, EAX/EBX/ECX/EDX
return 0. Sub-leaf index n is invalid if n exceeds the value that
sub-leaf 0 returns in EAX. A sub-leaf index is also invalid if EDX[4:0]
returns 0. Valid sub-leaves do not need to be contiguous or in any
particular order. A valid sub-leaf may be in a higher input ECX value
than an invalid sub-leaf or than a valid sub-leaf of a higher or
lower-level structure. * Some unified TLBs will allow a single TLB entry
to satisfy data read/write and instruction fetches. Others will require
separate entries (e.g., one loaded on data read/write and another loaded
on an instruction fetch) . Please see the _Intel® 64 and IA-32
Architectures Optimization Reference Manual_ for details of a particular
product. ** Add one to the return value to get the result. EAX Bits 31 -
00: Reports the maximum input value of supported sub-leaf in leaf 18H.
EBX Bit 00: 4K page size entries supported by this structure. Bit 01:
2MB page size entries supported by this structure. Bit 02: 4MB page size
entries supported by this structure. Bit 03: 1 GB page size entries
supported by this structure. Bits 07 - 04: Reserved. Bits 10 - 08:
Partitioning (0: Soft partitioning between the logical processors
sharing this structure). Bits 15 - 11: Reserved. Bits 31 - 16: W = Ways
of associativity. ECX Bits 31 - 00: S = Number of Sets.

Table 3-8. Information Returned by CPUID Instruction (Contd.)

Initial EAX Value

Information Provided about the Processor

EDX Bits 04 - 00: Translation cache type field. 00000b: Null (indicates
this sub-leaf is not valid). 00001b: Data TLB. 00010b: Instruction TLB.
00011b: Unified TLB*. All other encodings are reserved. Bits 07 - 05:
Translation cache level (starts at 1). Bit 08: Fully associative
structure. Bits 13 - 09: Reserved. Bits 25- 14: Maximum number of
addressable IDs for logical processors sharing this translation cache**
Bits 31 - 26: Reserved.

_Deterministic Address Translation Parameters Sub-leaf (EAX = 18H, ECX ≥
1)_

18H

NOTES: Each sub-leaf enumerates a different address translation
structure. If ECX contains an invalid sub-leaf index, EAX/EBX/ECX/EDX
return 0. Sub-leaf index n is invalid if n exceeds the value that
sub-leaf 0 returns in EAX. A sub-leaf index is also invalid if EDX[4:0]
returns 0. Valid sub-leaves do not need to be contiguous or in any
particular order. A valid sub-leaf may be in a higher input ECX value
than an invalid sub-leaf or than a valid sub-leaf of a higher or
lower-level structure. * Some unified TLBs will allow a single TLB entry
to satisfy data read/write and instruction fetches. Others will require
separate entries (e.g., one loaded on data read/write and another loaded
on an instruction fetch) . Please see the _Intel® 64 and IA-32
Architectures Optimization Reference Manual_ for details of a particular
product. ** Add one to the return value to get the result. EAX Bits 31 -
00: Reserved. EBX Bit 00: 4K page size entries supported by this
structure. Bit 01: 2MB page size entries supported by this structure.
Bit 02: 4MB page size entries supported by this structure. Bit 03: 1 GB
page size entries supported by this structure. Bits 07 - 04: Reserved.
Bits 10 - 08: Partitioning (0: Soft partitioning between the logical
processors sharing this structure). Bits 15 - 11: Reserved. Bits 31 -
16: W = Ways of associativity. ECX Bits 31 - 00: S = Number of Sets. EDX
Bits 04 - 00: Translation cache type field. 0000b: Null (indicates this
sub-leaf is not valid). 0001b: Data TLB. 0010b: Instruction TLB. 0011b:
Unified TLB*. All other encodings are reserved. Bits 07 - 05:
Translation cache level (starts at 1). Bit 08: Fully associative
structure. Bits 13 - 09: Reserved. Bits 25- 14: Maximum number of
addressable IDs for logical processors sharing this translation cache**
Bits 31 - 26: Reserved.

_Unimplemented CPUID Leaf Functions_

40000000H -4FFFFFFFH

Invalid. No existing or future CPU will return processor identification
or feature information if the initial EAX value is in the range
40000000H to 4FFFFFFFH.

Table 3-8. Information Returned by CPUID Instruction (Contd.)

Initial EAX Value

Information Provided about the Processor

_Extended Function CPUID Information_

80000000H

EAX Maximum Input Value for Extended Function CPUID Information. EBX
Reserved. ECX Reserved. EDX Reserved.

80000001H

EAX Extended Processor Signature and Feature Bits. EBX Reserved. ECX Bit
00: LAHF/SAHF available in 64-bit mode. Bits 04 - 01: Reserved. Bit 05:
LZCNT. Bits 07 - 06: Reserved. Bit 08: PREFETCHW. Bits 31 - 09:
Reserved. EDX Bits 10 - 00: Reserved. Bit 11: SYSCALL/SYSRET available
in 64-bit mode. Bits 19 - 12: Reserved = 0. Bit 20: Execute Disable Bit
available. Bits 25 - 21: Reserved = 0. Bit 26: 1-GByte pages are
available if 1. Bit 27: RDTSCP and IA32_TSC_AUX are available if 1. Bit
28: Reserved = 0. Bit 29: Intel_^(®)_ 64 Architecture available if 1.
Bits 31 - 30: Reserved = 0.

80000002H

EAX Processor Brand String. EBX Processor Brand String Continued. ECX
Processor Brand String Continued. EDX Processor Brand String Continued.

80000003H

EAX Processor Brand String Continued. EBX Processor Brand String
Continued. ECX Processor Brand String Continued. EDX Processor Brand
String Continued.

80000004H

EAX Processor Brand String Continued. EBX Processor Brand String
Continued. ECX Processor Brand String Continued. EDX Processor Brand
String Continued.

80000005H

EAX Reserved = 0. EBX Reserved = 0. ECX Reserved = 0. EDX Reserved = 0.

80000006H

EAX Reserved = 0. EBX Reserved = 0. ECX Bits 07 - 00: Cache Line size in
bytes. Bits 11 - 08: Reserved. Bits 15 - 12: L2 Associativity field *.
Bits 31 - 16: Cache size in 1K units. EDX Reserved = 0.

Table 3-8. Information Returned by CPUID Instruction (Contd.)

  Initial EAX Value   Information Provided about the Processor
  ------------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                      NOTES: * L2 associativity field encodings: 00H - Disabled. 01H - Direct mapped. 02H - 2-way. 04H - 4-way. 06H - 8-way. 08H - 16-way. 0FH - Fully associative.
  80000007H           EAX Reserved = 0. EBX Reserved = 0. ECX Reserved = 0. EDX Bits 07 - 00: Reserved = 0. Bit 08: Invariant TSC available if 1. Bits 31 - 09: Reserved = 0.
  80000008H           EAX Linear/Physical Address size. Bits 07 - 00: #Physical Address Bits*. Bits 15 - 08: #Linear Address Bits. Bits 31 - 16: Reserved = 0. EBX Reserved = 0. ECX Reserved = 0. EDX Reserved = 0. NOTES: * IfCPUID.80000008H:EAX[7:0]issupported,themaximumphysicaladdressnumbersupportedshould come from this field.

Table 3-8. Information Returned by CPUID Instruction (Contd.)


INPUT EAX = 0: Returns CPUID’s Highest Value for Basic Processor Information and the Vendor Identification String¶

When CPUID executes with EAX set to 0, the processor returns the highest
value the CPUID recognizes for returning basic processor information.
The value is returned in the EAX register and is processor specific.

A vendor identification string is also returned in EBX, EDX, and ECX.
For Intel processors, the string is “GenuineIntel” and is expressed:

EBX ← 756e6547h (* “Genu”, with G in the low eight bits of BL *) EDX ←
49656e69h (* “ineI”, with i in the low eight bits of DL *) ECX ←
6c65746eh (* “ntel”, with n in the low eight bits of CL *)


INPUT EAX = 80000000H: Returns CPUID’s Highest Value for Extended Processor Information¶

When CPUID executes with EAX set to 80000000H, the processor returns the
highest value the processor recognizes for returning extended processor
information. The value is returned in the EAX register and is processor
specific.


IA32_BIOS_SIGN_ID Returns Microcode Update Signature¶

For processors that support the microcode update facility, the
IA32_BIOS_SIGN_ID MSR is loaded with the update signature whenever CPUID
executes. The signature is returned in the upper DWORD. For details, see
Chapter 9 in the _Intel® 64 and IA-32 Architectures Software Developer’s
Manual, Volume 3A_.


INPUT EAX = 01H: Returns Model, Family, Stepping Information¶

When CPUID executes with EAX set to 01H, version information is returned
in EAX (see Figure 3-6). For example: model, family, and processor type
for the Intel Xeon processor 5100 series is as follows:

-   Model — 1111B
-   Family — 0101B
-   Processor Type — 00B

See Table 3-9 for available processor type values. Stepping IDs are
provided as needed.

31 2827 2019 161514131211 8 7 4 3 0 Stepping Extended Extended Family
Model EAX ID Family ID Model ID ID Extended Family ID (0) Extended Model
ID (0) Processor Type Family (0FH for the Pentium 4 Processor Family)
Model Reserved

Figure 3-6. Version Information Returned by CPUID in EAX

  Type                                                     Encoding
  -------------------------------------------------------- ----------
  Original OEM Processor                                   00B
  Intel OverDrive^(®) Processor                            01B
  Dual processor (not applicable to Intel486 processors)   10B
  Intel reserved                                           11B

Table 3-9. Processor Type Field

  See Chapter 19 in the _Intel® 64 and IA-32 Architectures Software
  Developer’s Manual, Volume 1_, for information on identifying earlier
  IA-32 processors.

The Extended Family ID needs to be examined only when the Family ID is
0FH. Integrate the fields into a display using the following rule:

IF Family_ID ≠ 0FH THEN DisplayFamily = Family_ID;

ELSE DisplayFamily = Extended_Family_ID + Family_ID;

(* Right justify and zero-extend 4-bit field. *)

FI;

(* Show DisplayFamily as HEX field. *)

The Extended Model ID needs to be examined only when the Family ID is
06H or 0FH. Integrate the field into a display using the following rule:

IF (Family_ID = 06H or Family_ID = 0FH)

THEN DisplayModel = (Extended_Model_ID « 4) + Model_ID;

(* Right justify and zero-extend 4-bit field; display Model_ID as HEX
field.*)

ELSE DisplayModel = Model_ID;

FI;

(* Show DisplayModel as HEX field. *)


INPUT EAX = 01H: Returns Additional Information in EBX¶

When CPUID executes with EAX set to 01H, additional information is
returned to the EBX register:

-   Brand index (low byte of EBX) — this number provides an entry into a
    brand string table that contains brand strings for IA-32 processors.
    More information about this field is provided later in this section.
-   CLFLUSH instruction cache line size (second byte of EBX) — this
    number indicates the size of the cache line flushed by the CLFLUSH
    and CLFLUSHOPT instructions in 8-byte increments. This field was
    introduced in the Pentium 4 processor.
-   Local APIC ID (high byte of EBX) — this number is the 8-bit ID that
    is assigned to the local APIC on the processor during power up. This
    field was introduced in the Pentium 4 processor.


INPUT EAX = 01H: Returns Feature Information in ECX and EDX¶

When CPUID executes with EAX set to 01H, feature information is returned
in ECX and EDX.

-   Figure 3-7 and Table 3-10 show encodings for ECX.
-   Figure 3-8 and Table 3-11 show encodings for EDX.

For all feature flags, a 1 indicates that the feature is supported. Use
Intel to properly interpret feature flags.

  Software must confirm that a processor feature is present using
  feature flags returned by CPUID prior to using the feature. Software
  should not depend on future offerings retaining all features.

31302928272625242322212019181716151413121110 9 8 7 6 5 4 3 2 1 0 ECX 0
RDRAND F16C AVX OSXSAVE XSAVE AES TSC-Deadline POPCNT MOVBE x2APIC
SSE4_2 — SSE4.2 SSE4_1 — SSE4.1 DCA — Direct Cache Access PCID —
Process-context Identifiers PDCM — Perf/Debug Capability MSR xTPR Update
Control CMPXCHG16B FMA — Fused Multiply Add SDBG CNXT-ID — L1 Context ID
SSSE3 — SSSE3 Extensions TM2 — Thermal Monitor 2 EIST — Enhanced Intel
SpeedStep® Technology SMX — Safer Mode Extensions VMX — Virtual Machine
Extensions DS-CPL — CPL Qualified Debug Store MONITOR — MONITOR/MWAIT
DTES64 — 64-bit DS Area PCLMULQDQ — Carryless Multiplication SSE3 — SSE3
Extensions OM16524b Reserved

Figure 3-7. Feature Information Returned in the ECX Register

  Bit #   Mnemonic              Description
  ------- --------------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  0       SSE3                  STREAMING SIMD EXTENSIONS 3 (SSE3). A value of 1 indicates the processor supports this technology.
  1       PCLMULQDQ             PCLMULQDQ. A value of 1 indicates the processor supports the PCLMULQDQ instruction.
  2       DTES64                64-BIT DS AREA. A value of 1 indicates the processor supports DS area using 64-bit layout.
  3       MONITOR               MONITOR/MWAIT. A value of 1 indicates the processor supports this feature.
  4       DS-CPL                CPL QUALIFIED DEBUG STORE. A value of 1 indicates the processor supports the extensions to the Debug Store feature to allow for branch message storage qualified by CPL.
  5       VMX                   VIRTUAL MACHINE EXTENSIONS. A value of 1 indicates that the processor supports this technology.
  6       SMX                   SAFER MODE EXTENSIONS. A value of 1 indicates that the processor supports this technology. See Chapter 6, “Safer Mode Extensions Reference”.
  7       EIST                  ENHANCED INTEL SPEEDSTEP® TECHNOLOGY. A value of 1 indicates that the processor supports this technology.
  8       TM2                   THERMAL MONITOR 2. A value of 1 indicates whether the processor supports this technology.
  9       SSSE3                 A value of 1 indicates the presence of the Supplemental Streaming SIMD Extensions 3 (SSSE3). A value of 0 indicates the instruction extensions are not present in the processor.
  10      CNXT-ID               L1 CONTEXT ID. A value of 1 indicates the L1 data cache mode can be set to either adaptive mode or shared mode. A value of 0 indicates this feature is not supported. See definition of the IA32_MISC_ENABLE MSR Bit 24 (L1 Data Cache Context Mode) for details.
  11      SDBG                  A value of 1 indicates the processor supports IA32_DEBUG_INTERFACE MSR for silicon debug.
  12      FMA                   A value of 1 indicates the processor supports FMA extensions using YMM state.
  13      CMPXCHG16B            CMPXCHG16B AVAILABLE. A value of 1 indicates that the feature is available. See the “CMPXCHG8B/CMPXCHG16B—Compare and Exchange Bytes” section in this chapter for a description.
  14      xTPR Update Control   XTPR UPDATE CONTROL. A value of 1 indicates that the processor supports changing IA32_MISC_ENABLE[bit 23].
  15      PDCM                  PERFMON AND DEBUG CAPABILITY: A value of 1 indicates the processor supports the performance and debug feature indication MSR IA32_PERF_CAPABILITIES.
  16      Reserved              Reserved
  17      PCID                  PROCESS-CONTEXT IDENTIFIERS. A value of 1 indicates that the processor supports PCIDs and that software may set CR4.PCIDE to 1.
  18      DCA                   A value of 1 indicates the processor supports the ability to prefetch data from a memory mapped device.
  19      SSE4.1                A value of 1 indicates that the processor supports SSE4.1.
  20      SSE4.2                A value of 1 indicates that the processor supports SSE4.2.
  21      x2APIC                A value of 1 indicates that the processor supports x2APIC feature.
  22      MOVBE                 A value of 1 indicates that the processor supports MOVBE instruction.
  23      POPCNT                A value of 1 indicates that the processor supports the POPCNT instruction.
  24      TSC-Deadline          A value of 1 indicates that the processor’s local APIC timer supports one-shot operation using a TSC deadline value.
  25      AESNI                 A value of 1 indicates that the processor supports the AESNI instruction extensions.
  26      XSAVE                 A value of 1 indicates that the processor supports the XSAVE/XRSTOR processor extended states feature, the XSETBV/XGETBV instructions, and XCR0.
  27      OSXSAVE               A value of 1 indicates that the OS has set CR4.OSXSAVE[bit 18] to enable XSETBV/XGETBV instructions to access XCR0 and to support processor extended state management using XSAVE/XRSTOR.
  28      AVX                   A value of 1 indicates the processor supports the AVX instruction extensions.
  29      F16C                  A value of 1 indicates that processor supports 16-bit floating-point conversion instructions.
  30      RDRAND                A value of 1 indicates that processor supports RDRAND instruction.
  31      Not Used              Always returns 0.

Table 3-10. Feature Information Returned in the ECX Register

EDX PBE–Pend. Brk. EN. TM–Therm. Monitor HTT–Multi-threading SS–Self
Snoop SSE2–SSE2 Extensions SSE–SSE Extensions FXSR–FXSAVE/FXRSTOR
MMX–MMX Technology ACPI–Thermal Monitor and Clock Ctrl DS–Debug Store
CLFSH–CLFLUSH instruction PSN–Processor Serial Number PSE-36 – Page Size
Extension PAT–Page Attribute Table CMOV–Conditional Move/Compare
Instruction MCA–Machine Check Architecture PGE–PTE Global Bit
MTRR–Memory Type Range Registers SEP–SYSENTER and SYSEXIT APIC–APIC on
Chip CX8–CMPXCHG8B Inst. MCE–Machine Check Exception PAE–Physical
Address Extensions MSR–RDMSR and WRMSR Support TSC–Time Stamp Counter
PSE–Page Size Extensions DE–Debugging Extensions VME–Virtual-8086 Mode
Enhancement FPU–x87 FPU on Chip Reserved

Figure 3-8. Feature Information Returned in the EDX Register

  Bit #   Mnemonic   Description
  ------- ---------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  0       FPU        FLOATING POINT UNIT ON-CHIP. The processor contains an x87 FPU.
  1       VME        VIRTUAL 8086 MODE ENHANCEMENTS. Virtual 8086 mode enhancements, including CR4.VME for controlling the feature, CR4.PVI for protected mode virtual interrupts, software interrupt indirection, expansion of the TSS with the software indirection bitmap, and EFLAGS.VIF and EFLAGS.VIP flags.
  2       DE         DEBUGGING EXTENSIONS. Support for I/O breakpoints, including CR4.DE for controlling the feature, and optional trapping of accesses to DR4 and DR5.
  3       PSE        PAGE SIZE EXTENSION. Large pages of size 4 MByte are supported, including CR4.PSE for controlling the feature, the defined dirty bit in PDE (Page Directory Entries), optional reserved bit trapping in CR3, PDEs, and PTEs.
  4       TSC        TIME STAMP COUNTER. The RDTSC instruction is supported, including CR4.TSD for controlling privilege.
  5       MSR        MODEL SPECIFIC REGISTERS RDMSR AND WRMSR INSTRUCTIONS. The RDMSR and WRMSR instructions are supported. Some of the MSRs are implementation dependent.
  6       PAE        PHYSICAL ADDRESS EXTENSION. Physical addresses greater than 32 bits are supported: extended page table entry formats, an extra level in the page translation tables is defined, 2-MByte pages are supported instead of 4 Mbyte pages if PAE bit is 1.
  7       MCE        MACHINE CHECK EXCEPTION. Exception 18 is defined for Machine Checks, including CR4.MCE for controlling the feature. This feature does not define the model-specific implementations of machine-check error logging, reporting, and processor shutdowns. Machine Check exception handlers may have to depend on processor version to do model specific processing of the exception, or test for the presence of the Machine Check feature.
  8       CX8        CMPXCHG8B INSTRUCTION. The compare-and-exchange 8 bytes (64 bits) instruction is supported (implicitly locked and atomic).
  9       APIC       APIC ON-CHIP. The processor contains an Advanced Programmable Interrupt Controller (APIC), responding to memory mapped commands in the physical address range FFFE0000H to FFFE0FFFH (by default - some processors permit the APIC to be relocated).
  10      Reserved   Reserved
  11      SEP        SYSENTER AND SYSEXIT INSTRUCTIONS. The SYSENTER and SYSEXIT and associated MSRs are supported.
  12      MTRR       MEMORY TYPE RANGE REGISTERS. MTRRs are supported. The MTRRcap MSR contains feature bits that describe what memory types are supported, how many variable MTRRs are supported, and whether fixed MTRRs are supported.
  13      PGE        PAGE GLOBAL BIT. The global bit is supported in paging-structure entries that map a page, indicating TLB entries that are common to different processes and need not be flushed. The CR4.PGE bit controls this feature.
  14      MCA        MACHINE CHECK ARCHITECTURE. A value of 1 indicates the Machine Check Architecture of reporting machine errors is supported. The MCG_CAP MSR contains feature bits describing how many banks of error reporting MSRs are supported.
  15      CMOV       CONDITIONAL MOVE INSTRUCTIONS. The conditional move instruction CMOV is supported. In addition, if x87 FPU is present as indicated by the CPUID.FPU feature bit, then the FCOMI and FCMOV instructions are supported
  16      PAT        PAGE ATTRIBUTE TABLE. Page Attribute Table is supported. This feature augments the Memory Type Range Registers (MTRRs), allowing an operating system to specify attributes of memory accessed through a linear address on a 4KB granularity.
  17      PSE-36     36-BIT PAGE SIZE EXTENSION. 4-MByte pages addressing physical memory beyond 4 GBytes are supported with 32-bit paging. This feature indicates that upper bits of the physical address of a 4-MByte page are encoded in bits 20:13 of the page-directory entry. Such physical addresses are limited by MAXPHYADDR and may be up to 40 bits in size.
  18      PSN        PROCESSOR SERIAL NUMBER. The processor supports the 96-bit processor identification number feature and the feature is enabled.
  19      CLFSH      CLFLUSH INSTRUCTION. CLFLUSH Instruction is supported.
  20      Reserved   Reserved
  21      DS         DEBUG STORE. The processor supports the ability to write debug information into a memory resident buffer. This feature is used by the branch trace store (BTS) and processor event-based sampling (PEBS) facilities (see Chapter 23, “Introduction to Virtual-Machine Extensions,” in the _Intel® 64 and IA-32 Architectures Software Developer’s Manual, Volume 3C_).
  22      ACPI       THERMAL MONITOR AND SOFTWARE CONTROLLED CLOCK FACILITIES. The processor implements internal MSRs that allow processor temperature to be monitored and processor performance to be modulated in predefined duty cycles under software control.
  23      MMX        INTEL MMX TECHNOLOGY. The processor supports the Intel MMX technology.
  24      FXSR       FXSAVE AND FXRSTOR INSTRUCTIONS. The FXSAVE and FXRSTOR instructions are supported for fast save and restore of the floating point context. Presence of this bit also indicates that CR4.OSFXSR is available for an operating system to indicate that it supports the FXSAVE and FXRSTOR instructions.
  25      SSE        SSE. The processor supports the SSE extensions.
  26      SSE2       SSE2. The processor supports the SSE2 extensions.
  27      SS         SELF SNOOP. The processor supports the management of conflicting memory types by performing a snoop of its own cache structure for transactions issued to the bus.
  28      HTT        MAX APIC IDS RESERVED FIELD IS VALID. A value of 0 for HTT indicates there is only a single logical processor in the package and software should assume only a single APIC ID is reserved. A value of 1 for HTT indicates the value in CPUID.1.EBX[23:16] (the Maximum number of addressable IDs for logical processors in this package) is valid for the package.
  29      TM         THERMAL MONITOR. The processor implements the thermal monitor automatic thermal control circuitry (TCC).
  30      Reserved   Reserved
  31      PBE        PENDING BREAK ENABLE. The processor supports the use of the FERR#/PBE# pin when the processor is in the stop-clock state (STPCLK# is asserted) to signal the processor that an interrupt is pending and that the processor should return to normal operation to handle the interrupt. Bit 10 (PBE enable) in the IA32_MISC_ENABLE MSR enables this capability.

Table 3-11. More on Feature Information Returned in the EDX Register


INPUT EAX = 02H: TLB/Cache/Prefetch Information Returned in EAX, EBX, ECX, EDX¶

When CPUID executes with EAX set to 02H, the processor returns
information about the processor’s internal TLBs, cache and prefetch
hardware in the EAX, EBX, ECX, and EDX registers. The information is
reported in encoded form and fall into the following categories:

-   The least-significant byte in register EAX (register AL) will always
    return 01H. Software should ignore this value and not interpret it
    as an informational descriptor.
-   The most significant bit (bit 31) of each register indicates whether
    the register contains valid information (set to 0) or is reserved
    (set to 1).
-   If a register contains valid information, the information is
    contained in 1 byte descriptors. There are four types of encoding
    values for the byte descriptor, the encoding type is noted in the
    second column of Table 3-12. Table 3-12 lists the encoding of these
    descriptors. Note that the order of descriptors in the EAX, EBX,
    ECX, and EDX registers is not defined; that is, specific bytes are
    not designated to contain descriptors for specific cache, prefetch,
    or TLB types. The descriptors may appear in any order. Note also a
    processor may report a general descriptor type (FFH) and not report
    any byte descriptor of “cache type” via CPUID leaf 2.

  Value   Type      Description
  ------- --------- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  00H     General   Null descriptor, this byte contains no information
  01H     TLB       Instruction TLB: 4 KByte pages, 4-way set associative, 32 entries
  02H     TLB       Instruction TLB: 4 MByte pages, fully associative, 2 entries
  03H     TLB       Data TLB: 4 KByte pages, 4-way set associative, 64 entries
  04H     TLB       Data TLB: 4 MByte pages, 4-way set associative, 8 entries
  05H     TLB       Data TLB1: 4 MByte pages, 4-way set associative, 32 entries
  06H     Cache     1st-level instruction cache: 8 KBytes, 4-way set associative, 32 byte line size
  08H     Cache     1st-level instruction cache: 16 KBytes, 4-way set associative, 32 byte line size
  09H     Cache     1st-level instruction cache: 32KBytes, 4-way set associative, 64 byte line size
  0AH     Cache     1st-level data cache: 8 KBytes, 2-way set associative, 32 byte line size
  0BH     TLB       Instruction TLB: 4 MByte pages, 4-way set associative, 4 entries
  0CH     Cache     1st-level data cache: 16 KBytes, 4-way set associative, 32 byte line size
  0DH     Cache     1st-level data cache: 16 KBytes, 4-way set associative, 64 byte line size
  0EH     Cache     1st-level data cache: 24 KBytes, 6-way set associative, 64 byte line size
  1DH     Cache     2nd-level cache: 128 KBytes, 2-way set associative, 64 byte line size
  21H     Cache     2nd-level cache: 256 KBytes, 8-way set associative, 64 byte line size
  22H     Cache     3rd-level cache: 512 KBytes, 4-way set associative, 64 byte line size, 2 lines per sector
  23H     Cache     3rd-level cache: 1 MBytes, 8-way set associative, 64 byte line size, 2 lines per sector
  24H     Cache     2nd-level cache: 1 MBytes, 16-way set associative, 64 byte line size
  25H     Cache     3rd-level cache: 2 MBytes, 8-way set associative, 64 byte line size, 2 lines per sector
  29H     Cache     3rd-level cache: 4 MBytes, 8-way set associative, 64 byte line size, 2 lines per sector
  2CH     Cache     1st-level data cache: 32 KBytes, 8-way set associative, 64 byte line size
  30H     Cache     1st-level instruction cache: 32 KBytes, 8-way set associative, 64 byte line size
  40H     Cache     No 2nd-level cache or, if processor contains a valid 2nd-level cache, no 3rd-level cache
  41H     Cache     2nd-level cache: 128 KBytes, 4-way set associative, 32 byte line size
  42H     Cache     2nd-level cache: 256 KBytes, 4-way set associative, 32 byte line size
  43H     Cache     2nd-level cache: 512 KBytes, 4-way set associative, 32 byte line size
  44H     Cache     2nd-level cache: 1 MByte, 4-way set associative, 32 byte line size
  45H     Cache     2nd-level cache: 2 MByte, 4-way set associative, 32 byte line size
  46H     Cache     3rd-level cache: 4 MByte, 4-way set associative, 64 byte line size
  47H     Cache     3rd-level cache: 8 MByte, 8-way set associative, 64 byte line size
  48H     Cache     2nd-level cache: 3MByte, 12-way set associative, 64 byte line size
  49H     Cache     3rd-level cache: 4MB, 16-way set associative, 64-byte line size (Intel Xeon processor MP, Family 0FH, Model 06H); 2nd-level cache: 4 MByte, 16-way set associative, 64 byte line size
  4AH     Cache     3rd-level cache: 6MByte, 12-way set associative, 64 byte line size
  4BH     Cache     3rd-level cache: 8MByte, 16-way set associative, 64 byte line size
  4CH     Cache     3rd-level cache: 12MByte, 12-way set associative, 64 byte line size
  4DH     Cache     3rd-level cache: 16MByte, 16-way set associative, 64 byte line size
  4EH     Cache     2nd-level cache: 6MByte, 24-way set associative, 64 byte line size
  4FH     TLB       Instruction TLB: 4 KByte pages, 32 entries
  50H     TLB       Instruction TLB: 4 KByte and 2-MByte or 4-MByte pages, 64 entries
  51H     TLB       Instruction TLB: 4 KByte and 2-MByte or 4-MByte pages, 128 entries
  52H     TLB       Instruction TLB: 4 KByte and 2-MByte or 4-MByte pages, 256 entries
  55H     TLB       Instruction TLB: 2-MByte or 4-MByte pages, fully associative, 7 entries
  56H     TLB       Data TLB0: 4 MByte pages, 4-way set associative, 16 entries
  57H     TLB       Data TLB0: 4 KByte pages, 4-way associative, 16 entries
  59H     TLB       Data TLB0: 4 KByte pages, fully associative, 16 entries
  5AH     TLB       Data TLB0: 2 MByte or 4 MByte pages, 4-way set associative, 32 entries
  5BH     TLB       Data TLB: 4 KByte and 4 MByte pages, 64 entries
  5CH     TLB       Data TLB: 4 KByte and 4 MByte pages,128 entries
  5DH     TLB       Data TLB: 4 KByte and 4 MByte pages,256 entries
  60H     Cache     1st-level data cache: 16 KByte, 8-way set associative, 64 byte line size
  61H     TLB       Instruction TLB: 4 KByte pages, fully associative, 48 entries
  63H     TLB       Data TLB: 2 MByte or 4 MByte pages, 4-way set associative, 32 entries and a separate array with 1 GByte pages, 4-way set associative, 4 entries
  64H     TLB       Data TLB: 4 KByte pages, 4-way set associative, 512 entries
  66H     Cache     1st-level data cache: 8 KByte, 4-way set associative, 64 byte line size
  67H     Cache     1st-level data cache: 16 KByte, 4-way set associative, 64 byte line size
  68H     Cache     1st-level data cache: 32 KByte, 4-way set associative, 64 byte line size
  6AH     Cache     uTLB: 4 KByte pages, 8-way set associative, 64 entries
  6BH     Cache     DTLB: 4 KByte pages, 8-way set associative, 256 entries
  6CH     Cache     DTLB: 2M/4M pages, 8-way set associative, 128 entries
  6DH     Cache     DTLB: 1 GByte pages, fully associative, 16 entries
  70H     Cache     Trace cache: 12 K-μop, 8-way set associative
  71H     Cache     Trace cache: 16 K-μop, 8-way set associative
  72H     Cache     Trace cache: 32 K-μop, 8-way set associative
  76H     TLB       Instruction TLB: 2M/4M pages, fully associative, 8 entries
  78H     Cache     2nd-level cache: 1 MByte, 4-way set associative, 64byte line size
  79H     Cache     2nd-level cache: 128 KByte, 8-way set associative, 64 byte line size, 2 lines per sector
  7AH     Cache     2nd-level cache: 256 KByte, 8-way set associative, 64 byte line size, 2 lines per sector
  7BH     Cache     2nd-level cache: 512 KByte, 8-way set associative, 64 byte line size, 2 lines per sector
  7CH     Cache     2nd-level cache: 1 MByte, 8-way set associative, 64 byte line size, 2 lines per sector
  7DH     Cache     2nd-level cache: 2 MByte, 8-way set associative, 64byte line size
  7FH     Cache     2nd-level cache: 512 KByte, 2-way set associative, 64-byte line size
  80H     Cache     2nd-level cache: 512 KByte, 8-way set associative, 64-byte line size
  82H     Cache     2nd-level cache: 256 KByte, 8-way set associative, 32 byte line size
  83H     Cache     2nd-level cache: 512 KByte, 8-way set associative, 32 byte line size
  84H     Cache     2nd-level cache: 1 MByte, 8-way set associative, 32 byte line size
  85H     Cache     2nd-level cache: 2 MByte, 8-way set associative, 32 byte line size
  86H     Cache     2nd-level cache: 512 KByte, 4-way set associative, 64 byte line size
  87H     Cache     2nd-level cache: 1 MByte, 8-way set associative, 64 byte line size

Table 3-12. Encoding of CPUID Leaf 2 Descriptors

  ------- ---------- ------------------------------------------------------------------------------------------------------------------------------------
  VALUE   TYPE       DESCRIPTION
  A0H     DTLB       DTLB: 4k pages, fully associative, 32 entries
  B0H     TLB        Instruction TLB: 4 KByte pages, 4-way set associative, 128 entries
  B1H     TLB        Instruction TLB: 2M pages, 4-way, 8 entries or 4M pages, 4-way, 4 entries
  B2H     TLB        Instruction TLB: 4KByte pages, 4-way set associative, 64 entries
  B3H     TLB        Data TLB: 4 KByte pages, 4-way set associative, 128 entries
  B4H     TLB        Data TLB1: 4 KByte pages, 4-way associative, 256 entries
  B5H     TLB        Instruction TLB: 4KByte pages, 8-way set associative, 64 entries
  B6H     TLB        Instruction TLB: 4KByte pages, 8-way set associative, 128 entries
  BAH     TLB        Data TLB1: 4 KByte pages, 4-way associative, 64 entries
  C0H     TLB        Data TLB: 4 KByte and 4 MByte pages, 4-way associative, 8 entries
  C1H     STLB       Shared 2nd-Level TLB: 4 KByte/2MByte pages, 8-way associative, 1024 entries
  C2H     DTLB       DTLB: 4 KByte/2 MByte pages, 4-way associative, 16 entries
  C3H     STLB       Shared 2nd-Level TLB: 4 KByte /2 MByte pages, 6-way associative, 1536 entries. Also 1GBbyte pages, 4-way, 16 entries.
  C4H     DTLB       DTLB: 2M/4M Byte pages, 4-way associative, 32 entries
  CAH     STLB       Shared 2nd-Level TLB: 4 KByte pages, 4-way associative, 512 entries
  D0H     Cache      3rd-level cache: 512 KByte, 4-way set associative, 64 byte line size
  D1H     Cache      3rd-level cache: 1 MByte, 4-way set associative, 64 byte line size
  D2H     Cache      3rd-level cache: 2 MByte, 4-way set associative, 64 byte line size
  D6H     Cache      3rd-level cache: 1 MByte, 8-way set associative, 64 byte line size
  D7H     Cache      3rd-level cache: 2 MByte, 8-way set associative, 64 byte line size
  D8H     Cache      3rd-level cache: 4 MByte, 8-way set associative, 64 byte line size
  DCH     Cache      3rd-level cache: 1.5 MByte, 12-way set associative, 64 byte line size
  DDH     Cache      3rd-level cache: 3 MByte, 12-way set associative, 64 byte line size
  DEH     Cache      3rd-level cache: 6 MByte, 12-way set associative, 64 byte line size
  E2H     Cache      3rd-level cache: 2 MByte, 16-way set associative, 64 byte line size
  E3H     Cache      3rd-level cache: 4 MByte, 16-way set associative, 64 byte line size
  E4H     Cache      3rd-level cache: 8 MByte, 16-way set associative, 64 byte line size
  EAH     Cache      3rd-level cache: 12MByte, 24-way set associative, 64 byte line size
  EBH     Cache      3rd-level cache: 18MByte, 24-way set associative, 64 byte line size
  ECH     Cache      3rd-level cache: 24MByte, 24-way set associative, 64 byte line size
  F0H     Prefetch   64-Byte prefetching
  F1H     Prefetch   128-Byte prefetching
  FEH     General    CPUID leaf 2 does not report TLB descriptor information; use CPUID leaf 18H to query TLB and other address translation parameters.
  FFH     General    CPUID leaf 2 does not report cache descriptor information, use CPUID leaf 4 to query cache parameters
  ------- ---------- ------------------------------------------------------------------------------------------------------------------------------------

Table 3-12. Encoding of CPUID Leaf 2 Descriptors (Contd.)


Example 3-1. Example of Cache and TLB Interpretation¶

The first member of the family of Pentium 4 processors returns the
following information about caches and TLBs when the CPUID executes with
an input value of 2:

EAX 66 5B 50 01H EBX 0H ECX 0H EDX 00 7A 70 00H

Which means:

-   The least-significant byte (byte 0) of register EAX is set to 01H.
    This value should be ignored.
-   The most-significant bit of all four registers (EAX, EBX, ECX, and
    EDX) is set to 0, indicating that each register contains valid
    1-byte descriptors.
-   Bytes 1, 2, and 3 of register EAX indicate that the processor has:
    -   50H - a 64-entry instruction TLB, for mapping 4-KByte and
        2-MByte or 4-MByte pages.
    -   50H - a 64-entry instruction TLB, for mapping 4-KByte and
        2-MByte or 4-MByte pages.
    -   5BH - a 64-entry data TLB, for mapping 4-KByte and 4-MByte
        pages.
    -   5BH - a 64-entry data TLB, for mapping 4-KByte and 4-MByte
        pages.
    -   66H - an 8-KByte 1st level data cache, 4-way set associative,
        with a 64-Byte cache line size.
    -   66H - an 8-KByte 1st level data cache, 4-way set associative,
        with a 64-Byte cache line size.
-   The descriptors in registers EBX and ECX are valid, but contain NULL
    descriptors.
-   Bytes 0, 1, 2, and 3 of register EDX indicate that the processor
    has:
    -   00H - NULL descriptor.
    -   00H - NULL descriptor.
    -   70H - Trace cache: 12 K-μop, 8-way set associative.
    -   70H - Trace cache: 12 K-μop, 8-way set associative.
    -   7AH - a 256-KByte 2nd level cache, 8-way set associative, with a
        sectored, 64-byte cache line size.
    -   7AH - a 256-KByte 2nd level cache, 8-way set associative, with a
        sectored, 64-byte cache line size.
    -   00H - NULL descriptor.
    -   00H - NULL descriptor.


INPUT EAX = 04H: Returns Deterministic Cache Parameters for Each Level¶

When CPUID executes with EAX set to 04H and ECX contains an index value,
the processor returns encoded data that describe a set of deterministic
cache parameters (for the cache level associated with the input in ECX).
Valid index values start from 0.

Software can enumerate the deterministic cache parameters for each level
of the cache hierarchy starting with an index value of 0, until the
parameters report the value associated with the cache type field is 0.
The architecturally defined fields reported by deterministic cache
parameters are documented in Table 3-8.

This Cache Size in Bytes

= (Ways + 1) * (Partitions + 1) * (Line_Size + 1) * (Sets + 1)

= (EBX[31:22] + 1) * (EBX[21:12] + 1) * (EBX[11:0] + 1) * (ECX + 1)

The CPUID leaf 04H also reports data that can be used to derive the
topology of processor cores in a physical package. This information is
constant for all valid index values. Software can query the raw data
reported by executing CPUID with EAX=04H and ECX=0 and use it as part of
the topology enumeration algorithm described in Chapter 8,
“Multiple-Processor Management,” in the _Intel® 64 and IA-32
Architectures Software Developer’s Manual, Volume 3A_.


INPUT EAX = 05H: Returns MONITOR and MWAIT Features¶

When CPUID executes with EAX set to 05H, the processor returns
information about features available to MONITOR/MWAIT instructions. The
MONITOR instruction is used for address-range monitoring in conjunction
with MWAIT instruction. The MWAIT instruction optionally provides
additional extensions for advanced power management. See Table 3-8.


INPUT EAX = 06H: Returns Thermal and Power Management Features¶

When CPUID executes with EAX set to 06H, the processor returns
information about thermal and power management features. See Table 3-8.


INPUT EAX = 07H: Returns Structured Extended Feature Enumeration Information¶

When CPUID executes with EAX set to 07H and ECX = 0, the processor
returns information about the maximum input value for sub-leaves that
contain extended feature flags. See Table 3-8.

When CPUID executes with EAX set to 07H and the input value of ECX is
invalid (see leaf 07H entry in Table 3-8), the processor returns 0 in
EAX/EBX/ECX/EDX. In subleaf 0, EAX returns the maximum input value of
the highest leaf 7 sub-leaf, and EBX, ECX & EDX contain information of
extended feature flags.


INPUT EAX = 09H: Returns Direct Cache Access Information¶

When CPUID executes with EAX set to 09H, the processor returns
information about Direct Cache Access capabilities. See Table 3-8.


INPUT EAX = 0AH: Returns Architectural Performance Monitoring Features¶

When CPUID executes with EAX set to 0AH, the processor returns
information about support for architectural performance monitoring
capabilities. Architectural performance monitoring is supported if the
version ID (see Table 3-8) is greater than Pn 0. See Table 3-8.

For each version of architectural performance monitoring capability,
software must enumerate this leaf to discover the programming facilities
and the architectural performance events available in the processor. The
details are described in Chapter 23, “Introduction to Virtual-Machine
Extensions,” in the _Intel® 64 and IA-32 Architectures Software
Developer’s Manual, Volume 3C_.


INPUT EAX = 0BH: Returns Extended Topology Information¶

When CPUID executes with EAX set to 0BH, the processor returns
information about extended topology enumeration data. Software must
detect the presence of CPUID leaf 0BH by verifying (a) the highest leaf
index supported by CPUID is >= 0BH, and (b) CPUID.0BH:EBX[15:0] reports
a non-zero value. See Table 3-8.


INPUT EAX = 0DH: Returns Processor Extended States Enumeration Information¶

When CPUID executes with EAX set to 0DH and ECX = 0, the processor
returns information about the bit-vector representation of all processor
state extensions that are supported in the processor and storage size
requirements of the XSAVE/XRSTOR area. See Table 3-8.

When CPUID executes with EAX set to 0DH and ECX = n (n > 1, and is a
valid sub-leaf index), the processor returns information about the size
and offset of each processor extended state save area within the
XSAVE/XRSTOR area. See Table 3-8. Software can use the
forward-extendable technique depicted below to query the valid
sub-leaves and obtain size and offset information for each processor
extended state save area:

For i = 2 to 62 // sub-leaf 1 is reserved IF (CPUID.(EAX=0DH,
ECX=0):VECTOR[i] = 1 ) // VECTOR is the 64-bit value of EDX:EAX Execute
CPUID.(EAX=0DH, ECX = i) to examine size and offset for sub-leaf i; FI;


INPUT EAX = 0FH: Returns Intel Resource Director Technology (Intel RDT) Monitoring Enumeration Information¶

When CPUID executes with EAX set to 0FH and ECX = 0, the processor
returns information about the bit-vector representation of QoS
monitoring resource types that are supported in the processor and
maximum range of RMID values the processor can use to monitor of any
supported resource types. Each bit, starting from bit 1, corresponds to
a specific resource type if the bit is set. The bit position corresponds
to the sub-leaf index (or ResID) that software must use to query QoS
monitoring capability available for that type. See Table 3-8.

When CPUID executes with EAX set to 0FH and ECX = n (n >= 1, and is a
valid ResID), the processor returns information software can use to
program IA32_PQR_ASSOC, IA32_QM_EVTSEL MSRs before reading QoS data from
the IA32_QM_CTR MSR.


INPUT EAX = 10H: Returns Intel Resource Director Technology (Intel RDT) Allocation Enumeration Information¶

When CPUID executes with EAX set to 10H and ECX = 0, the processor
returns information about the bit-vector representation of QoS
Enforcement resource types that are supported in the processor. Each
bit, starting from bit

1, corresponds to a specific resource type if the bit is set. The bit
position corresponds to the sub-leaf index (or ResID) that software must
use to query QoS enforcement capability available for that type. See
Table 3-8.

When CPUID executes with EAX set to 10H and ECX = n (n >= 1, and is a
valid ResID), the processor returns information about available classes
of service and range of QoS mask MSRs that software can use to configure
each class of services using capability bit masks in the QoS Mask
registers, IA32_resourceType_Mask_n.


INPUT EAX = 12H: Returns Intel SGX Enumeration Information¶

When CPUID executes with EAX set to 12H and ECX = 0H, the processor
returns information about Intel SGX capabilities. See Table 3-8.

When CPUID executes with EAX set to 12H and ECX = 1H, the processor
returns information about Intel SGX attributes. See Table 3-8.

When CPUID executes with EAX set to 12H and ECX = n (n > 1), the
processor returns information about Intel SGX Enclave Page Cache. See
Table 3-8.


INPUT EAX = 14H: Returns Intel Processor Trace Enumeration Information¶

When CPUID executes with EAX set to 14H and ECX = 0H, the processor
returns information about Intel Processor Trace extensions. See Table
3-8.

When CPUID executes with EAX set to 14H and ECX = n (n > 0 and less than
the number of non-zero bits in CPUID.(EAX=14H, ECX= 0H).EAX), the
processor returns information about packet generation in Intel Processor
Trace. See Table 3-8.


INPUT EAX = 15H: Returns Time Stamp Counter and Nominal Core Crystal Clock Information¶

When CPUID executes with EAX set to 15H and ECX = 0H, the processor
returns information about Time Stamp Counter and Core Crystal Clock. See
Table 3-8.


INPUT EAX = 16H: Returns Processor Frequency Information¶

When CPUID executes with EAX set to 16H, the processor returns
information about Processor Frequency Information. See Table 3-8.


INPUT EAX = 17H: Returns System-On-Chip Information¶

When CPUID executes with EAX set to 17H, the processor returns
information about the System-On-Chip Vendor Attribute Enumeration. See
Table 3-8.


INPUT EAX = 18H: Returns Deterministic Address Translation Parameters Information¶

When CPUID executes with EAX set to 18H, the processor returns
information about the Deterministic Address Translation Parameters. See
Table 3-8.


METHODS FOR RETURNING BRANDING INFORMATION¶

Use the following techniques to access branding information:

1. Processor brand string method.

2. Processor brand index; this method uses a software supplied brand
string table.

These two methods are discussed in the following sections. For methods
that are available in early processors, see Section: “Identification of
Earlier IA-32 Processors” in Chapter 19 of the _Intel® 64 and IA-32
Architectures Software Developer’s Manual, Volume 1_.


The Processor Brand String Method¶

Figure 3-9 describes the algorithm used for detection of the brand
string. Processor brand identification software should execute this
algorithm on all Intel 64 and IA-32 processors.

This method (introduced with Pentium 4 processors) returns an ASCII
brand identification string and the Processor Base frequency of the
processor to the EAX, EBX, ECX, and EDX registers.

Input: EAX= 0x80000000 CPUID Processor Brand False IF (EAX & 0x80000000)
String Not Supported CPUID True≥ Function Extended Supported EAX Return
Value = Max. Extended CPUID Function Index True Processor Brand IF (EAX
Return Value String Supported ≥ 0x80000004)

Figure 3-9. Determination of Support for the Processor Brand String


How Brand Strings Work¶

To use the brand string method, execute CPUID with EAX input of 8000002H
through 80000004H. For each input value, CPUID returns 16 ASCII
characters using EAX, EBX, ECX, and EDX. The returned string will be
NULL-terminated.

Table 3-13 shows the brand string that is returned by the first
processor in the Pentium 4 processor family.

  EAX Input Value   Return Values                                                     ASCII Equivalent
  ----------------- ----------------------------------------------------------------- ------------------------------
  80000002H         EAX = 20202020H EBX = 20202020H ECX = 20202020H EDX = 6E492020H   “” “” “” “nI ”
  80000003H         EAX = 286C6574H EBX = 50202952H ECX = 69746E65H EDX = 52286D75H   “(let” “P )R” “itne” “R(mu”
  80000004H         EAX = 20342029H EBX = 20555043H ECX = 30303531H EDX = 007A484DH   “ 4 )” “ UPC” “0051” “\0zHM”

Table 3-13. Processor Brand String Returned with Pentium 4 Processor


Extracting the Processor Frequency from Brand Strings¶

Figure 3-10 provides an algorithm which software can use to extract the
Processor Base frequency from the processor brand string.

Scan "Brand String" in Reverse Byte Order "zHM", or Match "zHG", or
Substring "zHT" False IF Substring Matched Report Error Determine "Freq"
True If "zHM" Multiplier = 1 x 106 and "Multiplier" If "zHG" Multiplier
= 1 x 109 Determine "Multiplier" If "zHT" Multiplier = 1 x 1012 Scan
Digits Until Blank Reverse Digits To Decimal Value In Reverse Order
Frequency = "Freq" x "Multiplier" Digits = "ZY.X"

Figure 3-10. Algorithm for Extracting Processor Frequency


The Processor Brand Index Method¶

The brand index method (introduced with Pentium^(®) III Xeon^(®)
processors) provides an entry point into a brand identification table
that is maintained in memory by system software and is accessible from
system- and user-level code. In this table, each brand index is
associate with an ASCII brand identification string that identifies the
official Intel family and model number of a processor.

When CPUID executes with EAX set to 1, the processor returns a brand
index to the low byte in EBX. Software can then use this index to locate
the brand identification string for the processor in the brand
identification table. The first entry (brand index 0) in this table is
reserved, allowing for backward compatibility with processors that do
not support the brand identification feature. Starting with processor
signature family ID = 0FH, model = 03H, brand index method is no longer
supported. Use brand string method instead.

Table 3-14 shows brand indices that have identification strings
associated with them.

  Brand Index   Brand String
  ------------- -------------------------------------------------------------------------------------------------------------------
  00H           This processor does not support the brand identification feature
  01H           Intel(R) Celeron(R) processor¹
  02H           Intel(R) Pentium(R) III processor¹
  03H           Intel(R) Pentium(R) III Xeon(R) processor; If processor signature = 000006B1h, then Intel(R) Celeron(R) processor
  04H           Intel(R) Pentium(R) III processor
  06H           Mobile Intel(R) Pentium(R) III processor-M
  07H           Mobile Intel(R) Celeron(R) processor¹
  08H           Intel(R) Pentium(R) 4 processor
  09H           Intel(R) Pentium(R) 4 processor
  0AH           Intel(R) Celeron(R) processor¹
  0BH           Intel(R) Xeon(R) processor; If processor signature = 00000F13h, then Intel(R) Xeon(R) processor MP
  0CH           Intel(R) Xeon(R) processor MP
  0EH           Mobile Intel(R) Pentium(R) 4 processor-M; If processor signature = 00000F13h, then Intel(R) Xeon(R) processor
  0FH           Mobile Intel(R) Celeron(R) processor¹
  11H           Mobile Genuine Intel(R) processor
  12H           Intel(R) Celeron(R) M processor
  13H           Mobile Intel(R) Celeron(R) processor¹
  14H           Intel(R) Celeron(R) processor
  15H           Mobile Genuine Intel(R) processor
  16H           Intel(R) Pentium(R) M processor
  17H           Mobile Intel(R) Celeron(R) processor¹
  18H – 0FFH    RESERVED

Table 3-14. Mapping of Brand Indices; and Intel 64 and IA-32 Processor
Brand Strings

NOTES:

1. Indicates versions of these processors that were introduced after the
Pentium III


IA-32 Architecture Compatibility¶

CPUID is not supported in early models of the Intel486 processor or in
any IA-32 processor earlier than the Intel486 processor.


Operation¶

    IA32_BIOS_SIGN_ID MSR ← Update with installed microcode revision number;
    CASE (EAX) OF
        EAX = 0:
            EAX ← Highest basic function input value understood by CPUID;
            EBX ← Vendor identification string;
            EDX ← Vendor identification string;
            ECX ← Vendor identification string;
        BREAK;
        EAX = 1H:
            EAX[3:0] ← Stepping ID;
            EAX[7:4] ← Model;
            EAX[11:8] ← Family;
            EAX[13:12] ← Processor type;
            EAX[15:14] ← Reserved;
            EAX[19:16] ← Extended Model;
            EAX[27:20] ← Extended Family;
            EAX[31:28] ← Reserved;
            EBX[7:0] ← Brand Index; (* Reserved if the value is zero. *)
            EBX[15:8] ← CLFLUSH Line Size;
            EBX[16:23] ← Reserved; (* Number of threads enabled = 2 if MT enable fuse set. *)
            EBX[24:31] ← Initial APIC ID;
            ECX ← Feature flags; (* See Figure 3-7. *)
            EDX ← Feature flags; (* See Figure 3-8. *)
        BREAK;
        EAX = 2H:
            EAX ← Cache and TLB information;
            EBX ← Cache and TLB information;
            ECX ← Cache and TLB information;
            EDX ← Cache and TLB information;
        BREAK;
        EAX = 3H:
            EAX ← Reserved;
            EBX ← Reserved;
            ECX ← ProcessorSerialNumber[31:0];
            (* Pentium III processors only, otherwise reserved. *)
            EDX ← ProcessorSerialNumber[63:32];
            (* Pentium III processors only, otherwise reserved. *
        BREAK
        EAX = 4H:
            EAX ← Deterministic Cache Parameters Leaf; (* See Table 3-8. *)
            EBX ← Deterministic Cache Parameters Leaf;
            ECX ← Deterministic Cache Parameters Leaf;
            EDX ← Deterministic Cache Parameters Leaf;
        BREAK;
        EAX = 5H:
            EAX ← MONITOR/MWAIT Leaf; (* See Table 3-8. *)
            EBX ← MONITOR/MWAIT Leaf;
            ECX ← MONITOR/MWAIT Leaf;
            EDX ← MONITOR/MWAIT Leaf;
        BREAK;
        EAX = 6H:
            EAX ← Thermal and Power Management Leaf; (* See Table 3-8. *)
            EBX ← Thermal and Power Management Leaf;
            ECX ← Thermal and Power Management Leaf;
            EDX ← Thermal and Power Management Leaf;
        BREAK;
        EAX = 7H:
            EAX ← Structured Extended Feature Flags Enumeration Leaf; (* See Table 3-8. *)
            EBX ← Structured Extended Feature Flags Enumeration Leaf;
            ECX ← Structured Extended Feature Flags Enumeration Leaf;
            EDX ← Structured Extended Feature Flags Enumeration Leaf;
        BREAK;
        EAX = 8H:
            EAX ← Reserved = 0;
            EBX ← Reserved = 0;
            ECX ← Reserved = 0;
            EDX ← Reserved = 0;
        BREAK;
        EAX = 9H:
            EAX ← Direct Cache Access Information Leaf; (* See Table 3-8. *)
            EBX ← Direct Cache Access Information Leaf;
            ECX ← Direct Cache Access Information Leaf;
            EDX ← Direct Cache Access Information Leaf;
        BREAK;
        EAX = AH:
            EAX ← Architectural Performance Monitoring Leaf; (* See Table 3-8. *)
            EBX ← Architectural Performance Monitoring Leaf;
            ECX ← Architectural Performance Monitoring Leaf;
            EDX ← Architectural Performance Monitoring Leaf;
            BREAK
        EAX = BH:
            EAX ← Extended Topology Enumeration Leaf; (* See Table 3-8. *)
            EBX ← Extended Topology Enumeration Leaf;
            ECX ← Extended Topology Enumeration Leaf;
            EDX ← Extended Topology Enumeration Leaf;
        BREAK;
        EAX = CH:
            EAX ← Reserved = 0;
            EBX ← Reserved = 0;
            ECX ← Reserved = 0;
            EDX ← Reserved = 0;
        BREAK;
        EAX = DH:
            EAX ← Processor Extended State Enumeration Leaf; (* See Table 3-8. *)
            EBX ← Processor Extended State Enumeration Leaf;
            ECX ← Processor Extended State Enumeration Leaf;
            EDX ← Processor Extended State Enumeration Leaf;
        BREAK;
        EAX = EH:
            EAX ← Reserved = 0;
            EBX ← Reserved = 0;
            ECX ← Reserved = 0;
            EDX ← Reserved = 0;
        BREAK;
        EAX = FH:
            EAX ← Intel Resource Director Technology Monitoring Enumeration Leaf; (* See Table 3-8. *)
            EBX ← Intel Resource Director Technology Monitoring Enumeration Leaf;
            ECX ← Intel Resource Director Technology Monitoring Enumeration Leaf;
            EDX ← Intel Resource Director Technology Monitoring Enumeration Leaf;
        BREAK;
        EAX = 10H:
            EAX ← Intel Resource Director Technology Allocation Enumeration Leaf; (* See Table 3-8. *)
            EBX ← Intel Resource Director Technology Allocation Enumeration Leaf;
            ECX ← Intel Resource Director Technology Allocation Enumeration Leaf;
            EDX ← Intel Resource Director Technology Allocation Enumeration Leaf;
        BREAK;
            EAX = 12H:
            EAX ← Intel SGX Enumeration Leaf; (* See Table 3-8. *)
            EBX ← Intel SGX Enumeration Leaf;
            ECX ← Intel SGX Enumeration Leaf;
            EDX ← Intel SGX Enumeration Leaf;
        BREAK;
        EAX = 14H:
            EAX ← Intel Processor Trace Enumeration Leaf; (* See Table 3-8. *)
            EBX ← Intel Processor Trace Enumeration Leaf;
            ECX ← Intel Processor Trace Enumeration Leaf;
            EDX ← Intel Processor Trace Enumeration Leaf;
        BREAK;
        EAX = 15H:
            EAX ← Time Stamp Counter and Nominal Core Crystal Clock Information Leaf; (* See Table 3-8. *)
            EBX ← Time Stamp Counter and Nominal Core Crystal Clock Information Leaf;
            ECX ← Time Stamp Counter and Nominal Core Crystal Clock Information Leaf;
            EDX ← Time Stamp Counter and Nominal Core Crystal Clock Information Leaf;
        BREAK;
        EAX = 16H:
            EAX ←
                Processor Frequency Information Enumeration Leaf; (* See Table 3-8. *)
            EBX ←
                Processor Frequency Information Enumeration Leaf;
            ECX ←
                Processor Frequency Information Enumeration Leaf;
            EDX ←
                Processor Frequency Information Enumeration Leaf;
        BREAK;
        EAX = 17H:
            EAX ←
                System-On-Chip Vendor Attribute Enumeration Leaf; (* See Table 3-8. *)
            EBX ←
                System-On-Chip Vendor Attribute Enumeration Leaf;
            ECX ←
                System-On-Chip Vendor Attribute Enumeration Leaf;
            EDX ←
                System-On-Chip Vendor Attribute Enumeration Leaf;
        BREAK;
            EAX = 18H:
            EAX ← Deterministic Address Translation Parameters Enumeration Leaf; (* See Table 3-8. *)
            EBX ← Deterministic Address Translation Parameters Enumeration Leaf;
            ECX ←Deterministic Address Translation Parameters Enumeration Leaf;
            EDX ← Deterministic Address Translation Parameters Enumeration Leaf;
        BREAK;
        EAX = 80000000H:
            EAX ← Highest extended function input value understood by CPUID;
            EBX ← Reserved;
            ECX ← Reserved;
            EDX ← Reserved;
        BREAK;
        EAX = 80000001H:
            EAX ← Reserved;
            EBX ← Reserved;
            ECX ← Extended Feature Bits (* See Table 3-8.*);
            EDX ← Extended Feature Bits (* See Table 3-8. *);
        BREAK;
        EAX = 80000002H:
            EAX ← Processor Brand String;
            EBX ← Processor Brand String,
                    continued;
            ECX ← Processor Brand String,
                    continued;
            EDX ← Processor Brand String,
                    continued;
        BREAK;
        EAX = 80000003H:
            EAX ← Processor Brand String,
                    continued;
            EBX ← Processor Brand String,
                    continued;
            ECX ← Processor Brand String,
                    continued;
            EDX ← Processor Brand String,
                    continued;
        BREAK;
        EAX = 80000004H:
            EAX ← Processor Brand String,
                    continued;
            EBX ← Processor Brand String,
                    continued;
            ECX ← Processor Brand String,
                    continued;
            EDX ← Processor Brand String,
                    continued;
        BREAK;
        EAX = 80000005H:
            EAX ← Reserved = 0;
            EBX ← Reserved = 0;
            ECX ← Reserved = 0;
            EDX ← Reserved = 0;
        BREAK;
        EAX = 80000006H:
            EAX ← Reserved = 0;
            EBX ← Reserved = 0;
            ECX ← Cache information;
            EDX ← Reserved = 0;
        BREAK;
        EAX = 80000007H:
            EAX ← Reserved = 0;
            EBX ← Reserved = 0;
            ECX ← Reserved = 0;
            EDX ← Reserved = Misc Feature Flags;
        BREAK;
        EAX = 80000008H:
            EAX ← Reserved = Physical Address Size Information;
            EBX ← Reserved = Virtual Address Size Information;
            ECX ← Reserved = 0;
            EDX ← Reserved = 0;
        BREAK;
        EAX >= 40000000H and EAX <= 4FFFFFFFH:
        DEFAULT: (* EAX = Value outside of recognized range for CPUID. *)
            (* If the highest basic information leaf data depend on ECX input value, ECX is honored.*)
            EAX ← Reserved; (* Information returned for highest basic information leaf. *)
            EBX ← Reserved; (* Information returned for highest basic information leaf. *)
            ECX ← Reserved; (* Information returned for highest basic information leaf. *)
            EDX ← Reserved; (* Information returned for highest basic information leaf. *)
        BREAK;
    ESAC;


Flags Affected¶

None.


Exceptions (All Operating Modes)¶

#UD If the LOCK prefix is used.

In earlier IA-32 processors that do not support the CPUID instruction,
execution of the instruction results in an invalid opcode (#UD)
exception being generated.

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
