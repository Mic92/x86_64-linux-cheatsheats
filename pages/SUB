-   Index
-   December 2017



SUB — SUBTRACT


  Opcode               Instruction          Op/En   64-Bit Mode   Compat/Leg Mode   Description
  -------------------- -------------------- ------- ------------- ----------------- ---------------------------------------------------------
  2C _ib_              SUB AL, i_mm8_       I       Valid         Valid             Subtract _imm8_ from AL.
  2D _iw_              SUB AX, i_mm16_      I       Valid         Valid             Subtract _imm16_ from AX.
  2D _id_              SUB EAX, i_mm32_     I       Valid         Valid             Subtract _imm32_ from EAX.
  REX.W + 2D _id_      SUB RAX, i_mm32_     I       Valid         N.E.              Subtract _imm32_ sign-extended to 64-bits from RAX.
  80 /5 _ib_           SUB _r/m8, imm8_     MI      Valid         Valid             Subtract _imm8_ from _r/m8._
  REX + 80 /5 _ib_     SUB _r/m8*, imm8_    MI      Valid         N.E.              Subtract _imm8_ from _r/m8._
  81 /5 _iw_           SUB _r/m16, imm16_   MI      Valid         Valid             Subtract _imm16_ from _r/m16._
  81 /5 _id_           SUB _r/m32, imm32_   MI      Valid         Valid             Subtract _imm32_ from _r/m32._
  REX.W + 81 /5 _id_   SUB _r/m64, imm32_   MI      Valid         N.E.              Subtract _imm32_ sign-extended to 64-bits from _r/m64._
  83 /5 _ib_           SUB _r/m16, imm8_    MI      Valid         Valid             Subtract sign-extended _imm8_ from _r/m16._
  83 /5 _ib_           SUB _r/m32, imm8_    MI      Valid         Valid             Subtract sign-extended _imm8_ from _r/m32._
  REX.W + 83 /5 _ib_   SUB _r/m64, imm8_    MI      Valid         N.E.              Subtract sign-extended _imm8_ from _r/m64._
  28 /_r_              SUB _r/m8, r8_       MR      Valid         Valid             Subtract _r8_ from _r/m8._
  REX + 28 /_r_        SUB _r/m8*, r8*_     MR      Valid         N.E.              Subtract _r8_ from _r/m8._
  29 /_r_              SUB _r/m16, r16_     MR      Valid         Valid             Subtract _r16_ from _r/m16._
  29 /_r_              SUB _r/m32, r32_     MR      Valid         Valid             Subtract _r32_ from _r/m32._
  REX.W + 29 /_r_      SUB _r/m64, r64_     MR      Valid         N.E.              Subtract _r64_ from _r/m64._
  2A /_r_              SUB _r8, r/m8_       RM      Valid         Valid             Subtract _r/m8_ from _r8._
  REX + 2A /_r_        SUB _r8*, r/m8*_     RM      Valid         N.E.              Subtract _r/m8_ from _r8._
  2B /_r_              SUB _r16, r/m16_     RM      Valid         Valid             Subtract _r/m16_ from _r16._
  2B /_r_              SUB _r32, r/m32_     RM      Valid         Valid             Subtract _r/m32_ from _r32._
  REX.W + 2B /_r_      SUB _r64, r/m64_     RM      Valid         N.E.              Subtract _r/m64_ from _r64._

  *
  In64-bitmode,r/m8cannotbeencodedtoaccessthefollowingbyteregistersifaREXprefixisused:AH,BH,CH,DH.


Instruction Operand Encoding¶

  ------- ------------------ --------------- ----------- -----------
  Op/En   Operand 1          Operand 2       Operand 3   Operand 4
  I       AL/AX/EAX/RAX      imm8/16/32      NA          NA
  MI      ModRM:r/m (r, w)   imm8/16/32      NA          NA
  MR      ModRM:r/m (r, w)   ModRM:reg (r)   NA          NA
  RM      ModRM:reg (r, w)   ModRM:r/m (r)   NA          NA
  ------- ------------------ --------------- ----------- -----------


Description¶

Subtracts the second operand (source operand) from the first operand
(destination operand) and stores the result in the destination operand.
The destination operand can be a register or a memory location; the
source operand can be an immediate, register, or memory location.
(However, two memory operands cannot be used in one instruction.) When
an immediate value is used as an operand, it is sign-extended to the
length of the destination operand format.

The SUB instruction performs integer subtraction. It evaluates the
result for both signed and unsigned integer operands and sets the OF and
CF flags to indicate an overflow in the signed or unsigned result,
respectively. The SF flag indicates the sign of the signed result.

In 64-bit mode, the instruction’s default operation size is 32 bits.
Using a REX prefix in the form of REX.R permits access to additional
registers (R8-R15). Using a REX prefix in the form of REX.W promotes
operation to 64 bits. See the summary chart at the beginning of this
section for encoding data and limits.

This instruction can be used with a LOCK prefix to allow the instruction
to be executed atomically.


Operation¶

    DEST ← (DEST – SRC);


Flags Affected¶

The OF, SF, ZF, AF, PF, and CF flags are set according to the result.


Protected Mode Exceptions¶

#GP(0)

If the destination is located in a non-writable segment.

If a memory operand effective address is outside the CS, DS, ES, FS, or
GS segment limit.

If the DS, ES, FS, or GS register contains a NULL segment selector.

#SS(0)

If a memory operand effective address is outside the SS segment limit.

#PF(fault-code)

If a page fault occurs.

#AC(0)

If alignment checking is enabled and an unaligned memory reference is
made while the current privilege level is 3.

#UD

If the LOCK prefix is used but the destination is not a memory operand.


Real-Address Mode Exceptions¶

  ----- -------------------------------------------------------------------------------------------
  #GP   If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
  #SS   If a memory operand effective address is outside the SS segment limit.
  #UD   If the LOCK prefix is used but the destination is not a memory operand.
  ----- -------------------------------------------------------------------------------------------


Virtual-8086 Mode Exceptions¶

  ----------------- -------------------------------------------------------------------------------------------
  #GP(0)            If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
  #SS(0)            If a memory operand effective address is outside the SS segment limit.
  #PF(fault-code)   If a page fault occurs.
  #AC(0)            If alignment checking is enabled and an unaligned memory reference is made.
  #UD               If the LOCK prefix is used but the destination is not a memory operand.
  ----------------- -------------------------------------------------------------------------------------------


Compatibility Mode Exceptions¶

Same exceptions as in protected mode.


64-Bit Mode Exceptions¶

  ----------------- --------------------------------------------------------------------------------------------------------------------
  #SS(0)            If a memory address referencing the SS segment is in a non-canonical form.
  #GP(0)            If the memory address is in a non-canonical form.
  #PF(fault-code)   If a page fault occurs.
  #AC(0)            If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
  #UD               If the LOCK prefix is used but the destination is not a memory operand.
  ----------------- --------------------------------------------------------------------------------------------------------------------

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
