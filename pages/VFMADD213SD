-   Index
-   May 2019



VFMADD132SD/VFMADD213SD/VFMADD231SD — FUSED MULTIPLY-ADD OF SCALAR DOUBLE- PRECISION FLOATING-POINT VALUES


  Opcode/Instruction                                                       Op/En   64/32 bit Mode Support   CPUID Feature Flag   Description
  ------------------------------------------------------------------------ ------- ------------------------ -------------------- -------------------------------------------------------------------------------------------------------------------
  VEX.LIG.66.0F38.W1 99 /r VFMADD132SD xmm1, xmm2, xmm3/m64                A       V/V                      FMA                  Multiply scalar double-precision floating-point value from xmm1 and xmm3/m64, add to xmm2 and put result in xmm1.
  VEX.LIG.66.0F38.W1 A9 /r VFMADD213SD xmm1, xmm2, xmm3/m64                A       V/V                      FMA                  Multiply scalar double-precision floating-point value from xmm1 and xmm2, add to xmm3/m64 and put result in xmm1.
  VEX.LIG.66.0F38.W1 B9 /r VFMADD231SD xmm1, xmm2, xmm3/m64                A       V/V                      FMA                  Multiply scalar double-precision floating-point value from xmm2 and xmm3/m64, add to xmm1 and put result in xmm1.
  EVEX.LIG.66.0F38.W1 99 /r VFMADD132SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}   B       V/V                      AVX512F              Multiply scalar double-precision floating-point value from xmm1 and xmm3/m64, add to xmm2 and put result in xmm1.
  EVEX.LIG.66.0F38.W1 A9 /r VFMADD213SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}   B       V/V                      AVX512F              Multiply scalar double-precision floating-point value from xmm1 and xmm2, add to xmm3/m64 and put result in xmm1.
  EVEX.LIG.66.0F38.W1 B9 /r VFMADD231SD xmm1 {k1}{z}, xmm2, xmm3/m64{er}   B       V/V                      AVX512F              Multiply scalar double-precision floating-point value from xmm2 and xmm3/m64, add to xmm1 and put result in xmm1.


Instruction Operand Encoding ¶

  ------- --------------- ------------------ --------------- --------------- -----------
  Op/En   Tuple Type      Operand 1          Operand 2       Operand 3       Operand 4
  A       NA              ModRM:reg (r, w)   VEX.vvvv (r)    ModRM:r/m (r)   NA
  B       Tuple1 Scalar   ModRM:reg (r, w)   EVEX.vvvv (r)   ModRM:r/m (r)   NA
  ------- --------------- ------------------ --------------- --------------- -----------

Description ¶

Performs a SIMD multiply-add computation on the low double-precision
floating-point values using three source operands and writes the
multiply-add result in the destination operand. The destination operand
is also the first source operand. The first and second operand are XMM
registers. The third source operand can be an XMM register or a 64-bit
memory location.

VFMADD132SD: Multiplies the low double-precision floating-point value
from the first source operand to the low double-precision floating-point
value in the third source operand, adds the infinite precision
intermediate result to the low double-precision floating-point values in
the second source operand, performs rounding and stores the resulting
double-precision floating-point value to the destination operand (first
source operand).

VFMADD213SD: Multiplies the low double-precision floating-point value
from the second source operand to the low double-precision
floating-point value in the first source operand, adds the infinite
precision intermediate result to the low double-precision floating-point
value in the third source operand, performs rounding and stores the
resulting double-precision floating-point value to the destination
operand (first source operand).

VFMADD231SD: Multiplies the low double-precision floating-point value
from the second source to the low double-precision floating-point value
in the third source operand, adds the infinite precision intermediate
result to the low double-precision floating-point value in the first
source operand, performs rounding and stores the resulting
double-precision floating-point value to the destination operand (first
source operand).

VEX.128 and EVEX encoded version: The destination operand (also first
source operand) is encoded in reg_field. The second source operand is
encoded in VEX.vvvv/EVEX.vvvv. The third source operand is encoded in
rm_field. Bits 127:64 of the destination are unchanged. Bits MAXVL-1:128
of the destination register are zeroed.

EVEX encoded version: The low quadword element of the destination is
updated according to the writemask.

Operation ¶

    In the operations below, “*” and “+” symbols represent multiplication and addition with infinite precision inputs and outputs (no
    rounding).

VFMADD132SD DEST, SRC2, SRC3 (EVEX encoded version) ¶

    IF (EVEX.b = 1) and SRC3 *is a register*
        THEN
            SET_RM(EVEX.RC);
        ELSE
            SET_RM(MXCSR.RM);
    FI;
    IF k1[0] or *no writemask*
        THEN DEST[63:0]←RoundFPControl(DEST[63:0]*SRC3[63:0] + SRC2[63:0])
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[63:0] remains unchanged*
                ELSE ; zeroing-masking
                    THEN DEST[63:0]←0
            FI;
    FI;
    DEST[127:64] ← DEST[127:64]
    DEST[MAXVL-1:128] ← 0

VFMADD213SD DEST, SRC2, SRC3 (EVEX encoded version) ¶

    IF (EVEX.b = 1) and SRC3 *is a register*
        THEN
            SET_RM(EVEX.RC);
        ELSE
            SET_RM(MXCSR.RM);
    FI;
    IF k1[0] or *no writemask*
        THEN DEST[63:0]←RoundFPControl(SRC2[63:0]*DEST[63:0] + SRC3[63:0])
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[63:0] remains unchanged*
                ELSE ; zeroing-masking
                    THEN DEST[63:0]←0
            FI;
    FI;
    DEST[127:64] ← DEST[127:64]
    DEST[MAXVL-1:128] ← 0

VFMADD231SD DEST, SRC2, SRC3 (EVEX encoded version) ¶

    IF (EVEX.b = 1) and SRC3 *is a register*
        THEN
            SET_RM(EVEX.RC);
        ELSE
            SET_RM(MXCSR.RM);
    FI;
    IF k1[0] or *no writemask*
        THEN DEST[63:0]←RoundFPControl(SRC2[63:0]*SRC3[63:0] + DEST[63:0])
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[63:0] remains unchanged*
                ELSE ; zeroing-masking
                    THEN DEST[63:0]←0
            FI;
    FI;
    DEST[127:64] ← DEST[127:64]
    DEST[MAXVL-1:128] ← 0

VFMADD132SD DEST, SRC2, SRC3 (VEX encoded version) ¶

    DEST[63:0]←MAXVL-1:128RoundFPControl_MXCSR(DEST[63:0]*SRC3[63:0] + SRC2[63:0])
    DEST[127:63] ← DEST[127:63]
    DEST[MAXVL-1:128] ← 0

VFMADD213SD DEST, SRC2, SRC3 (VEX encoded version) ¶

    DEST[63:0]←RoundFPControl_MXCSR(SRC2[63:0]*DEST[63:0] + SRC3[63:0])
    DEST[127:63] ← DEST[127:63]
    DEST[MAXVL-1:128] ← 0

VFMADD231SD DEST, SRC2, SRC3 (VEX encoded version) ¶

    DEST[63:0]←RoundFPControl_MXCSR(SRC2[63:0]*SRC3[63:0] + DEST[63:0])
    DEST[127:63] ← DEST[127:63]
    DEST[MAXVL-1:128] ← 0

Intel C/C++ Compiler Intrinsic Equivalent ¶

    VFMADDxxxSD __m128d _mm_fmadd_round_sd(__m128d a, __m128d b, __m128d c, int r);

    VFMADDxxxSD __m128d _mm_mask_fmadd_sd(__m128d a, __mmask8 k, __m128d b, __m128d c);

    VFMADDxxxSD __m128d _mm_maskz_fmadd_sd(__mmask8 k, __m128d a, __m128d b, __m128d c);

    VFMADDxxxSD __m128d _mm_mask3_fmadd_sd(__m128d a, __m128d b, __m128d c, __mmask8 k);

    VFMADDxxxSD __m128d _mm_mask_fmadd_round_sd(__m128d a, __mmask8 k, __m128d b, __m128d c, int r);

    VFMADDxxxSD __m128d _mm_maskz_fmadd_round_sd(__mmask8 k, __m128d a, __m128d b, __m128d c, int r);

    VFMADDxxxSD __m128d _mm_mask3_fmadd_round_sd(__m128d a, __m128d b, __m128d c, __mmask8 k, int r);

    VFMADDxxxSD __m128d _mm_fmadd_sd (__m128d a, __m128d b, __m128d c);

SIMD Floating-Point Exceptions ¶

Overflow, Underflow, Invalid, Precision, Denormal

Other Exceptions ¶

VEX-encoded instructions, see Exceptions Type 3.

EVEX-encoded instructions, see Exceptions Type E3.

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
