-   Index
-   May 2019

VGETEXPSD — Convert Exponents of Scalar DP FP Values to DP FP Value

  Opcode/Instruction                                                      Op/En   64/32 bit Mode Support   CPUID Feature Flag   Description
  ----------------------------------------------------------------------- ------- ------------------------ -------------------- ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  EVEX.LIG.66.0F38.W1 43 /r VGETEXPSD xmm1 {k1}{z}, xmm2, xmm3/m64{sae}   A       V/V                      AVX512F              Convert the biased exponent (bits 62:52) of the low double-precision floating-point value in xmm3/m64 to a DP FP value representing unbiased integer exponent. Stores the result to the low 64-bit of xmm1 under the writemask k1 and merge with the other elements of xmm2.

Instruction Operand Encoding ¶

  ------- --------------- --------------- --------------- --------------- -----------
  Op/En   Tuple Type      Operand 1       Operand 2       Operand 3       Operand 4
  A       Tuple1 Scalar   ModRM:reg (w)   EVEX.vvvv (r)   ModRM:r/m (r)   NA
  ------- --------------- --------------- --------------- --------------- -----------

Description ¶

Extracts the biased exponent from the normalized DP FP representation of
the low qword data element of the source operand (the third operand) as
unbiased signed integer value, or convert the denormal representation of
input data to unbiased negative integer values. The integer value of the
unbiased exponent is converted to double-precision FP value and written
to the destination operand (the first operand) as DP FP numbers. Bits
(127:64) of the XMM register destination are copied from corresponding
bits in the first source operand.

The destination must be a XMM register, the source operand can be a XMM
register or a float64 memory location. The low quadword element of the
destination operand is conditionally updated with writemask k1.

Each GETEXP operation converts the exponent value into a FP number
(permitting input value in denormal representation). Special cases of
input values are listed in Table 5-14.

The formula is:

GETEXP(x) = floor(log₂(|x|))

Notation floor(x) stands for maximal integer not exceeding real number
x.

Operation ¶

    // NormalizeExpTinyDPFP(SRC[63:0]) is defined in the Operation section of VGETEXPPD
    // ConvertExpDPFP(SRC[63:0]) is defined in the Operation section of VGETEXPPD

VGETEXPSD (EVEX encoded version) ¶

    IF k1[0] OR *no writemask*
        THEN DEST[63:0]←
                ConvertExpDPFP(SRC2[63:0])
        ELSE
            IF *merging-masking*
                        ; merging-masking
                THEN *DEST[63:0] remains unchanged*
                ELSE
                        ; zeroing-masking
                    DEST[63:0] ← 0
            FI
    FI;
    DEST[127:64] ← SRC1[127:64]
    DEST[MAXVL-1:128] ← 0

Intel C/C++ Compiler Intrinsic Equivalent ¶

    VGETEXPSD __m128d _mm_getexp_sd( __m128d a, __m128d b);

    VGETEXPSD __m128d _mm_mask_getexp_sd(__m128d s, __mmask8 k, __m128d a, __m128d b);

    VGETEXPSD __m128d _mm_maskz_getexp_sd( __mmask8 k, __m128d a, __m128d b);

    VGETEXPSD __m128d _mm_getexp_round_sd( __m128d a, __m128d b, int sae);

    VGETEXPSD __m128d _mm_mask_getexp_round_sd(__m128d s, __mmask8 k, __m128d a, __m128d b, int sae);

    VGETEXPSD __m128d _mm_maskz_getexp_round_sd( __mmask8 k, __m128d a, __m128d b, int sae);

SIMD Floating-Point Exceptions ¶

Invalid, Denormal

Other Exceptions ¶

See Exceptions Type E3.

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
