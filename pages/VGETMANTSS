-   Index
-   May 2019



VGETMANTSS — EXTRACT FLOAT32 VECTOR OF NORMALIZED MANTISSA FROM FLOAT32 VECTOR


  Opcode/Instruction                                                                Op/En   64/32 bit Mode Support   CPUID Feature Flag   Description
  --------------------------------------------------------------------------------- ------- ------------------------ -------------------- ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  EVEX.LIG.66.0F3A.W0 27 /r ib VGETMANTSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8   A       V/V                      AVX512F              Extract the normalized mantissa from the low float32 element of xmm3/m32 using imm8 for sign control and mantissa interval normalization, store the mantissa to xmm1 under the writemask k1 and merge with the other elements of xmm2.


Instruction Operand Encoding ¶

  ------- --------------- --------------- --------------- --------------- -----------
  Op/En   Tuple Type      Operand 1       Operand 2       Operand 3       Operand 4
  A       Tuple1 Scalar   ModRM:reg (w)   EVEX.vvvv (r)   ModRM:r/m (r)   NA
  ------- --------------- --------------- --------------- --------------- -----------

Description ¶

Convert the single-precision floating values in the low doubleword
element of the second source operand (the third operand) to SP FP value
with the mantissa normalization and sign control specified by the imm8
byte, see Figure 5-15. The converted result is written to the low
doubleword element of the destination operand (the first operand) using
writemask k1. Bits (127:32) of the XMM register destination are copied
from corresponding bits in the first source operand. The normalized
mantissa is specified by interv (imm8[1:0]) and the sign control (sc) is
specified by bits 3:2 of the immediate byte.

The conversion operation is:

_GetMant_(_x_) = _±_2_^(k)|x.significand|_

where:

1 _<_= _|x.significand| <_ 2

Unbiased exponent k depends on the interval range defined by interv and
whether the exponent of the source is even or odd. The sign of the final
result is determined by sc and the source sign.

if interv != 0 then k = -1, otherwise K = 0. The encoded value of
imm8[1:0] and sign control are shown

in Figure 5-15.

The converted SP FP result is encoded according to the sign control, the
unbiased exponent k (adding bias) and a mantissa normalized to the range
specified by interv.

The GetMant() function follows Table 5-16 when dealing with
floating-point special numbers.

This instruction is writemasked, so only those elements with the
corresponding bit set in vector mask register k1 are computed and stored
into zmm1. Elements in zmm1 with the corresponding bit clear in k1
retain their previous values.

Operation ¶

    // GetNormalizeMantissaSP(SRC[31:0], SignCtrl[1:0], Interv[1:0]) is defined in the operation section of VGETMANTPD

VGETMANTSS (EVEX encoded version) ¶

    SignCtrl[1:0] ← IMM8[3:2];
    Interv[1:0] ← IMM8[1:0];
    IF k1[0] OR *no writemask*
        THEN DEST[31:0]←
                GetNormalizedMantissaSP(SRC2[31:0], SignCtrl, Interv)
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[31:0] remains unchanged*
                ELSE ; zeroing-masking
                    DEST[31:0] ← 0
            FI
    FI;
    DEST[127:32] ← SRC1[127:64]
    DEST[MAXVL-1:128] ← 0

Intel C/C++ Compiler Intrinsic Equivalent ¶

    VGETMANTSS __m128 _mm_getmant_ss( __m128 a, __m128 b, enum intv, enum sgn);

    VGETMANTSS __m128 _mm_mask_getmant_ss(__m128 s, __mmask8 k, __m128 a, __m128 b, enum intv, enum sgn);

    VGETMANTSS __m128 _mm_maskz_getmant_ss( __mmask8 k, __m128 a, __m128 b, enum intv, enum sgn);

    VGETMANTSS __m128 _mm_getmant_round_ss( __m128 a, __m128 b, enum intv, enum sgn, int r);

    VGETMANTSS __m128 _mm_mask_getmant_round_ss(__m128 s, __mmask8 k, __m128 a, __m128 b, enum intv, enum sgn, int r);

    VGETMANTSS __m128 _mm_maskz_getmant_round_ss( __mmask8 k, __m128 a, __m128 b, enum intv, enum sgn, int r);

SIMD Floating-Point Exceptions ¶

Denormal, Invalid

Other Exceptions ¶

See Exceptions Type E3.

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
