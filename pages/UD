-   Index
-   May 2019



UD — UNDEFINED INSTRUCTION


  Opcode     Instruction         Op/En   64-Bit Mode   Compat/Leg Mode   Description
  ---------- ------------------- ------- ------------- ----------------- ---------------------------------
  0F FF /r   UD0¹ _r32, r/m32_   RM      Valid         Valid             Raise invalid opcode exception.
  0F B9 /r   UD1 _r32, r/m32_    RM      Valid         Valid             Raise invalid opcode exception.
  0F 0B      UD2                 ZO      Valid         Valid             Raise invalid opcode exception.

  1. Some older processors decode the UD0 instruction without a ModR/M
  byte. As a result, those processors would deliver an invalid-opcode
  exception instead of a fault on instruction fetch when the instruction
  with a ModR/M byte (and any implied bytes) would cross a page or
  segment boundary.


Instruction Operand Encoding ¶

  ------- --------------- --------------- ----------- -----------
  Op/En   Operand 1       Operand 2       Operand 3   Operand 4
  ZO      NA              NA              NA          NA
  RM      ModRM:reg (r)   ModRM:r/m (r)   NA          NA
  ------- --------------- --------------- ----------- -----------


Description ¶

Generates an invalid opcode exception. This instruction is provided for
software testing to explicitly generate an invalid opcode exception. The
opcodes for this instruction are reserved for this purpose.

Other than raising the invalid opcode exception, this instruction has no
effect on processor state or memory.

Even though it is the execution of the UD instruction that causes the
invalid opcode exception, the instruction pointer saved by delivery of
the exception references the UD instruction (and not the following
instruction).

This instruction’s operation is the same in non-64-bit modes and 64-bit
mode.


Operation ¶

    #UD (* Generates invalid opcode exception *);


Flags Affected ¶

None.


Exceptions (All Operating Modes) ¶

#UD Raises an invalid opcode exception in all operating modes.

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
