-   Index
-   May 2019

FYL2XP1 — Compute y ∗ log2(x +1)

  Opcode   Instruction   64-Bit Mode   Compat/Leg Mode   Description
  -------- ------------- ------------- ----------------- --------------------------------------------------------------------------
  D9 F9    FYL2XP1       Valid         Valid             Replace ST(1) with ST(1) ∗ log₂(ST(0) + 1.0) and pop the register stack.

Description ¶

Computes (ST(1) ∗ log₂(ST(0) + 1.0)), stores the result in register
ST(1), and pops the FPU register stack. The source operand in ST(0) must
be in the range:

[]

The source operand in ST(1) can range from −∞ to +∞. If the ST(0)
operand is outside of its acceptable range, the result is undefined and
software should not rely on an exception being generated. Under some
circumstances exceptions may be generated when ST(0) is out of range,
but this behavior is implementation specific and not guaranteed.

The following table shows the results obtained when taking the log
epsilon of various classes of numbers, assuming that underflow does not
occur.

[]

Table 3-49. FYL2XP1 Results

  F Means finite floating-point value.

  * Indicatesfloating-pointinvalid-operation(#IA)exception.

This instruction provides optimal accuracy for values of epsilon [the
value in register ST(0)] that are close to 0. For small epsilon (ε)
values, more significant digits can be retained by using the FYL2XP1
instruction than by using (ε+1) as an argument to the FYL2X instruction.
The (ε+1) expression is commonly found in compound interest and annuity
calculations. The result can be simply converted into a value in another
logarithm base by including a scale factor in the ST(1) source operand.
The following equation is used to calculate the scale factor for a
particular logarithm base, where n is the logarithm base desired for the
result of the FYL2XP1 instruction:

scale factor ← log_(n) 2

This instruction’s operation is the same in non-64-bit modes and 64-bit
mode.

Operation ¶

    ST(1) ← ST(1) ∗ log2(ST(0) + 1.0);
    PopRegisterStack;

FPU Flags Affected ¶

  ------------ --------------------------------------------------
  C1           Set to 0 if stack underflow occurred.
               Set if result was rounded up; cleared otherwise.
  C0, C2, C3   Undefined.
  ------------ --------------------------------------------------

Floating-Point Exceptions ¶

  ----- ------------------------------------------------------------
  #IS   Stack underflow occurred.
  #IA   Either operand is an SNaN value or unsupported format.
  #D    Source operand is a denormal value.
  #U    Result is too small for destination format.
  #O    Result is too large for destination format.
  #P    Value cannot be represented exactly in destination format.
  ----- ------------------------------------------------------------

Protected Mode Exceptions ¶

  ----- ------------------------------------------
  #NM   CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
  #MF   If there is a pending x87 FPU exception.
  #UD   If the LOCK prefix is used.
  ----- ------------------------------------------

Real-Address Mode Exceptions ¶

Same exceptions as in protected mode.

Virtual-8086 Mode Exceptions ¶

Same exceptions as in protected mode.

Compatibility Mode Exceptions ¶

Same exceptions as in protected mode.

64-Bit Mode Exceptions ¶

Same exceptions as in protected mode.

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
