-   Index
-   May 2019



VRSQRT28PD — APPROXIMATION TO THE RECIPROCAL SQUARE ROOT OF PACKED DOUBLE-PRECISION FLOATING-POINT VALUES WITH LESS THAN 2^-28 RELATIVE ERROR


  Opcode/Instruction                                                           Op/En   64/32 bit Mode Support   CPUID Feature Flag   Description
  ---------------------------------------------------------------------------- ------- ------------------------ -------------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  EVEX.512.66.0F38.W1 CC /r VRSQRT28PD zmm1 {k1}{z}, zmm2/m512/m64bcst {sae}   A       V/V                      AVX512ER             Computes approximations to the Reciprocal square root (<2^-28 relative error) of the packed double-precision floating-point values from zmm2/m512/m64bcst and stores result in zmm1with writemask k1.


Instruction Operand Encoding ¶

  ------- ------------ --------------- --------------- ----------- -----------
  Op/En   Tuple Type   Operand 1       Operand 2       Operand 3   Operand 4
  A       Full         ModRM:reg (w)   ModRM:r/m (r)   NA          NA
  ------- ------------ --------------- --------------- ----------- -----------

Description ¶

Computes the reciprocal square root of the float64 values in the source
operand (the second operand) and store the results to the destination
operand (the first operand). The approximate reciprocal is evaluated
with less than 2^-28 of maximum relative error.

If any source element is NaN, the quietized NaN source value is returned
for that element. Negative (non-zero) source numbers, as well as -∞,
return the canonical NaN and set the Invalid Flag (#I).

A value of -0 must return -∞ and set the DivByZero flags (#Z). Negative
numbers should return NaN and set the Invalid flag (#I). Note however
that the instruction flush input denormals to zero of the same sign, so
negative denormals return -∞ and set the DivByZero flag.

The source operand is a ZMM register, a 512-bit memory location or a
512-bit vector broadcasted from a 64-bit memory location. The
destination operand is a ZMM register, conditionally updated using
writemask k1.

EVEX.vvvv is reserved and must be 1111b otherwise instructions will #UD.

A numerically exact implementation of VRSQRT28xx can be found at https://software.intel.com/en-us/arti- ¶

cles/reference-implementations-for-IA-approximation-instructions-vrcp14-vrsqrt14-vrcp28-vrsqrt28-vexp2. ¶

Operation ¶

VRSQRT28PD (EVEX encoded versions) ¶

    (KL, VL) = (8, 512)
    FOR j←0 TO KL-1
        i←j * 64
        IF k1[j] OR *no writemask* THEN
                IF (EVEX.b = 1) AND (SRC *is memory*)
                    THEN DEST[i+63:i]←(1.0/ SQRT(SRC[63:0]));
                    ELSE DEST[i+63:i]←(1.0/ SQRT(SRC[i+63:i]));
                FI;
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[i+63:i] remains unchanged*
                ELSE ; zeroing-masking
                    DEST[i+63:i] ← 0
            FI;
        FI;
    ENDFOR;

  Input value                   Result value      Comments
  ----------------------------- ----------------- -------------------------
  NAN                           QNAN(input)       If (SRC = SNaN) then #I
  X = 2^(-2n)                   ₂^(n)             
  X<0                           QNaN_Indefinite   Including -INF
  X = -0 or negative denormal   -INF              #Z
  X = +0 or positive denormal   +INF              #Z
  X = +INF                      +0                

Table 6-39. VRSQRT28PD Special Cases

Intel C/C++ Compiler Intrinsic Equivalent ¶

    VRSQRT28PD __m512d _mm512_rsqrt28_round_pd(__m512d a, int sae);

    VRSQRT28PD __m512d _mm512_mask_rsqrt28_round_pd(__m512d s, __mmask8 m,__m512d a, int sae);

    VRSQRT28PD __m512d _mm512_maskz_rsqrt28_round_pd(__mmask8 m,__m512d a, int sae);

SIMD Floating-Point Exceptions ¶

Invalid (if SNaN input), Divide-by-zero

Other Exceptions ¶

See Exceptions Type E2.

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
