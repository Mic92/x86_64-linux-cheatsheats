-   Index
-   May 2019

VRCP28SS — Approximation to the Reciprocal of Scalar Single-Precision Floating-Point Value with Less Than 2^-28 Relative Error

  Opcode/Instruction                                                      Op/En   64/32 bit Mode Support   CPUID Feature Flag   Description
  ----------------------------------------------------------------------- ------- ------------------------ -------------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  EVEX.LIG.66.0F38.W0 CB /r VRCP28SS xmm1 {k1}{z}, xmm2, xmm3/m32 {sae}   A       V/V                      AVX512ER             Computes the approximate reciprocal ( < 2^-28 relative error) of the scalar single-precision floating-point value in xmm3/m32 and stores the results in xmm1. Under writemask. Also, upper 3 single-precision floating-point values (bits[127:32]) from xmm2 is copied to xmm1[127:32].

Instruction Operand Encoding ¶

  ------- --------------- --------------- ----------- --------------- -----------
  Op/En   Tuple Type      Operand 1       Operand 2   Operand 3       Operand 4
  A       Tuple1 Scalar   ModRM:reg (w)   EVEX.vvvv   ModRM:r/m (r)   NA
  ------- --------------- --------------- ----------- --------------- -----------

Description ¶

Computes the reciprocal approximation of the low float32 value in the
second source operand (the third operand) and store the result to the
destination operand (the first operand). The approximate reciprocal is
evaluated with less than 2^-28 of maximum relative error prior to final
rounding. The final result is rounded to < 2^-23 relative error before
written into the low float32 element of the destination according to
writemask k1. Bits 127:32 of the destination is copied from the
corresponding bits of the first source operand (the second operand).

A denormal input value is treated as zero and does not signal #DE,
irrespective of MXCSR.DAZ. A denormal result is flushed to zero and does
not signal #UE, irrespective of MXCSR.FTZ.

If any source element is NaN, the quietized NaN source value is returned
for that element. If any source element is ±∞, ±0.0 is returned for that
element. Also, if any source element is ±0.0, ±∞ is returned for that
element.

The first source operand is an XMM register. The second source operand
is an XMM register or a 32-bit memory location. The destination operand
is a XMM register, conditionally updated using writemask k1.

A numerically exact implementation of VRCP28xx can be found at https://software.intel.com/en-us/articles/refer- ¶

ence-implementations-for-IA-approximation-instructions-vrcp14-vrsqrt14-vrcp28-vrsqrt28-vexp2. ¶

Operation ¶

VRCP28SS ((EVEX encoded versions) ¶

    IF k1[0] OR *no writemask* THEN
            DEST[31: 0]←RCP_28_SP(1.0/SRC2[31: 0]);
    ELSE
        IF *merging-masking* ; merging-masking
            THEN *DEST[31: 0] remains unchanged*
            ELSE ; zeroing-masking
                DEST[31: 0]←0
        FI;
    FI;
    ENDFOR;
    DEST[127:32]←SRC1[127: 32]
    DEST[MAXVL-1:128] ← 0

  Input value        Result value   Comments
  ------------------ -------------- --------------------------------------------------
  NAN                QNAN(input)    If (SRC = SNaN) then #I
  _(0 ≤ X < 2)⁻¹²⁶   INF            Positive input denormal or zero; #Z
  -2⁻¹²⁶ < X ≤ -0    -INF           Negative input denormal or zero; #Z
  X > 2¹²⁶           +0.0f          
  X < -2¹²⁶          -0.0f          
  X = +∞             +0.0f          
  X = -∞             -0.0f          
  _(X = 2)-n         ₂^(n)          Exact result (unless input/output is a denormal)
  X = -2^(-n)        -2^(n)         Exact result (unless input/output is a denormal)

Table 6-38. VRCP28SS Special Cases

Intel C/C++ Compiler Intrinsic Equivalent ¶

    VRCP28SS __m128 _mm_rcp28_round_ss ( __m128 a, __m128 b, int sae);

    VRCP28SS __m128 _mm_mask_rcp28_round_ss(__m128 s, __mmask8 m, __m128 a, __m128 b, int sae);

    VRCP28SS __m128 _mm_maskz_rcp28_round_ss(__mmask8 m, __m128 a, __m128 b, int sae);

SIMD Floating-Point Exceptions ¶

Invalid (if SNaN input), Divide-by-zero

Other Exceptions ¶

See Exceptions Type E3.

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
