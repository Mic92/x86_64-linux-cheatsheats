-   Index
-   May 2019



VRSQRT14PD — COMPUTE APPROXIMATE RECIPROCALS OF SQUARE ROOTS OF PACKED FLOAT64 VALUES


  Opcode/Instruction                                                     Op/En   64/32 bit Mode Support   CPUID Feature Flag   Description
  ---------------------------------------------------------------------- ------- ------------------------ -------------------- -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  EVEX.128.66.0F38.W1 4E /r VRSQRT14PD xmm1 {k1}{z}, xmm2/m128/m64bcst   A       V/V                      AVX512VL AVX512F     Computes the approximate reciprocal square roots of the packed double-precision floating-point values in xmm2/m128/m64bcst and stores the results in xmm1. Under writemask.
  EVEX.256.66.0F38.W1 4E /r VRSQRT14PD ymm1 {k1}{z}, ymm2/m256/m64bcst   A       V/V                      AVX512VL AVX512F     Computes the approximate reciprocal square roots of the packed double-precision floating-point values in ymm2/m256/m64bcst and stores the results in ymm1. Under writemask.
  EVEX.512.66.0F38.W1 4E /r VRSQRT14PD zmm1 {k1}{z}, zmm2/m512/m64bcst   A       V/V                      AVX512F              Computes the approximate reciprocal square roots of the packed double-precision floating-point values in zmm2/m512/m64bcst and stores the results in zmm1 under writemask.


Instruction Operand Encoding ¶

  ------- ------------ --------------- --------------- ----------- -----------
  Op/En   Tuple Type   Operand 1       Operand 2       Operand 3   Operand 4
  A       Full         ModRM:reg (w)   ModRM:r/m (r)   NA          NA
  ------- ------------ --------------- --------------- ----------- -----------

Description ¶

This instruction performs a SIMD computation of the approximate
reciprocals of the square roots of the eight packed double-precision
floating-point values in the source operand (the second operand) and
stores the packed double-precision floating-point results in the
destination operand (the first operand) according to the writemask. The
maximum relative error for this approximation is less than 2⁻¹⁴.

EVEX.512 encoded version: The source operand can be a ZMM register, a
512-bit memory location, or a 512-bit vector broadcasted from a 64-bit
memory location. The destination operand is a ZMM register,
conditionally updated using writemask k1.

EVEX.256 encoded version: The source operand is a YMM register, a
256-bit memory location, or a 256-bit vector broadcasted from a 64-bit
memory location. The destination operand is a YMM register,
conditionally updated using writemask k1.

EVEX.128 encoded version: The source operand is a XMM register, a
128-bit memory location, or a 128-bit vector broadcasted from a 64-bit
memory location. The destination operand is a XMM register,
conditionally updated using writemask k1.

The VRSQRT14PD instruction is not affected by the rounding control bits
in the MXCSR register. When a source value is a 0.0, an ∞ with the sign
of the source value is returned. When the source operand is an +∞ then
+ZERO value is returned. A denormal source value is treated as zero only
if DAZ bit is set in MXCSR. Otherwise it is treated correctly and
performs the approximation with the specified masked response. When a
source value is a negative value (other than 0.0) a floating-point
QNaN_indefinite is returned. When a source value is an SNaN or QNaN, the
SNaN is converted to a QNaN or the source QNaN is returned.

MXCSR exception flags are not affected by this instruction and
floating-point exceptions are not reported.

Note: EVEX.vvvv is reserved and must be 1111b, otherwise instructions
will #UD.

A numerically exact implementation of VRSQRT14xx can be found at https://software.intel.com/en-us/arti- ¶

cles/reference-implementations-for-IA-approximation-instructions-vrcp14-vrsqrt14-vrcp28-vrsqrt28-vexp2. ¶

Operation ¶

VRSQRT14PD (EVEX encoded versions) ¶

    (KL, VL) = (2, 128), (4, 256), (8, 512)
    FOR j←0 TO KL-1
        i←j * 64
        IF k1[j] OR *no writemask* THEN
                IF (EVEX.b = 1) AND (SRC *is memory*)
                    THEN DEST[i+63:i]←APPROXIMATE(1.0/ SQRT(SRC[63:0]));
                    ELSE DEST[i+63:i]←APPROXIMATE(1.0/ SQRT(SRC[i+63:i]));
                FI;
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[i+63:i] remains unchanged*
                ELSE
                        ; zeroing-masking
                    DEST[i+63:i] ← 0
            FI;
        FI;
    ENDFOR;
    DEST[MAXVL-1:VL] ← 0

  Input value    Result value      Comments
  -------------- ----------------- --------------------------
  Any denormal   Normal            Cannot generate overflow
  X = 2^(-2n)    ₂^(n)             
  X<0            QNaN_Indefinite   Including -INF
  X = -0         -INF              
  X = +0         +INF              
  X = +INF       +0                

Table 5-26. VRSQRT14PD Special Cases

Intel C/C++ Compiler Intrinsic Equivalent ¶

    VRSQRT14PD __m512d _mm512_rsqrt14_pd( __m512d a);

    VRSQRT14PD __m512d _mm512_mask_rsqrt14_pd(__m512d s, __mmask8 k, __m512d a);

    VRSQRT14PD __m512d _mm512_maskz_rsqrt14_pd( __mmask8 k, __m512d a);

    VRSQRT14PD __m256d _mm256_rsqrt14_pd( __m256d a);

    VRSQRT14PD __m256d _mm512_mask_rsqrt14_pd(__m256d s, __mmask8 k, __m256d a);

    VRSQRT14PD __m256d _mm512_maskz_rsqrt14_pd( __mmask8 k, __m256d a);

    VRSQRT14PD __m128d _mm_rsqrt14_pd( __m128d a);

    VRSQRT14PD __m128d _mm_mask_rsqrt14_pd(__m128d s, __mmask8 k, __m128d a);

    VRSQRT14PD __m128d _mm_maskz_rsqrt14_pd( __mmask8 k, __m128d a);

SIMD Floating-Point Exceptions ¶

None

Other Exceptions ¶

See Exceptions Type E4.

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
