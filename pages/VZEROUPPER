-   Index
-   May 2019

VZEROUPPER — Zero Upper Bits of YMM Registers

  Opcode/Instruction             Op/En   64/32 bit Mode Support   CPUID Feature Flag   Description
  ------------------------------ ------- ------------------------ -------------------- -------------------------------------------
  VEX.128.0F.WIG 77 VZEROUPPER   ZO      V/V                      AVX                  Zero upper 128 bits of all YMM registers.

Instruction Operand Encoding ¶

  ------- ----------- ----------- ----------- -----------
  Op/En   Operand 1   Operand 2   Operand 3   Operand 4
  ZO      NA          NA          NA          NA
  ------- ----------- ----------- ----------- -----------

Description ¶

The instruction zeros the bits in position 128 and higher of all YMM
registers. The lower 128-bits of the registers (the corresponding XMM
registers) are unmodified.

This instruction is recommended when transitioning between AVX and
legacy SSE code - it will eliminate performance penalties caused by
false dependencies.

Note: VEX.vvvv is reserved and must be 1111b otherwise instructions will
#UD. In Compatibility and legacy 32-bit mode only the lower 8 registers
are modified.

Operation ¶

    simd_reg_file[][] is a two dimensional array representing the SIMD register file containing all the overlapping xmm, ymm and zmm
    registers present in that implementation. The major dimension is the register number: 0 for xmm0, ymm0 and zmm0; 1 for xmm1,
    ymm1, and zmm1; etc. The minor dimension size is the width of the implemented SIMD state measured in bits. On a machine
    supporting Intel AVX-512, the width is 512. On a machine supporting Intel AVX but not Intel AVX-512, the width is “MAXVL”.

VZEROUPPER ¶

    IF (64-bit mode)
        limit ←15
    ELSE
        limit ← 7
    FOR i in 0 .. limit:
        simd_reg_file[i][MAXVL-1:128] ← 0

Intel C/C++ Compiler Intrinsic Equivalent ¶

    VZEROUPPER: _mm256_zeroupper()

SIMD Floating-Point Exceptions ¶

None.

Other Exceptions ¶

See Exceptions Type 8.

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
