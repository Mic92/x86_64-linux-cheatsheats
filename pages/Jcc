-   Index
-   May 2019



JCC — JUMP IF CONDITION IS MET


  Opcode       Instruction    Op/En   64-Bit Mode   Compat/Leg Mode   Description
  ------------ -------------- ------- ------------- ----------------- --------------------------------------------------------------------------------
  77 _cb_      JA _rel8_      D       Valid         Valid             Jump short if above (CF=0 and ZF=0).
  73 _cb_      JAE _rel8_     D       Valid         Valid             Jump short if above or equal (CF=0).
  72 _cb_      JB _rel8_      D       Valid         Valid             Jump short if below (CF=1).
  76 _cb_      JBE _rel8_     D       Valid         Valid             Jump short if below or equal (CF=1 or ZF=1).
  72 _cb_      JC _rel8_      D       Valid         Valid             Jump short if carry (CF=1).
  E3 _cb_      JCXZ _rel8_    D       N.E.          Valid             Jump short if CX register is 0.
  E3 _cb_      JECXZ _rel8_   D       Valid         Valid             Jump short if ECX register is 0.
  E3 _cb_      JRCXZ _rel8_   D       Valid         N.E.              Jump short if RCX register is 0.
  74 _cb_      JE _rel8_      D       Valid         Valid             Jump short if equal (ZF=1).
  7F _cb_      JG _rel8_      D       Valid         Valid             Jump short if greater (ZF=0 and SF=OF).
  7D _cb_      JGE _rel8_     D       Valid         Valid             Jump short if greater or equal (SF=OF).
  7C _cb_      JL _rel8_      D       Valid         Valid             Jump short if less (SF≠ OF).
  7E _cb_      JLE _rel8_     D       Valid         Valid             Jump short if less or equal (ZF=1 or SF≠ OF).
  76 _cb_      JNA _rel8_     D       Valid         Valid             Jump short if not above (CF=1 or ZF=1).
  72 _cb_      JNAE _rel8_    D       Valid         Valid             Jump short if not above or equal (CF=1).
  73 _cb_      JNB _rel8_     D       Valid         Valid             Jump short if not below (CF=0).
  77 _cb_      JNBE _rel8_    D       Valid         Valid             Jump short if not below or equal (CF=0 and ZF=0).
  73 _cb_      JNC _rel8_     D       Valid         Valid             Jump short if not carry (CF=0).
  75 _cb_      JNE _rel8_     D       Valid         Valid             Jump short if not equal (ZF=0).
  7E _cb_      JNG _rel8_     D       Valid         Valid             Jump short if not greater (ZF=1 or SF≠ OF).
  7C _cb_      JNGE _rel8_    D       Valid         Valid             Jump short if not greater or equal (SF≠ OF).
  7D _cb_      JNL _rel8_     D       Valid         Valid             Jump short if not less (SF=OF).
  7F _cb_      JNLE _rel8_    D       Valid         Valid             Jump short if not less or equal (ZF=0 and SF=OF).
  71 _cb_      JNO _rel8_     D       Valid         Valid             Jump short if not overflow (OF=0).
  7B _cb_      JNP _rel8_     D       Valid         Valid             Jump short if not parity (PF=0).
  79 _cb_      JNS _rel8_     D       Valid         Valid             Jump short if not sign (SF=0).
  75 _cb_      JNZ _rel8_     D       Valid         Valid             Jump short if not zero (ZF=0).
  70 _cb_      JO _rel8_      D       Valid         Valid             Jump short if overflow (OF=1).
  7A _cb_      JP _rel8_      D       Valid         Valid             Jump short if parity (PF=1).
  7A _cb_      JPE _rel8_     D       Valid         Valid             Jump short if parity even (PF=1).
  7B _cb_      JPO _rel8_     D       Valid         Valid             Jump short if parity odd (PF=0).
  78 _cb_      JS _rel8_      D       Valid         Valid             Jump short if sign (SF=1).
  74 _cb_      JZ _rel8_      D       Valid         Valid             Jump short if zero (ZF = 1).
  0F 87 _cw_   JA _rel16_     D       N.S.          Valid             Jump near if above (CF=0 and ZF=0). Not supported in 64-bit mode.
  0F 87 _cd_   JA _rel32_     D       Valid         Valid             Jump near if above (CF=0 and ZF=0).
  0F 83 _cw_   JAE _rel16_    D       N.S.          Valid             Jump near if above or equal (CF=0). Not supported in 64-bit mode.
  0F 83 _cd_   JAE _rel32_    D       Valid         Valid             Jump near if above or equal (CF=0).
  0F 82 _cw_   JB _rel16_     D       N.S.          Valid             Jump near if below (CF=1). Not supported in 64-bit mode.
  0F 82 _cd_   JB _rel32_     D       Valid         Valid             Jump near if below (CF=1).
  0F 86 _cw_   JBE _rel16_    D       N.S.          Valid             Jump near if below or equal (CF=1 or ZF=1). Not supported in 64-bit mode.
  0F 86 _cd_   JBE _rel32_    D       Valid         Valid             Jump near if below or equal (CF=1 or ZF=1).
  0F 82 _cw_   JC _rel16_     D       N.S.          Valid             Jump near if carry (CF=1). Not supported in 64-bit mode.
  0F 82 _cd_   JC _rel32_     D       Valid         Valid             Jump near if carry (CF=1).
  0F 84 _cw_   JE _rel16_     D       N.S.          Valid             Jump near if equal (ZF=1). Not supported in 64-bit mode.
  0F 84 _cd_   JE _rel32_     D       Valid         Valid             Jump near if equal (ZF=1).
  0F 84 _cw_   JZ _rel16_     D       N.S.          Valid             Jump near if 0 (ZF=1). Not supported in 64-bit mode.
  0F 84 _cd_   JZ _rel32_     D       Valid         Valid             Jump near if 0 (ZF=1).
  0F 8F _cw_   JG _rel16_     D       N.S.          Valid             Jump near if greater (ZF=0 and SF=OF). Not supported in 64-bit mode.
  0F 8F _cd_   JG _rel32_     D       Valid         Valid             Jump near if greater (ZF=0 and SF=OF).
  0F 8D _cw_   JGE _rel16_    D       N.S.          Valid             Jump near if greater or equal (SF=OF). Not supported in 64-bit mode.
  0F 8D _cd_   JGE _rel32_    D       Valid         Valid             Jump near if greater or equal (SF=OF).
  0F 8C _cw_   JL _rel16_     D       N.S.          Valid             Jump near if less (SF≠ OF). Not supported in 64-bit mode.
  0F 8C _cd_   JL _rel32_     D       Valid         Valid             Jump near if less (SF≠ OF).
  0F 8E _cw_   JLE _rel16_    D       N.S.          Valid             Jump near if less or equal (ZF=1 or SF≠ OF). Not supported in 64-bit mode.
  0F 8E _cd_   JLE _rel32_    D       Valid         Valid             Jump near if less or equal (ZF=1 or SF≠ OF).
  0F 86 _cw_   JNA _rel16_    D       N.S.          Valid             Jump near if not above (CF=1 or ZF=1). Not supported in 64-bit mode.
  0F 86 _cd_   JNA _rel32_    D       Valid         Valid             Jump near if not above (CF=1 or ZF=1).
  0F 82 _cw_   JNAE _rel16_   D       N.S.          Valid             Jump near if not above or equal (CF=1). Not supported in 64-bit mode.
  0F 82 _cd_   JNAE _rel32_   D       Valid         Valid             Jump near if not above or equal (CF=1).
  0F 83 _cw_   JNB _rel16_    D       N.S.          Valid             Jump near if not below (CF=0). Not supported in 64-bit mode.
  0F 83 _cd_   JNB _rel32_    D       Valid         Valid             Jump near if not below (CF=0).
  0F 87 _cw_   JNBE _rel16_   D       N.S.          Valid             Jump near if not below or equal (CF=0 and ZF=0). Not supported in 64-bit mode.
  0F 87 _cd_   JNBE _rel32_   D       Valid         Valid             Jump near if not below or equal (CF=0 and ZF=0).
  0F 83 _cw_   JNC _rel16_    D       N.S.          Valid             Jump near if not carry (CF=0). Not supported in 64-bit mode.
  0F 83 _cd_   JNC _rel32_    D       Valid         Valid             Jump near if not carry (CF=0).
  0F 85 _cw_   JNE _rel16_    D       N.S.          Valid             Jump near if not equal (ZF=0). Not supported in 64-bit mode.
  0F 85 _cd_   JNE _rel32_    D       Valid         Valid             Jump near if not equal (ZF=0).
  0F 8E _cw_   JNG _rel16_    D       N.S.          Valid             Jump near if not greater (ZF=1 or SF≠ OF). Not supported in 64-bit mode.
  0F 8E _cd_   JNG _rel32_    D       Valid         Valid             Jump near if not greater (ZF=1 or SF≠ OF).
  0F 8C _cw_   JNGE _rel16_   D       N.S.          Valid             Jump near if not greater or equal (SF≠ OF). Not supported in 64-bit mode.
  0F 8C _cd_   JNGE _rel32_   D       Valid         Valid             Jump near if not greater or equal (SF≠ OF).
  0F 8D _cw_   JNL _rel16_    D       N.S.          Valid             Jump near if not less (SF=OF). Not supported in 64-bit mode.
  0F 8D _cd_   JNL _rel32_    D       Valid         Valid             Jump near if not less (SF=OF).
  0F 8F _cw_   JNLE _rel16_   D       N.S.          Valid             Jump near if not less or equal (ZF=0 and SF=OF). Not supported in 64-bit mode.
  0F 8F _cd_   JNLE _rel32_   D       Valid         Valid             Jump near if not less or equal (ZF=0 and SF=OF).
  0F 81 _cw_   JNO _rel16_    D       N.S.          Valid             Jump near if not overflow (OF=0). Not supported in 64-bit mode.
  0F 81 _cd_   JNO _rel32_    D       Valid         Valid             Jump near if not overflow (OF=0).
  0F 8B _cw_   JNP _rel16_    D       N.S.          Valid             Jump near if not parity (PF=0). Not supported in 64-bit mode.
  0F 8B _cd_   JNP _rel32_    D       Valid         Valid             Jump near if not parity (PF=0).
  0F 89 _cw_   JNS _rel16_    D       N.S.          Valid             Jump near if not sign (SF=0). Not supported in 64-bit mode.
  0F 89 _cd_   JNS _rel32_    D       Valid         Valid             Jump near if not sign (SF=0).
  0F 85 _cw_   JNZ _rel16_    D       N.S.          Valid             Jump near if not zero (ZF=0). Not supported in 64-bit mode.
  0F 85 _cd_   JNZ _rel32_    D       Valid         Valid             Jump near if not zero (ZF=0).
  0F 80 _cw_   JO _rel16_     D       N.S.          Valid             Jump near if overflow (OF=1). Not supported in 64-bit mode.
  0F 80 _cd_   JO _rel32_     D       Valid         Valid             Jump near if overflow (OF=1).
  0F 8A _cw_   JP _rel16_     D       N.S.          Valid             Jump near if parity (PF=1). Not supported in 64-bit mode.
  0F 8A _cd_   JP _rel32_     D       Valid         Valid             Jump near if parity (PF=1).
  0F 8A _cw_   JPE _rel16_    D       N.S.          Valid             Jump near if parity even (PF=1). Not supported in 64-bit mode.
  0F 8A _cd_   JPE _rel32_    D       Valid         Valid             Jump near if parity even (PF=1).
  0F 8B _cw_   JPO _rel16_    D       N.S.          Valid             Jump near if parity odd (PF=0). Not supported in 64-bit mode.
  0F 8B _cd_   JPO _rel32_    D       Valid         Valid             Jump near if parity odd (PF=0).
  0F 88 _cw_   JS _rel16_     D       N.S.          Valid             Jump near if sign (SF=1). Not supported in 64-bit mode.
  0F 88 _cd_   JS _rel32_     D       Valid         Valid             Jump near if sign (SF=1).
  0F 84 _cw_   JZ _rel16_     D       N.S.          Valid             Jump near if 0 (ZF=1). Not supported in 64-bit mode.
  0F 84 _cd_   JZ _rel32_     D       Valid         Valid             Jump near if 0 (ZF=1).


Instruction Operand Encoding ¶

  ------- ----------- ----------- ----------- -----------
  Op/En   Operand 1   Operand 2   Operand 3   Operand 4
  D       Offset      NA          NA          NA
  ------- ----------- ----------- ----------- -----------


Description ¶

Checks the state of one or more of the status flags in the EFLAGS
register (CF, OF, PF, SF, and ZF) and, if the flags are in the specified
state (condition), performs a jump to the target instruction specified
by the destination operand. A condition code (_cc_) is associated with
each instruction to indicate the condition being tested for. If the
condition is not satisfied, the jump is not performed and execution
continues with the instruction following the J_cc_ instruction.

The target instruction is specified with a relative offset (a signed
offset relative to the current value of the instruction pointer in the
EIP register). A relative offset (_rel8_, _rel16,_ or _rel32_) is
generally specified as a label in assembly code, but at the machine code
level, it is encoded as a signed, 8-bit or 32-bit immediate value, which
is added to the instruction pointer. Instruction coding is most
efficient for offsets of –128 to +127. If the operand-size attribute is
16, the upper two bytes of the EIP register are cleared, resulting in a
maximum instruction pointer size of 16 bits.

The conditions for each J_cc_ mnemonic are given in the “Description”
column of the table on the preceding page. The terms “less” and
“greater” are used for comparisons of signed integers and the terms
“above” and “below” are used for unsigned integers.

Because a particular state of the status flags can sometimes be
interpreted in two ways, two mnemonics are defined for some opcodes. For
example, the JA (jump if above) instruction and the JNBE (jump if not
below or equal) instruction are alternate mnemonics for the opcode 77H.

The J_cc_ instruction does not support far jumps (jumps to other code
segments). When the target for the conditional jump is in a different
segment, use the opposite condition from the condition being tested for
the J_cc_ instruction, and then access the target with an unconditional
far jump (JMP instruction) to the other segment. For example, the
following conditional far jump is illegal:

JZ FARLABEL;

To accomplish this far jump, use the following two instructions:

JNZ BEYOND;

JMP FARLABEL;

BEYOND:

The JRCXZ, JECXZ and JCXZ instructions differ from other J_cc_
instructions because they do not check status flags. Instead, they check
RCX, ECX or CX for 0. The register checked is determined by the
address-size attribute. These instructions are useful when used at the
beginning of a loop that terminates with a conditional loop instruction
(such as LOOPNE). They can be used to prevent an instruction sequence
from entering a loop when RCX, ECX or CX is 0. This would cause the loop
to execute 2⁶⁴, 2³² or 64K times (not zero times).

All conditional jumps are converted to code fetches of one or two cache
lines, regardless of jump address or cache-ability.

In 64-bit mode, operand size is fixed at 64 bits. JMP Short is RIP = RIP
+ 8-bit offset sign extended to 64 bits. JMP Near is RIP = RIP + 32-bit
offset sign extended to 64 bits.


Operation ¶

    IF condition
        THEN
            tempEIP ← EIP + SignExtend(DEST);
            IF OperandSize = 16
                THEN tempEIP ← tempEIP AND 0000FFFFH;
            FI;
        IF tempEIP is not within code segment limit
            THEN #GP(0);
            ELSE EIP ← tempEIP
        FI;
    FI;


Flags Affected ¶

None


Protected Mode Exceptions ¶

  -------- -----------------------------------------------------------------------
  #GP(0)   If the offset being jumped to is beyond the limits of the CS segment.
  #UD      If the LOCK prefix is used.
  -------- -----------------------------------------------------------------------


Real-Address Mode Exceptions ¶

  ----- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  #GP   If the offset being jumped to is beyond the limits of the CS segment or is outside of the effective address space from 0 to FFFFH. This condition can occur if a 32-bit address size override prefix is used.
  #UD   If the LOCK prefix is used.
  ----- ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Virtual-8086 Mode Exceptions ¶

Same exceptions as in real address mode.


Compatibility Mode Exceptions ¶

Same exceptions as in protected mode.


64-Bit Mode Exceptions ¶

  -------- ---------------------------------------------------
  #GP(0)   If the memory address is in a non-canonical form.
  #UD      If the LOCK prefix is used.
  -------- ---------------------------------------------------

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
