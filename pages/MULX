-   Index
-   December 2017



MULX — UNSIGNED MULTIPLY WITHOUT AFFECTING FLAGS


  Opcode/Instruction                                     Op/En   64/32 -bit Mode   CPUID Feature Flag   Description
  ------------------------------------------------------ ------- ----------------- -------------------- ---------------------------------------------------------------------------
  VEX.NDD.LZ.F2.0F38.W0 F6 /r MULX _r32a, r32b, r/m32_   RVM     V/V               BMI2                 Unsigned multiply of _r/m32_ with EDX without affecting arithmetic flags.
  VEX.NDD.LZ.F2.0F38.W1 F6 /r MULX _r64a, r64b, r/m64_   RVM     V/N.E.            BMI2                 Unsigned multiply of _r/m64_ with RDX without affecting arithmetic flags.


Instruction Operand Encoding¶

  ------- --------------- -------------- --------------- --------------------------------------
  Op/En   Operand 1       Operand 2      Operand 3       Operand 4
  RVM     ModRM:reg (w)   VEX.vvvv (w)   ModRM:r/m (r)   RDX/EDX is implied 64/32 bits source
  ------- --------------- -------------- --------------- --------------------------------------


Description¶

Performs an unsigned multiplication of the implicit source operand
(EDX/RDX) and the specified source operand (the third operand) and
stores the low half of the result in the second destination (second
operand), the high half of the result in the first destination operand
(first operand), without reading or writing the arithmetic flags. This
enables efficient programming where the software can interleave add with
carry operations and multiplications.

If the first and second operand are identical, it will contain the high
half of the multiplication result.

This instruction is not supported in real mode and virtual-8086 mode.
The operand size is always 32 bits if not in 64-bit mode. In 64-bit mode
operand size 64 requires VEX.W1. VEX.W1 is ignored in non-64-bit modes.
An attempt to execute this instruction with VEX.L not equal to 0 will
cause #UD.


Operation¶

    // DEST1: ModRM:reg
    // DEST2: VEX.vvvv
    IF (OperandSize = 32)
        SRC1 ← EDX;
        DEST2 ← (SRC1*SRC2)[31:0];
        DEST1 ← (SRC1*SRC2)[63:32];
    ELSE IF (OperandSize = 64)
        SRC1 ← RDX;
            DEST2 ← (SRC1*SRC2)[63:0];
            DEST1 ← (SRC1*SRC2)[127:64];
    FI


Flags Affected¶

None


Intel C/C++ Compiler Intrinsic Equivalent¶

    Auto-generated from high-level language when possible. unsigned int mulx_u32(unsigned int a, unsigned int b, unsigned int * hi);

    unsigned __int64 mulx_u64(unsigned __int64 a, unsigned __int64 b, unsigned __int64 * hi);


SIMD Floating-Point Exceptions¶

None


Other Exceptions¶

See Section 2.5.1, “Exception Conditions for VEX-Encoded GPR
Instructions”, Table 2-29; additionally

  ----- ---------------
  #UD   If VEX.W = 1.
  ----- ---------------

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
