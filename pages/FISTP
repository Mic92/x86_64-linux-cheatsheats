-   Index
-   December 2017



FIST/FISTP — STORE INTEGER


  Opcode   Instruction      64-Bit Mode   Compat/Leg Mode   Description
  -------- ---------------- ------------- ----------------- -------------------------------------------------
  DF /2    FIST _m16int_    Valid         Valid             Store ST(0) in _m16int._
  DB /2    FIST _m32int_    Valid         Valid             Store ST(0) in _m32int._
  DF /3    FISTP _m16int_   Valid         Valid             Store ST(0) in _m16int_ and pop register stack.
  DB /3    FISTP _m32int_   Valid         Valid             Store ST(0) in _m32int_ and pop register stack.
  DF /7    FISTP _m64int_   Valid         Valid             Store ST(0) in _m64int_ and pop register stack.


Description¶

The FIST instruction converts the value in the ST(0) register to a
signed integer and stores the result in the destination operand. Values
can be stored in word or doubleword integer format. The destination
operand specifies the address where the first byte of the destination
value is to be stored.

The FISTP instruction performs the same operation as the FIST
instruction and then pops the register stack. To pop the register stack,
the processor marks the ST(0) register as empty and increments the stack
pointer (TOP) by 1. The FISTP instruction also stores values in quadword
integer format.

The following table shows the results obtained when storing various
classes of numbers in integer format.

ST(0)

DEST

− ∞ or Value Too Large for DEST Format

*

F ≤ −1

−I

−1 < F < −0

**

−0

0

+0

0

+0<F<+1

**

F≥+1

+I

+ ∞ or Value Too Large for DEST Format

*

NaN

*

NOTES: F Meansfinitefloating-pointvalue. I Means integer. *
Indicatesfloating-pointinvalid-operation(#IA)exception. ** 0 or ±1,
depending on the rounding mode.

Table 3-27. FIST/FISTP Results

If the source value is a non-integral value, it is rounded to an integer
value, according to the rounding mode specified by the RC field of the
FPU control word.

If the converted value is too large for the destination format, or if
the source operand is an ∞, SNaN, QNAN, or is in an unsupported format,
an invalid-arithmetic-operand condition is signaled. If the
invalid-operation exception is not masked, an invalid-arithmetic-operand
exception (#IA) is generated and no value is stored in the destination
operand. If the invalid-operation exception is masked, the integer
indefinite value is stored in memory.

This instruction’s operation is the same in non-64-bit modes and 64-bit
mode.


Operation¶

    DEST ← Integer(ST(0));
    IF Instruction = FISTP
        THEN
            PopRegisterStack;
    FI;


FPU Flags Affected¶

C1

Set to 0 if stack underflow occurred.

Indicates rounding direction of if the inexact exception (#P) is
generated: 0 ← not roundup; 1 ← roundup.

Set to 0 otherwise.

C0, C2, C3

Undefined.


Floating-Point Exceptions¶

#IS

Stack underflow occurred.

#IA

Converted value is too large for the destination format.

Source operand is an SNaN, QNaN, ±∞, or unsupported format.

#P

Value cannot be represented exactly in destination format.


Protected Mode Exceptions¶

#GP(0)

If the destination is located in a non-writable segment.

If a memory operand effective address is outside the CS, DS, ES, FS, or
GS segment limit.

If the DS, ES, FS, or GS register is used to access memory and it
contains a NULL segment selector.

#SS(0)

If a memory operand effective address is outside the SS segment limit.

#NM

CR0.EM[bit 2] or CR0.TS[bit 3] = 1.

#PF(fault-code)

If a page fault occurs.

#AC(0)

If alignment checking is enabled and an unaligned memory reference is
made while the current privilege level is 3.

#UD

If the LOCK prefix is used.


Real-Address Mode Exceptions¶

  ----- -------------------------------------------------------------------------------------------
  #GP   If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
  #SS   If a memory operand effective address is outside the SS segment limit.
  #NM   CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
  #UD   If the LOCK prefix is used.
  ----- -------------------------------------------------------------------------------------------


Virtual-8086 Mode Exceptions¶

  ----------------- -------------------------------------------------------------------------------------------
  #GP(0)            If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
  #SS(0)            If a memory operand effective address is outside the SS segment limit.
  #NM               CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
  #PF(fault-code)   If a page fault occurs.
  #AC(0)            If alignment checking is enabled and an unaligned memory reference is made.
  #UD               If the LOCK prefix is used.
  ----------------- -------------------------------------------------------------------------------------------


Compatibility Mode Exceptions¶

Same exceptions as in protected mode.


64-Bit Mode Exceptions¶

  ----------------- --------------------------------------------------------------------------------------------------------------------
  #SS(0)            If a memory address referencing the SS segment is in a non-canonical form.
  #GP(0)            If the memory address is in a non-canonical form.
  #NM               CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
  #MF               If there is a pending x87 FPU exception.
  #PF(fault-code)   If a page fault occurs.
  #AC(0)            If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
  #UD               If the LOCK prefix is used.
  ----------------- --------------------------------------------------------------------------------------------------------------------

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
