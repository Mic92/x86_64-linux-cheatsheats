-   Index
-   December 2017



LDMXCSR — LOAD MXCSR REGISTER


  Opcode/Instruction                   Op/En   64/32-bit Mode   CPUID Feature Flag   Description
  ------------------------------------ ------- ---------------- -------------------- ---------------------------------
  NP 0F AE /2 LDMXCSR _m32_            M       V/V              SSE                  Load MXCSR register from _m32_.
  VEX.LZ.0F.WIG AE /2 VLDMXCSR _m32_   M       V/V              AVX                  Load MXCSR register from _m32._


Instruction Operand Encoding¶

  ------- --------------- ----------- ----------- -----------
  Op/En   Operand 1       Operand 2   Operand 3   Operand 4
  M       ModRM:r/m (r)   NA          NA          NA
  ------- --------------- ----------- ----------- -----------


Description¶

Loads the source operand into the MXCSR control/status register. The
source operand is a 32-bit memory location. See “MXCSR Control and
Status Register” in Chapter 10, of the _Intel® 64 and IA-32
Architectures Software Developer’s Manual, Volume 1_, for a description
of the MXCSR register and its contents.

The LDMXCSR instruction is typically used in conjunction with the
(V)STMXCSR instruction, which stores the contents of the MXCSR register
in memory.

The default MXCSR value at reset is 1F80H.

If a (V)LDMXCSR instruction clears a SIMD floating-point exception mask
bit and sets the corresponding exception flag bit, a SIMD floating-point
exception will not be immediately generated. The exception will be
generated only upon the execution of the next instruction that meets
both conditions below:

-   the instruction must operate on an XMM or YMM register operand,
-   the instruction causes that particular SIMD floating-point exception
    to be reported.

This instruction’s operation is the same in non-64-bit modes and 64-bit
mode.

If VLDMXCSR is encoded with VEX.L= 1, an attempt to execute the
instruction encoded with VEX.L= 1 will cause an #UD exception.

Note: In VEX-encoded versions, VEX.vvvv is reserved and must be 1111b,
otherwise instructions will #UD.


Operation¶

    MXCSR ← m32;


C/C++ Compiler Intrinsic Equivalent¶

    _mm_setcsr(unsigned int i)


Numeric Exceptions¶

None


Other Exceptions¶

See Exceptions Type 5; additionally

  ----- -----------------------------------------------
  #GP   For an attempt to set reserved bits in MXCSR.
  #UD   If VEX.vvvv ≠ 1111B.
  ----- -----------------------------------------------

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
