-   Index
-   May 2019

VCVTTPD2UDQ — Convert with Truncation Packed Double-Precision Floating-Point Values to Packed Unsigned Doubleword Integers

  Opcode Instruction                                                      Op/En   64/32 bit Mode Support   CPUID Feature Flag   Description
  ----------------------------------------------------------------------- ------- ------------------------ -------------------- --------------------------------------------------------------------------------------------------------------------------------------------------------------------------
  EVEX.128.0F.W1 78 /r VCVTTPD2UDQ xmm1 {k1}{z}, xmm2/m128/m64bcst        A       V/V                      AVX512VL AVX512F     Convert two packed double-precision floating-point values in xmm2/m128/m64bcst to two unsigned doubleword integers in xmm1 using truncation subject to writemask k1.
  EVEX.256.0F.W1 78 02 /r VCVTTPD2UDQ xmm1 {k1}{z}, ymm2/m256/m64bcst     A       V/V                      AVX512VL AVX512F     Convert four packed double-precision floating-point values in ymm2/m256/m64bcst to four unsigned doubleword integers in xmm1 using truncation subject to writemask k1.
  EVEX.512.0F.W1 78 /r VCVTTPD2UDQ ymm1 {k1}{z}, zmm2/m512/m64bcst{sae}   A       V/V                      AVX512F              Convert eight packed double-precision floating-point values in zmm2/m512/m64bcst to eight unsigned doubleword integers in ymm1 using truncation subject to writemask k1.

Instruction Operand Encoding ¶

  ------- ------------ --------------- --------------- ----------- -----------
  Op/En   Tuple Type   Operand 1       Operand 2       Operand 3   Operand 4
  A       Full         ModRM:reg (w)   ModRM:r/m (r)   NA          NA
  ------- ------------ --------------- --------------- ----------- -----------

Description ¶

Converts with truncation packed double-precision floating-point values
in the source operand (the second operand) to packed unsigned doubleword
integers in the destination operand (the first operand).

When a conversion is inexact, the value returned is rounded according to
the rounding control bits in the MXCSR register. If a converted result
cannot be represented in the destination format, the floating-point
invalid exception is raised, and if this exception is masked, the
integer value 2^(w) – 1 is returned, where w represents the number of
bits in the destination format.

The source operand is a ZMM/YMM/XMM register, a 512/256/128-bit memory
location, or a 512/256/128-bit vector broadcasted from a 64-bit memory
location. The destination operand is a YMM/XMM/XMM (low 64 bits)
register conditionally updated with writemask k1. The upper bits
(MAXVL-1:256) of the corresponding destination are zeroed.

Note: EVEX.vvvv is reserved and must be 1111b, otherwise instructions
will #UD.

Operation ¶

VCVTTPD2UDQ (EVEX encoded versions) when src2 operand is a register ¶

    (KL, VL) = (2, 128), (4, 256),(8, 512)
    FOR j←0 TO KL-1
        i←j * 32
        k←j * 64
        IF k1[j] OR *no writemask*
            THEN
                DEST[i+31:i] ←
                Convert_Double_Precision_Floating_Point_To_UInteger_Truncate(SRC[k+63:k])
            ELSE
                IF *merging-masking* ; merging-masking
                    THEN *DEST[i+31:i] remains unchanged*
                    ELSE ; zeroing-masking
                        DEST[i+31:i] ← 0
                FI
        FI;
    ENDFOR
    DEST[MAXVL-1:VL/2] ← 0

VCVTTPD2UDQ (EVEX encoded versions) when src operand is a memory source ¶

    (KL, VL) = (2, 128), (4, 256),(8, 512)
    FOR j←0 TO KL-1
        i←j * 32
        k←j * 64
        IF k1[j] OR *no writemask*
            THEN
                IF (EVEX.b = 1)
                    THEN
                        DEST[i+31:i] ←
                Convert_Double_Precision_Floating_Point_To_UInteger_Truncate(SRC[63:0])
                    ELSE
                        DEST[i+31:i] ←
                Convert_Double_Precision_Floating_Point_To_UInteger_Truncate(SRC[k+63:k])
                FI;
            ELSE
                IF *merging-masking* ; merging-masking
                    THEN *DEST[i+31:i] remains unchanged*
                    ELSE ; zeroing-masking
                        DEST[i+31:i] ← 0
                FI
        FI;
    ENDFOR
    DEST[MAXVL-1:VL/2] ← 0

Intel C/C++ Compiler Intrinsic Equivalent ¶

    VCVTTPD2UDQ __m256i _mm512_cvttpd_epu32( __m512d a);

    VCVTTPD2UDQ __m256i _mm512_mask_cvttpd_epu32( __m256i s, __mmask8 k, __m512d a);

    VCVTTPD2UDQ __m256i _mm512_maskz_cvttpd_epu32( __mmask8 k, __m512d a);

    VCVTTPD2UDQ __m256i _mm512_cvtt_roundpd_epu32( __m512d a, int sae);

    VCVTTPD2UDQ __m256i _mm512_mask_cvtt_roundpd_epu32( __m256i s, __mmask8 k, __m512d a, int sae);

    VCVTTPD2UDQ __m256i _mm512_maskz_cvtt_roundpd_epu32( __mmask8 k, __m512d a, int sae);

    VCVTTPD2UDQ __m128i _mm256_mask_cvttpd_epu32( __m128i s, __mmask8 k, __m256d a);

    VCVTTPD2UDQ __m128i _mm256_maskz_cvttpd_epu32( __mmask8 k, __m256d a);

    VCVTTPD2UDQ __m128i _mm_mask_cvttpd_epu32( __m128i s, __mmask8 k, __m128d a);

    VCVTTPD2UDQ __m128i _mm_maskz_cvttpd_epu32( __mmask8 k, __m128d a);

SIMD Floating-Point Exceptions ¶

Invalid, Precision

Other Exceptions ¶

EVEX-encoded instructions, see Exceptions Type E2.

  ----- ------------------------
  #UD   If EVEX.vvvv != 1111B.
  ----- ------------------------

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
