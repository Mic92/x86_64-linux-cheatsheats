-   Index
-   May 2019



CBW/CWDE/CDQE — CONVERT BYTE TO WORD/CONVERT WORD TO DOUBLEWORD/CONVERT DOUBLEWORD TO QUADWORD


  Opcode       Instruction   Op/En   64-bit Mode   Compat/Leg Mode   Description
  ------------ ------------- ------- ------------- ----------------- ---------------------------
  98           CBW           ZO      Valid         Valid             AX ← sign-extend of AL.
  98           CWDE          ZO      Valid         Valid             EAX ← sign-extend of AX.
  REX.W + 98   CDQE          ZO      Valid         N.E.              RAX ← sign-extend of EAX.


Instruction Operand Encoding ¶

  ------- ----------- ----------- ----------- -----------
  Op/En   Operand 1   Operand 2   Operand 3   Operand 4
  ZO      NA          NA          NA          NA
  ------- ----------- ----------- ----------- -----------


Description ¶

Double the size of the source operand by means of sign extension. The
CBW (convert byte to word) instruction copies the sign (bit 7) in the
source operand into every bit in the AH register. The CWDE (convert word
to double-word) instruction copies the sign (bit 15) of the word in the
AX register into the high 16 bits of the EAX register.

CBW and CWDE reference the same opcode. The CBW instruction is intended
for use when the operand-size attribute is 16; CWDE is intended for use
when the operand-size attribute is 32. Some assemblers may force the
operand size. Others may treat these two mnemonics as synonyms
(CBW/CWDE) and use the setting of the operand-size attribute to
determine the size of values to be converted.

In 64-bit mode, the default operation size is the size of the
destination register. Use of the REX.W prefix promotes this instruction
(CDQE when promoted) to operate on 64-bit operands. In which case, CDQE
copies the sign (bit 31) of the doubleword in the EAX register into the
high 32 bits of RAX.


Operation ¶

    IF OperandSize = 16 (* Instruction = CBW *)
        THEN
            AX ← SignExtend(AL);
        ELSE IF (OperandSize = 32, Instruction = CWDE)
            EAX ← SignExtend(AX); FI;
        ELSE (* 64-Bit Mode, OperandSize = 64, Instruction = CDQE*)
            RAX ← SignExtend(EAX);
    FI;


Flags Affected ¶

None.


Exceptions (All Operating Modes) ¶

#UD If the LOCK prefix is used.

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
