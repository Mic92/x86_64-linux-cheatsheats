-   Index
-   December 2017



VCVTUDQ2PD — CONVERT PACKED UNSIGNED DOUBLEWORD INTEGERS TO PACKED DOUBLE-PRECISION FLOATING-POINT VALUES


  Opcode/Instruction                                                   Op/En   64/32 bit Mode Support   CPUID Feature Flag   Description
  -------------------------------------------------------------------- ------- ------------------------ -------------------- ------------------------------------------------------------------------------------------------------------------------------------------------------------
  EVEX.128.F3.0F.W0 7A /r VCVTUDQ2PD xmm1 {k1}{z}, xmm2/m64/m32bcst    A       V/V                      AVX512VL AVX512F     Convert two packed unsigned doubleword integers from ymm2/m64/m32bcst to packed double-precision floating-point values in zmm1 with writemask k1.
  EVEX.256.F3.0F.W0 7A /r VCVTUDQ2PD ymm1 {k1}{z}, xmm2/m128/m32bcst   A       V/V                      AVX512VL AVX512F     Convert four packed unsigned doubleword integers from xmm2/m128/m32bcst to packed double-precision floating-point values in zmm1 with writemask k1.
  EVEX.512.F3.0F.W0 7A /r VCVTUDQ2PD zmm1 {k1}{z}, ymm2/m256/m32bcst   A       V/V                      AVX512F              Convert eight packed unsigned doubleword integers from ymm2/m256/m32bcst to eight packed double-precision floating-point values in zmm1 with writemask k1.


Instruction Operand Encoding¶

  ------- ------------ --------------- --------------- ----------- -----------
  Op/En   Tuple Type   Operand 1       Operand 2       Operand 3   Operand 4
  A       Half         ModRM:reg (w)   ModRM:r/m (r)   NA          NA
  ------- ------------ --------------- --------------- ----------- -----------

Description¶

Converts packed unsigned doubleword integers in the source operand
(second operand) to packed double-precision floating-point values in the
destination operand (first operand).

The source operand is a YMM/XMM/XMM (low 64 bits) register, a
256/128/64-bit memory location or a 256/128/64-bit vector broadcasted
from a 32-bit memory location. The destination operand is a ZMM/YMM/XMM
register conditionally updated with writemask k1.

Attempt to encode this instruction with EVEX embedded rounding is
ignored.

Note: EVEX.vvvv is reserved and must be 1111b, otherwise instructions
will #UD.

Operation¶

VCVTUDQ2PD (EVEX encoded versions) when src operand is a register¶

    (KL, VL) = (2, 128), (4, 256), (8, 512)
    FOR j←0 TO KL-1
        i←j * 64
        k←j * 32
        IF k1[j] OR *no writemask*
            THEN DEST[i+63:i]←
                Convert_UInteger_To_Double_Precision_Floating_Point(SRC[k+31:k])
            ELSE
                IF *merging-masking* ; merging-masking
                    THEN *DEST[i+63:i] remains unchanged*
                    ELSE ; zeroing-masking
                        DEST[i+63:i] ← 0
                FI
        FI;
    ENDFOR
    DEST[MAXVL-1:VL] ← 0

VCVTUDQ2PD (EVEX encoded versions) when src operand is a memory source¶

    (KL, VL) = (2, 128), (4, 256), (8, 512)
    FOR j←0 TO KL-1
        i←j * 64
        k←j * 32
        IF k1[j] OR *no writemask*
            THEN
                IF (EVEX.b = 1)
                    THEN
                        DEST[i+63:i] ←
                Convert_UInteger_To_Double_Precision_Floating_Point(SRC[31:0])
                    ELSE
                        DEST[i+63:i] ←
                Convert_UInteger_To_Double_Precision_Floating_Point(SRC[k+31:k])
                FI;
            ELSE
                IF *merging-masking* ; merging-masking
                    THEN *DEST[i+63:i] remains unchanged*
                    ELSE ; zeroing-masking
                        DEST[i+63:i] ← 0
                FI
        FI;
    ENDFOR
    DEST[MAXVL-1:VL] ← 0

Intel C/C++ Compiler Intrinsic Equivalent¶

    VCVTUDQ2PD __m512d _mm512_cvtepu32_pd( __m256i a);

    VCVTUDQ2PD __m512d _mm512_mask_cvtepu32_pd( __m512d s, __mmask8 k, __m256i a);

    VCVTUDQ2PD __m512d _mm512_maskz_cvtepu32_pd( __mmask8 k, __m256i a);

    VCVTUDQ2PD __m256d _mm256_cvtepu32_pd( __m128i a);

    VCVTUDQ2PD __m256d _mm256_mask_cvtepu32_pd( __m256d s, __mmask8 k, __m128i a);

    VCVTUDQ2PD __m256d _mm256_maskz_cvtepu32_pd( __mmask8 k, __m128i a);

    VCVTUDQ2PD __m128d _mm_cvtepu32_pd( __m128i a);

    VCVTUDQ2PD __m128d _mm_mask_cvtepu32_pd( __m128d s, __mmask8 k, __m128i a);

    VCVTUDQ2PD __m128d _mm_maskz_cvtepu32_pd( __mmask8 k, __m128i a);

SIMD Floating-Point Exceptions¶

None

Other Exceptions¶

EVEX-encoded instructions, see Exceptions Type E5.

  ----- ------------------------
  #UD   If EVEX.vvvv != 1111B.
  ----- ------------------------

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
