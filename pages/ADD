-   Index
-   May 2019



ADD — ADD


  Opcode               Instruction                Op/En   64-bit Mode   Compat/Leg Mode   Description
  -------------------- -------------------------- ------- ------------- ----------------- --------------------------------------------------
  04 _ib_              ADD AL, _imm8_             I       Valid         Valid             Add _imm8_ to AL.
  05 _iw_              ADD AX, _imm16_            I       Valid         Valid             Add _imm16_ to AX.
  05 _id_              ADD EAX, _imm32_           I       Valid         Valid             Add _imm32_ to EAX.
  REX.W + 05 _id_      ADD RAX, _imm32_           I       Valid         N.E.              Add _imm32 sign-extended to 64-bits_ to RAX.
  80 /0 _ib_           ADD _r/m8, imm8_           MI      Valid         Valid             Add _imm8_ to _r/m8._
  REX + 80 /0 _ib_     ADD _r/m8_^(*)_, imm8_     MI      Valid         N.E.              Add _sign_-extended _imm8_ to _r/m8._
  81 /0 _iw_           ADD _r/m16, imm16_         MI      Valid         Valid             Add _imm16_ to _r/m16._
  81 /0 _id_           ADD _r/m32, imm32_         MI      Valid         Valid             Add _imm32_ to _r/m32_.
  REX.W + 81 /0 _id_   ADD _r/m64, imm32_         MI      Valid         N.E.              Add _imm32 sign-extended to 64-bits_ to _r/m64_.
  83 /0 _ib_           ADD _r/m16, imm8_          MI      Valid         Valid             Add _sign_-extended _imm8_ to _r/m16._
  83 /0 _ib_           ADD _r/m32, imm8_          MI      Valid         Valid             Add _sign_-extended _imm8_ to _r/m32._
  REX.W + 83 /0 _ib_   ADD _r/m64, imm8_          MI      Valid         N.E.              Add _sign_-extended _imm8_ to _r/m64._
  00 /_r_              ADD _r/m8, r8_             MR      Valid         Valid             Add _r8_ to _r/m8._
  REX + 00 /_r_        ADD _r/m8_^(*)_, r8_^(*)   MR      Valid         N.E.              Add _r8_ to _r/m8._
  01 /_r_              ADD _r/m16, r16_           MR      Valid         Valid             Add _r16_ to _r/m16._
  01 /_r_              ADD _r/m32, r32_           MR      Valid         Valid             Add r32 to _r/m32._
  REX.W + 01 /_r_      ADD _r/m64, r64_           MR      Valid         N.E.              Add r64 to _r/m64._
  02 /_r_              ADD _r8, r/m8_             RM      Valid         Valid             Add _r/m8_ to _r8._
  REX + 02 /_r_        ADD _r8_^(*)_, r/m8_^(*)   RM      Valid         N.E.              Add _r/m8_ to _r8._
  03 /_r_              ADD _r16, r/m16_           RM      Valid         Valid             Add _r/m16_ to _r16._
  03 /_r_              ADD _r32, r/m32_           RM      Valid         Valid             Add _r/m32_ to _r32._
  REX.W + 03 /_r_      ADD _r64, r/m64_           RM      Valid         N.E.              Add _r/m64_ to _r64._

  *In 64-bit mode, r/m8 can not be encoded to access the following byte
  registers if a REX prefix is used: AH, BH, CH, DH.


Instruction Operand Encoding ¶

  ------- ------------------ --------------- ----------- -----------
  Op/En   Operand 1          Operand 2       Operand 3   Operand 4
  RM      ModRM:reg (r, w)   ModRM:r/m (r)   NA          NA
  MR      ModRM:r/m (r, w)   ModRM:reg (r)   NA          NA
  MI      ModRM:r/m (r, w)   imm8/16/32      NA          NA
  I       AL/AX/EAX/RAX      imm8/16/32      NA          NA
  ------- ------------------ --------------- ----------- -----------


Description ¶

Adds the destination operand (first operand) and the source operand
(second operand) and then stores the result in the destination operand.
The destination operand can be a register or a memory location; the
source operand can be an immediate, a register, or a memory location.
(However, two memory operands cannot be used in one instruction.) When
an immediate value is used as an operand, it is sign-extended to the
length of the destination operand format.

The ADD instruction performs integer addition. It evaluates the result
for both signed and unsigned integer operands and sets the CF and OF
flags to indicate a carry (overflow) in the signed or unsigned result,
respectively. The SF flag indicates the sign of the signed result.

This instruction can be used with a LOCK prefix to allow the instruction
to be executed atomically.

In 64-bit mode, the instruction’s default operation size is 32 bits.
Using a REX prefix in the form of REX.R permits access to additional
registers (R8-R15). Using a REX prefix in the form of REX.W promotes
operation to 64 bits. See the summary chart at the beginning of this
section for encoding data and limits.


Operation ¶

    DEST ← DEST + SRC;


Flags Affected ¶

The OF, SF, ZF, AF, CF, and PF flags are set according to the result.


Protected Mode Exceptions ¶

#GP(0)

If the destination is located in a non-writable segment.

If a memory operand effective address is outside the CS, DS, ES, FS, or
GS segment limit.

If the DS, ES, FS, or GS register is used to access memory and it
contains a NULL segment selector.

#SS(0)

If a memory operand effective address is outside the SS segment limit.

#PF(fault-code)

If a page fault occurs.

#AC(0)

If alignment checking is enabled and an unaligned memory reference is
made while the current privilege level is 3.

#UD

If the LOCK prefix is used but the destination is not a memory operand.


Real-Address Mode Exceptions ¶

  ----- -------------------------------------------------------------------------------------------
  #GP   If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
  #SS   If a memory operand effective address is outside the SS segment limit.
  #UD   If the LOCK prefix is used but the destination is not a memory operand.
  ----- -------------------------------------------------------------------------------------------


Virtual-8086 Mode Exceptions ¶

  ----------------- -------------------------------------------------------------------------------------------
  #GP(0)            If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
  #SS(0)            If a memory operand effective address is outside the SS segment limit.
  #PF(fault-code)   If a page fault occurs.
  #AC(0)            If alignment checking is enabled and an unaligned memory reference is made.
  #UD               If the LOCK prefix is used but the destination is not a memory operand.
  ----------------- -------------------------------------------------------------------------------------------


Compatibility Mode Exceptions ¶

Same exceptions as in protected mode.


64-Bit Mode Exceptions ¶

  ----------------- --------------------------------------------------------------------------------------------------------------------
  #SS(0)            If a memory address referencing the SS segment is in a non-canonical form.
  #GP(0)            If the memory address is in a non-canonical form.
  #PF(fault-code)   If a page fault occurs.
  #AC(0)            If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
  #UD               If the LOCK prefix is used but the destination is not a memory operand.
  ----------------- --------------------------------------------------------------------------------------------------------------------

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
