-   Index
-   May 2019



PXOR — LOGICAL EXCLUSIVE OR


  Opcode*/Instruction                                                    Op/En   64/32 bit Mode Support   CPUID Feature Flag   Description
  ---------------------------------------------------------------------- ------- ------------------------ -------------------- ---------------------------------------------------------------------------------------------
  NP 0F EF /_r_¹ PXOR _mm, mm/m64_                                       A       V/V                      MMX                  Bitwise XOR of _mm/m64_ and _mm_.
  66 0F EF /_r_ PXOR _xmm1_, _xmm2/m128_                                 A       V/V                      SSE2                 Bitwise XOR of _xmm2/m128_ and _xmm1_.
  VEX.128.66.0F.WIG EF /r VPXOR _xmm1, xmm2, xmm3/m128_                  B       V/V                      AVX                  Bitwise XOR of _xmm3/m128_ and _xmm2_.
  VEX.256.66.0F.WIG EF /r VPXOR _ymm1, ymm2, ymm3/m256_                  B       V/V                      AVX2                 Bitwise XOR of _ymm3/m256_ and _ymm2._
  EVEX.128.66.0F.W0 EF /r VPXORD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst   C       V/V                      AVX512VL AVX512F     Bitwise XOR of packed doubleword integers in xmm2 and xmm3/m128 using writemask k1.
  EVEX.256.66.0F.W0 EF /r VPXORD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst   C       V/V                      AVX512VL AVX512F     Bitwise XOR of packed doubleword integers in ymm2 and ymm3/m256 using writemask k1.
  EVEX.512.66.0F.W0 EF /r VPXORD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst   C       V/V                      AVX512F              Bitwise XOR of packed doubleword integers in zmm2 and zmm3/m512/m32bcst using writemask k1.
  EVEX.128.66.0F.W1 EF /r VPXORQ xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst   C       V/V                      AVX512VL AVX512F     Bitwise XOR of packed quadword integers in xmm2 and xmm3/m128 using writemask k1.
  EVEX.256.66.0F.W1 EF /r VPXORQ ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst   C       V/V                      AVX512VL AVX512F     Bitwise XOR of packed quadword integers in ymm2 and ymm3/m256 using writemask k1.
  EVEX.512.66.0F.W1 EF /r VPXORQ zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst   C       V/V                      AVX512F              Bitwise XOR of packed quadword integers in zmm2 and zmm3/m512/m64bcst using writemask k1.

  1. See note in Section 2.4, “AVX and SSE Instruction Exception
  Specification” in the _Intel® 64 and IA-32 Architectures Software
  Developer’s Manual, Volume 2A_ and Section 22.25.3, “Exception
  Conditions of Legacy SIMD Instructions Operating on MMX Registers” in
  the _Intel® 64 and IA-32 Architectures Software Developer’s Manual,
  Volume 3A_.


Instruction Operand Encoding ¶

  ------- ------------ ------------------ --------------- --------------- -----------
  Op/En   Tuple Type   Operand 1          Operand 2       Operand 3       Operand 4
  A       NA           ModRM:reg (r, w)   ModRM:r/m (r)   NA              NA
  B       NA           ModRM:reg (w)      VEX.vvvv (r)    ModRM:r/m (r)   NA
  C       Full         ModRM:reg (w)      EVEX.vvvv (r)   ModRM:r/m (r)   NA
  ------- ------------ ------------------ --------------- --------------- -----------


Description ¶

Performs a bitwise logical exclusive-OR (XOR) operation on the source
operand (second operand) and the destination operand (first operand) and
stores the result in the destination operand. Each bit of the result is
1 if the corresponding bits of the two operands are different; each bit
is 0 if the corresponding bits of the operands are the same.

In 64-bit mode and not encoded with VEX/EVEX, using a REX prefix in the
form of REX.R permits this instruction to access additional registers
(XMM8-XMM15).

Legacy SSE instructions 64-bit operand: The source operand can be an MMX
technology register or a 64-bit memory location. The destination operand
is an MMX technology register.

128-bit Legacy SSE version: The second source operand is an XMM register
or a 128-bit memory location. The first source operand and destination
operands are XMM registers. Bits (MAXVL-1:128) of the corresponding YMM
destination register remain unchanged.

VEX.128 encoded version: The second source operand is an XMM register or
a 128-bit memory location. The first source operand and destination
operands are XMM registers. Bits (MAXVL-1:128) of the destination YMM
register are zeroed.

VEX.256 encoded version: The first source operand is a YMM register. The
second source operand is a YMM register or a 256-bit memory location.
The destination operand is a YMM register. The upper bits (MAXVL-1:256)
of the corresponding register destination are zeroed.

EVEX encoded versions: The first source operand is a ZMM/YMM/XMM
register. The second source operand can be a ZMM/YMM/XMM register, a
512/256/128-bit memory location or a 512/256/128-bit vector broadcasted
from a 32/64-bit memory location. The destination operand is a
ZMM/YMM/XMM register conditionally updated with writemask k1.


Operation ¶

PXOR (64-bit operand) ¶

    DEST←DEST XOR SRC

PXOR (128-bit Legacy SSE version) ¶

    DEST←DEST XOR SRC
    DEST[MAXVL-1:128] (Unmodified)

VPXOR (VEX.128 encoded version) ¶

    DEST←SRC1 XOR SRC2
    DEST[MAXVL-1:128] ← 0

VPXOR (VEX.256 encoded version) ¶

    DEST←SRC1 XOR SRC2
    DEST[MAXVL-1:256] ← 0

VPXORD (EVEX encoded versions) ¶

    (KL, VL) = (4, 128), (8, 256), (16, 512)
    FOR j←0 TO KL-1
        i←j * 32
        IF k1[j] OR *no writemask* THEN
                IF (EVEX.b = 1) AND (SRC2 *is memory*)
                    THEN DEST[i+31:i]←SRC1[i+31:i] BITWISE XOR SRC2[31:0]
                    ELSE DEST[i+31:i]←SRC1[i+31:i] BITWISE XOR SRC2[i+31:i]
                FI;
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[31:0] remains unchanged*
                ELSE
                        ; zeroing-masking
                    DEST[31:0] ← 0
            FI;
        FI;
    ENDFOR;
    DEST[MAXVL-1:VL] ← 0

VPXORQ (EVEX encoded versions) ¶

    (KL, VL) = (2, 128), (4, 256), (8, 512)
    FOR j←0 TO KL-1
        i←j * 64
        IF k1[j] OR *no writemask* THEN
                IF (EVEX.b = 1) AND (SRC2 *is memory*)
                    THEN DEST[i+63:i]←SRC1[i+63:i] BITWISE XOR SRC2[63:0]
                    ELSE DEST[i+63:i]←SRC1[i+63:i] BITWISE XOR SRC2[i+63:i]
                FI;
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[63:0] remains unchanged*
                ELSE ; zeroing-masking
                    DEST[63:0] ← 0
            FI;
        FI;
    ENDFOR;
    DEST[MAXVL-1:VL] ← 0


Intel C/C++ Compiler Intrinsic Equivalent ¶

    VPXORD __m512i _mm512_xor_epi32(__m512i a, __m512i b)

    VPXORD __m512i _mm512_mask_xor_epi32(__m512i s, __mmask16 m, __m512i a, __m512i b)

    VPXORD __m512i _mm512_maskz_xor_epi32( __mmask16 m, __m512i a, __m512i b)

    VPXORD __m256i _mm256_xor_epi32(__m256i a, __m256i b)

    VPXORD __m256i _mm256_mask_xor_epi32(__m256i s, __mmask8 m, __m256i a, __m256i b)

    VPXORD __m256i _mm256_maskz_xor_epi32( __mmask8 m, __m256i a, __m256i b)

    VPXORD __m128i _mm_xor_epi32(__m128i a, __m128i b)

    VPXORD __m128i _mm_mask_xor_epi32(__m128i s, __mmask8 m, __m128i a, __m128i b)

    VPXORD __m128i _mm_maskz_xor_epi32( __mmask16 m, __m128i a, __m128i b)

    VPXORQ __m512i _mm512_xor_epi64( __m512i a, __m512i b);

    VPXORQ __m512i _mm512_mask_xor_epi64(__m512i s, __mmask8 m, __m512i a, __m512i b);

    VPXORQ __m512i _mm512_maskz_xor_epi64(__mmask8 m, __m512i a, __m512i b);

    VPXORQ __m256i _mm256_xor_epi64( __m256i a, __m256i b);

    VPXORQ __m256i _mm256_mask_xor_epi64(__m256i s, __mmask8 m, __m256i a, __m256i b);

    VPXORQ __m256i _mm256_maskz_xor_epi64(__mmask8 m, __m256i a, __m256i b);

    VPXORQ __m128i _mm_xor_epi64( __m128i a, __m128i b);

    VPXORQ __m128i _mm_mask_xor_epi64(__m128i s, __mmask8 m, __m128i a, __m128i b);

    VPXORQ __m128i _mm_maskz_xor_epi64(__mmask8 m, __m128i a, __m128i b);

    PXOR:__m64 _mm_xor_si64 (__m64 m1, __m64 m2)

    (V)PXOR:__m128i _mm_xor_si128 ( __m128i a, __m128i b)

    VPXOR:__m256i _mm256_xor_si256 ( __m256i a, __m256i b)


Flags Affected ¶

None.


Numeric Exceptions ¶

None.


Other Exceptions ¶

Non-EVEX-encoded instruction, see Exceptions Type 4.

EVEX-encoded instruction, see Exceptions Type E4.

This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be incomplete or b_(r)oke_(n) in
various obvious or non-obvious ways. Refer to Intel® 64 and IA-32
Architectures Software Developer’s Manual for anything serious.
